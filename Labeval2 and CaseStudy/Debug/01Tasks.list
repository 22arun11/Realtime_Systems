
01Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a2c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006bcc  08006bcc  00007bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c88  08006c88  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006c88  08006c88  00007c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c90  08006c90  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c90  08006c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c94  08006c94  00007c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006c98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fc00  20000060  08006cf8  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  2000fc60  08006cf8  00008c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f1f  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d08  00000000  00000000  0001afaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0001dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e01  00000000  00000000  0001ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d10  00000000  00000000  0001fc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144c1  00000000  00000000  000389a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a27a9  00000000  00000000  0004ce6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  000ef658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000f46a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bb4 	.word	0x08006bb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006bb4 	.word	0x08006bb4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_USART2_UART_Init>:
static void bluetooth_task(void* parameters);
void uart_print(const char* str);

/* UART2 Initialization (For Bluetooth) */
static void MX_USART2_UART_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_USART2_UART_Init+0x4c>)
 8000586:	4a12      	ldr	r2, [pc, #72]	@ (80005d0 <MX_USART2_UART_Init+0x50>)
 8000588:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <MX_USART2_UART_Init+0x4c>)
 800058c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000590:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_USART2_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <MX_USART2_UART_Init+0x4c>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <MX_USART2_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_USART2_UART_Init+0x4c>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <MX_USART2_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_USART2_UART_Init+0x4c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <MX_USART2_UART_Init+0x4c>)
 80005b8:	f002 faae 	bl	8002b18 <HAL_UART_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 80005c2:	f000 fb29 	bl	8000c18 <Error_Handler>
    }
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000c4 	.word	0x200000c4
 80005d0:	40004400 	.word	0x40004400

080005d4 <main>:


int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af02      	add	r7, sp, #8
    /* Reset of all peripherals, Initializes the Flash interface and the Systick */
    HAL_Init();
 80005da:	f000 fd05 	bl	8000fe8 <HAL_Init>
    SystemClock_Config();
 80005de:	f000 fabb 	bl	8000b58 <SystemClock_Config>
    MX_USART2_UART_Init();
 80005e2:	f7ff ffcd 	bl	8000580 <MX_USART2_UART_Init>


    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80005e6:	f000 f9c9 	bl	800097c <MX_GPIO_Init>
    MX_ADC1_Init();
 80005ea:	f000 fa51 	bl	8000a90 <MX_ADC1_Init>

    /* Create mutex for PCP */
    adc_mutex = xSemaphoreCreateMutex();
 80005ee:	2001      	movs	r0, #1
 80005f0:	f003 f84c 	bl	800368c <xQueueCreateMutex>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a23      	ldr	r2, [pc, #140]	@ (8000684 <main+0xb0>)
 80005f8:	6013      	str	r3, [r2, #0]
    if (adc_mutex == NULL) {
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <main+0xb0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <main+0x32>
        Error_Handler();
 8000602:	f000 fb09 	bl	8000c18 <Error_Handler>
    }

    /* Create the three tasks with different priorities */
    TaskHandle_t adc_task_handle, led_high_task_handle, led_low_task_handle;

    adc_task_original_priority = ADC_TASK_PRIORITY;
 8000606:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <main+0xb4>)
 8000608:	2203      	movs	r2, #3
 800060a:	601a      	str	r2, [r3, #0]
    led_high_task_original_priority = LED_HIGH_PRIORITY;
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <main+0xb8>)
 800060e:	2202      	movs	r2, #2
 8000610:	601a      	str	r2, [r3, #0]
    led_low_task_original_priority = LED_LOW_PRIORITY;
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <main+0xbc>)
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]

    xTaskCreate(adc_reading_task, "ADCTask", TASK_STACK_SIZE, &adc_task_handle, ADC_TASK_PRIORITY, NULL);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	2203      	movs	r2, #3
 8000622:	9200      	str	r2, [sp, #0]
 8000624:	2280      	movs	r2, #128	@ 0x80
 8000626:	491b      	ldr	r1, [pc, #108]	@ (8000694 <main+0xc0>)
 8000628:	481b      	ldr	r0, [pc, #108]	@ (8000698 <main+0xc4>)
 800062a:	f003 fcd7 	bl	8003fdc <xTaskCreate>
    xTaskCreate(led_pattern_high_task, "LEDHighTask", TASK_STACK_SIZE, &led_high_task_handle, LED_HIGH_PRIORITY, NULL);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	2200      	movs	r2, #0
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	2202      	movs	r2, #2
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	2280      	movs	r2, #128	@ 0x80
 800063c:	4917      	ldr	r1, [pc, #92]	@ (800069c <main+0xc8>)
 800063e:	4818      	ldr	r0, [pc, #96]	@ (80006a0 <main+0xcc>)
 8000640:	f003 fccc 	bl	8003fdc <xTaskCreate>
    xTaskCreate(led_pattern_low_task, "LEDLowTask", TASK_STACK_SIZE, &led_low_task_handle, LED_LOW_PRIORITY, NULL);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	9201      	str	r2, [sp, #4]
 800064a:	2201      	movs	r2, #1
 800064c:	9200      	str	r2, [sp, #0]
 800064e:	2280      	movs	r2, #128	@ 0x80
 8000650:	4914      	ldr	r1, [pc, #80]	@ (80006a4 <main+0xd0>)
 8000652:	4815      	ldr	r0, [pc, #84]	@ (80006a8 <main+0xd4>)
 8000654:	f003 fcc2 	bl	8003fdc <xTaskCreate>
    vTaskSetDeadline(adc_task_handle,2000);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 f9c4 	bl	80049ec <vTaskSetDeadline>
    vTaskSetDeadline(led_high_task_handle,3000);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800066a:	4618      	mov	r0, r3
 800066c:	f004 f9be 	bl	80049ec <vTaskSetDeadline>
    vTaskSetDeadline(adc_task_handle,1000);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000676:	4618      	mov	r0, r3
 8000678:	f004 f9b8 	bl	80049ec <vTaskSetDeadline>
    /* Start scheduler */
    vTaskStartScheduler();
 800067c:	f003 ff24 	bl	80044c8 <vTaskStartScheduler>

    /* We should never get here as control is now taken by the scheduler */
    while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <main+0xac>
 8000684:	2000010c 	.word	0x2000010c
 8000688:	20000118 	.word	0x20000118
 800068c:	2000011c 	.word	0x2000011c
 8000690:	20000120 	.word	0x20000120
 8000694:	08006bcc 	.word	0x08006bcc
 8000698:	080006ad 	.word	0x080006ad
 800069c:	08006bd4 	.word	0x08006bd4
 80006a0:	08000769 	.word	0x08000769
 80006a4:	08006be0 	.word	0x08006be0
 80006a8:	08000831 	.word	0x08000831

080006ac <adc_reading_task>:
  * @brief  ADC Reading Task - Highest Priority
  * @param  parameters: Not used
  * @retval None
  */
static void adc_reading_task(void* parameters)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	@ 0x50
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    uint32_t local_adc_value;
    const uint32_t threshold1 = 1365;  // One-third of max (4095/3)
 80006b4:	f240 5355 	movw	r3, #1365	@ 0x555
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const uint32_t threshold2 = 2730;  // Two-thirds of max (2*4095/3)
 80006ba:	f640 23aa 	movw	r3, #2730	@ 0xaaa
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
    char uart_buffer[50];  // Buffer to hold the UART message

    while (1)
    {
        TaskHandle_t current_task_handle = xTaskGetCurrentTaskHandle();
 80006c0:	f004 fc86 	bl	8004fd0 <xTaskGetCurrentTaskHandle>
 80006c4:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Take mutex with PCP - Temporarily raise to ceiling priority */
        if (xSemaphoreTake(adc_mutex, portMAX_DELAY) == pdTRUE)
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <adc_reading_task+0xa8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f04f 31ff 	mov.w	r1, #4294967295
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 f9d8 	bl	8003a84 <xQueueSemaphoreTake>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d137      	bne.n	800074a <adc_reading_task+0x9e>
        {
            raise_priority_to_ceiling(current_task_handle);  // Elevate priority to ceiling
 80006da:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80006dc:	f000 f91e 	bl	800091c <raise_priority_to_ceiling>


            /* Read ADC */
            HAL_ADC_Start(&hadc1);
 80006e0:	481d      	ldr	r0, [pc, #116]	@ (8000758 <adc_reading_task+0xac>)
 80006e2:	f000 fcf3 	bl	80010cc <HAL_ADC_Start>
            if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 80006e6:	f04f 31ff 	mov.w	r1, #4294967295
 80006ea:	481b      	ldr	r0, [pc, #108]	@ (8000758 <adc_reading_task+0xac>)
 80006ec:	f000 fdd5 	bl	800129a <HAL_ADC_PollForConversion>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d119      	bne.n	800072a <adc_reading_task+0x7e>
            {
                local_adc_value = HAL_ADC_GetValue(&hadc1);
 80006f6:	4818      	ldr	r0, [pc, #96]	@ (8000758 <adc_reading_task+0xac>)
 80006f8:	f000 fe5a 	bl	80013b0 <HAL_ADC_GetValue>
 80006fc:	6438      	str	r0, [r7, #64]	@ 0x40
                shared_adc_value = local_adc_value;
 80006fe:	4a17      	ldr	r2, [pc, #92]	@ (800075c <adc_reading_task+0xb0>)
 8000700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000702:	6013      	str	r3, [r2, #0]

                /* Update LED pattern based on ADC value */
                if (local_adc_value < threshold1) {
 8000704:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000708:	429a      	cmp	r2, r3
 800070a:	d203      	bcs.n	8000714 <adc_reading_task+0x68>
                    led_pattern_selection = 1;  // Slow pattern
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <adc_reading_task+0xb4>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e00a      	b.n	800072a <adc_reading_task+0x7e>
                } else if (local_adc_value < threshold2) {
 8000714:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000718:	429a      	cmp	r2, r3
 800071a:	d203      	bcs.n	8000724 <adc_reading_task+0x78>
                    led_pattern_selection = 2;  // Medium pattern
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <adc_reading_task+0xb4>)
 800071e:	2202      	movs	r2, #2
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e002      	b.n	800072a <adc_reading_task+0x7e>
                } else {
                    led_pattern_selection = 3;  // Fast pattern
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <adc_reading_task+0xb4>)
 8000726:	2203      	movs	r2, #3
 8000728:	701a      	strb	r2, [r3, #0]
                }

            }
            HAL_ADC_Stop(&hadc1);
 800072a:	480b      	ldr	r0, [pc, #44]	@ (8000758 <adc_reading_task+0xac>)
 800072c:	f000 fd82 	bl	8001234 <HAL_ADC_Stop>

            xSemaphoreGive(adc_mutex);  // Release the mutex
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <adc_reading_task+0xa8>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	2300      	movs	r3, #0
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	f002 ffbf 	bl	80036bc <xQueueGenericSend>
            restore_task_priority(current_task_handle, adc_task_original_priority);  // Restore original priority
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <adc_reading_task+0xb8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4619      	mov	r1, r3
 8000744:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000746:	f000 f8f5 	bl	8000934 <restore_task_priority>
        }

        /* ADC reading interval */
        vTaskDelay(pdMS_TO_TICKS(100));
 800074a:	2064      	movs	r0, #100	@ 0x64
 800074c:	f003 fdb2 	bl	80042b4 <vTaskDelay>
    {
 8000750:	e7b6      	b.n	80006c0 <adc_reading_task+0x14>
 8000752:	bf00      	nop
 8000754:	2000010c 	.word	0x2000010c
 8000758:	2000007c 	.word	0x2000007c
 800075c:	20000110 	.word	0x20000110
 8000760:	20000114 	.word	0x20000114
 8000764:	20000118 	.word	0x20000118

08000768 <led_pattern_high_task>:
  * @brief  LED Pattern High Priority Task
  * @param  parameters: Not used
  * @retval None
  */
static void led_pattern_high_task(void* parameters)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b090      	sub	sp, #64	@ 0x40
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    uint8_t local_pattern;
    TaskHandle_t current_task_handle = xTaskGetCurrentTaskHandle();
 8000770:	f004 fc2e 	bl	8004fd0 <xTaskGetCurrentTaskHandle>
 8000774:	63f8      	str	r0, [r7, #60]	@ 0x3c
    char uart_buffer[50];
    while (1)
    {
        /* Take mutex with PCP - Temporarily raise to ceiling priority */
        if (xSemaphoreTake(adc_mutex, portMAX_DELAY) == pdTRUE)
 8000776:	4b29      	ldr	r3, [pc, #164]	@ (800081c <led_pattern_high_task+0xb4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f04f 31ff 	mov.w	r1, #4294967295
 800077e:	4618      	mov	r0, r3
 8000780:	f003 f980 	bl	8003a84 <xQueueSemaphoreTake>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d144      	bne.n	8000814 <led_pattern_high_task+0xac>
        {
            raise_priority_to_ceiling(current_task_handle);  // Elevate priority to ceiling
 800078a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800078c:	f000 f8c6 	bl	800091c <raise_priority_to_ceiling>

            local_pattern = led_pattern_selection;
 8000790:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <led_pattern_high_task+0xb8>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

            xSemaphoreGive(adc_mutex);  // Release the mutex
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <led_pattern_high_task+0xb4>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	2300      	movs	r3, #0
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	f002 ff8b 	bl	80036bc <xQueueGenericSend>
            restore_task_priority(current_task_handle, led_high_task_original_priority);  // Restore original priority
 80007a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <led_pattern_high_task+0xbc>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80007ae:	f000 f8c1 	bl	8000934 <restore_task_priority>

            /* High priority pattern - Quick double blink */
            if (local_pattern == 3)  // Only run when ADC is in highest range
 80007b2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d12c      	bne.n	8000814 <led_pattern_high_task+0xac>
            {
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c0:	4819      	ldr	r0, [pc, #100]	@ (8000828 <led_pattern_high_task+0xc0>)
 80007c2:	f001 fa87 	bl	8001cd4 <HAL_GPIO_WritePin>
                vTaskDelay(pdMS_TO_TICKS(50));
 80007c6:	2032      	movs	r0, #50	@ 0x32
 80007c8:	f003 fd74 	bl	80042b4 <vTaskDelay>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007d2:	4815      	ldr	r0, [pc, #84]	@ (8000828 <led_pattern_high_task+0xc0>)
 80007d4:	f001 fa7e 	bl	8001cd4 <HAL_GPIO_WritePin>
                vTaskDelay(pdMS_TO_TICKS(50));
 80007d8:	2032      	movs	r0, #50	@ 0x32
 80007da:	f003 fd6b 	bl	80042b4 <vTaskDelay>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007e4:	4810      	ldr	r0, [pc, #64]	@ (8000828 <led_pattern_high_task+0xc0>)
 80007e6:	f001 fa75 	bl	8001cd4 <HAL_GPIO_WritePin>
                vTaskDelay(pdMS_TO_TICKS(50));
 80007ea:	2032      	movs	r0, #50	@ 0x32
 80007ec:	f003 fd62 	bl	80042b4 <vTaskDelay>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f6:	480c      	ldr	r0, [pc, #48]	@ (8000828 <led_pattern_high_task+0xc0>)
 80007f8:	f001 fa6c 	bl	8001cd4 <HAL_GPIO_WritePin>
                snprintf(uart_buffer, sizeof(uart_buffer), "High Priority \r\n");
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <led_pattern_high_task+0xc4>)
 8000802:	2132      	movs	r1, #50	@ 0x32
 8000804:	4618      	mov	r0, r3
 8000806:	f005 fd19 	bl	800623c <sniprintf>
                uart_print(uart_buffer);
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f89e 	bl	8000950 <uart_print>
            }
        }

        vTaskDelay(pdMS_TO_TICKS(200));  // Medium delay between patterns
 8000814:	20c8      	movs	r0, #200	@ 0xc8
 8000816:	f003 fd4d 	bl	80042b4 <vTaskDelay>
        if (xSemaphoreTake(adc_mutex, portMAX_DELAY) == pdTRUE)
 800081a:	e7ac      	b.n	8000776 <led_pattern_high_task+0xe>
 800081c:	2000010c 	.word	0x2000010c
 8000820:	20000114 	.word	0x20000114
 8000824:	2000011c 	.word	0x2000011c
 8000828:	40020c00 	.word	0x40020c00
 800082c:	08006bec 	.word	0x08006bec

08000830 <led_pattern_low_task>:
  * @brief  LED Pattern Low Priority Task
  * @param  parameters: Not used
  * @retval None
  */
static void led_pattern_low_task(void* parameters)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b090      	sub	sp, #64	@ 0x40
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    uint8_t local_pattern;
    TaskHandle_t current_task_handle = xTaskGetCurrentTaskHandle();
 8000838:	f004 fbca 	bl	8004fd0 <xTaskGetCurrentTaskHandle>
 800083c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    char uart_buffer[50];
    while (1)
    {

        /* Take mutex with PCP - Temporarily raise to ceiling priority */
        if (xSemaphoreTake(adc_mutex, portMAX_DELAY) == pdTRUE)
 800083e:	4b31      	ldr	r3, [pc, #196]	@ (8000904 <led_pattern_low_task+0xd4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f04f 31ff 	mov.w	r1, #4294967295
 8000846:	4618      	mov	r0, r3
 8000848:	f003 f91c 	bl	8003a84 <xQueueSemaphoreTake>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d153      	bne.n	80008fa <led_pattern_low_task+0xca>
        {
            raise_priority_to_ceiling(current_task_handle);  // Elevate priority to ceiling
 8000852:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000854:	f000 f862 	bl	800091c <raise_priority_to_ceiling>

            local_pattern = led_pattern_selection;
 8000858:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <led_pattern_low_task+0xd8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

            xSemaphoreGive(adc_mutex);  // Release the mutex
 8000860:	4b28      	ldr	r3, [pc, #160]	@ (8000904 <led_pattern_low_task+0xd4>)
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	2300      	movs	r3, #0
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	f002 ff27 	bl	80036bc <xQueueGenericSend>
            restore_task_priority(current_task_handle, led_low_task_original_priority);  // Restore original priority
 800086e:	4b27      	ldr	r3, [pc, #156]	@ (800090c <led_pattern_low_task+0xdc>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000876:	f000 f85d 	bl	8000934 <restore_task_priority>

            /* Low priority patterns */
            switch(local_pattern)
 800087a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800087e:	2b01      	cmp	r3, #1
 8000880:	d002      	beq.n	8000888 <led_pattern_low_task+0x58>
 8000882:	2b02      	cmp	r3, #2
 8000884:	d01d      	beq.n	80008c2 <led_pattern_low_task+0x92>
                    uart_print(uart_buffer);
                    break;

                default:
                    // Do nothing when pattern 3 is active (handled by high priority task)
                    break;
 8000886:	e038      	b.n	80008fa <led_pattern_low_task+0xca>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800088e:	4820      	ldr	r0, [pc, #128]	@ (8000910 <led_pattern_low_task+0xe0>)
 8000890:	f001 fa20 	bl	8001cd4 <HAL_GPIO_WritePin>
                    vTaskDelay(pdMS_TO_TICKS(500));
 8000894:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000898:	f003 fd0c 	bl	80042b4 <vTaskDelay>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008a2:	481b      	ldr	r0, [pc, #108]	@ (8000910 <led_pattern_low_task+0xe0>)
 80008a4:	f001 fa16 	bl	8001cd4 <HAL_GPIO_WritePin>
                    snprintf(uart_buffer, sizeof(uart_buffer), "Low Priority\r\n");
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4a19      	ldr	r2, [pc, #100]	@ (8000914 <led_pattern_low_task+0xe4>)
 80008ae:	2132      	movs	r1, #50	@ 0x32
 80008b0:	4618      	mov	r0, r3
 80008b2:	f005 fcc3 	bl	800623c <sniprintf>
                    uart_print(uart_buffer);
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f848 	bl	8000950 <uart_print>
                    break;
 80008c0:	e01b      	b.n	80008fa <led_pattern_low_task+0xca>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c8:	4811      	ldr	r0, [pc, #68]	@ (8000910 <led_pattern_low_task+0xe0>)
 80008ca:	f001 fa03 	bl	8001cd4 <HAL_GPIO_WritePin>
                    vTaskDelay(pdMS_TO_TICKS(200));
 80008ce:	20c8      	movs	r0, #200	@ 0xc8
 80008d0:	f003 fcf0 	bl	80042b4 <vTaskDelay>
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	480d      	ldr	r0, [pc, #52]	@ (8000910 <led_pattern_low_task+0xe0>)
 80008dc:	f001 f9fa 	bl	8001cd4 <HAL_GPIO_WritePin>
                    snprintf(uart_buffer, sizeof(uart_buffer), "Medium Priority\r\n");
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000918 <led_pattern_low_task+0xe8>)
 80008e6:	2132      	movs	r1, #50	@ 0x32
 80008e8:	4618      	mov	r0, r3
 80008ea:	f005 fca7 	bl	800623c <sniprintf>
                    uart_print(uart_buffer);
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f82c 	bl	8000950 <uart_print>
                    break;
 80008f8:	bf00      	nop
            }
        }

        vTaskDelay(pdMS_TO_TICKS(500));  // Longer delay for low priority task
 80008fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008fe:	f003 fcd9 	bl	80042b4 <vTaskDelay>
        if (xSemaphoreTake(adc_mutex, portMAX_DELAY) == pdTRUE)
 8000902:	e79c      	b.n	800083e <led_pattern_low_task+0xe>
 8000904:	2000010c 	.word	0x2000010c
 8000908:	20000114 	.word	0x20000114
 800090c:	20000120 	.word	0x20000120
 8000910:	40020c00 	.word	0x40020c00
 8000914:	08006c00 	.word	0x08006c00
 8000918:	08006c10 	.word	0x08006c10

0800091c <raise_priority_to_ceiling>:
    }
}

/* Raise task priority to the ceiling */
void raise_priority_to_ceiling(TaskHandle_t task_handle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
    vTaskPrioritySet(task_handle, MUTEX_CEILING_PRIORITY);
 8000924:	2103      	movs	r1, #3
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f003 fcfa 	bl	8004320 <vTaskPrioritySet>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <restore_task_priority>:

/* Restore task priority after mutex release */
void restore_task_priority(TaskHandle_t task_handle, UBaseType_t original_priority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
    vTaskPrioritySet(task_handle, original_priority);
 800093e:	6839      	ldr	r1, [r7, #0]
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f003 fced 	bl	8004320 <vTaskPrioritySet>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <uart_print>:
/* UART printing function */
void uart_print(const char* str)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fc41 	bl	80001e0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	4803      	ldr	r0, [pc, #12]	@ (8000978 <uart_print+0x28>)
 800096a:	f002 f925 	bl	8002bb8 <HAL_UART_Transmit>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000c4 	.word	0x200000c4

0800097c <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b3b      	ldr	r3, [pc, #236]	@ (8000a84 <MX_GPIO_Init+0x108>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a84 <MX_GPIO_Init+0x108>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b38      	ldr	r3, [pc, #224]	@ (8000a84 <MX_GPIO_Init+0x108>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b34      	ldr	r3, [pc, #208]	@ (8000a84 <MX_GPIO_Init+0x108>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a33      	ldr	r2, [pc, #204]	@ (8000a84 <MX_GPIO_Init+0x108>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b31      	ldr	r3, [pc, #196]	@ (8000a84 <MX_GPIO_Init+0x108>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000a84 <MX_GPIO_Init+0x108>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a84 <MX_GPIO_Init+0x108>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b2a      	ldr	r3, [pc, #168]	@ (8000a84 <MX_GPIO_Init+0x108>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

    /* Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ec:	4826      	ldr	r0, [pc, #152]	@ (8000a88 <MX_GPIO_Init+0x10c>)
 80009ee:	f001 f971 	bl	8001cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f8:	4823      	ldr	r0, [pc, #140]	@ (8000a88 <MX_GPIO_Init+0x10c>)
 80009fa:	f001 f96b 	bl	8001cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a04:	4820      	ldr	r0, [pc, #128]	@ (8000a88 <MX_GPIO_Init+0x10c>)
 8000a06:	f001 f965 	bl	8001cd4 <HAL_GPIO_WritePin>

    /* Configure GPIO pin : PD13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <MX_GPIO_Init+0x10c>)
 8000a24:	f000 ffd2 	bl	80019cc <HAL_GPIO_Init>

    /* Configure GPIO pin : PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a2c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4811      	ldr	r0, [pc, #68]	@ (8000a88 <MX_GPIO_Init+0x10c>)
 8000a42:	f000 ffc3 	bl	80019cc <HAL_GPIO_Init>

	/* Configure GPIO pin : PD12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480a      	ldr	r0, [pc, #40]	@ (8000a88 <MX_GPIO_Init+0x10c>)
 8000a60:	f000 ffb4 	bl	80019cc <HAL_GPIO_Init>

    /* Configure GPIO pin : PA0 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a64:	2301      	movs	r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_GPIO_Init+0x110>)
 8000a78:	f000 ffa8 	bl	80019cc <HAL_GPIO_Init>
}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	40020000 	.word	0x40020000

08000a90 <MX_ADC1_Init>:

/* Initialize ADC1 */
static void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]

    /* Enable ADC1 clock */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <MX_ADC1_Init+0xb8>)
 8000aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aac:	4a26      	ldr	r2, [pc, #152]	@ (8000b48 <MX_ADC1_Init+0xb8>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab4:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <MX_ADC1_Init+0xb8>)
 8000ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

    hadc1.Instance = ADC1;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000ac2:	4a23      	ldr	r2, [pc, #140]	@ (8000b50 <MX_ADC1_Init+0xc0>)
 8000ac4:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000ac8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000acc:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = DISABLE;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	615a      	str	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.NbrOfConversion = 1;
 8000af4:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	61da      	str	r2, [r3, #28]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000afc:	4a15      	ldr	r2, [pc, #84]	@ (8000b54 <MX_ADC1_Init+0xc4>)
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0e:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000b10:	f000 fa98 	bl	8001044 <HAL_ADC_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x8e>
    {
        Error_Handler();
 8000b1a:	f000 f87d 	bl	8000c18 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <MX_ADC1_Init+0xbc>)
 8000b32:	f000 fc4b 	bl	80013cc <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0xb0>
    {
        Error_Handler();
 8000b3c:	f000 f86c 	bl	8000c18 <Error_Handler>
    }
}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	2000007c 	.word	0x2000007c
 8000b50:	40012000 	.word	0x40012000
 8000b54:	0f000001 	.word	0x0f000001

08000b58 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b094      	sub	sp, #80	@ 0x50
 8000b5c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	2230      	movs	r2, #48	@ 0x30
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f005 fb9c 	bl	80062a4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b23      	ldr	r3, [pc, #140]	@ (8000c10 <SystemClock_Config+0xb8>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	4a22      	ldr	r2, [pc, #136]	@ (8000c10 <SystemClock_Config+0xb8>)
 8000b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8c:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <SystemClock_Config+0xb8>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <SystemClock_Config+0xbc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c14 <SystemClock_Config+0xbc>)
 8000ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <SystemClock_Config+0xbc>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 f89b 	bl	8001d08 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x84>
    {
        Error_Handler();
 8000bd8:	f000 f81e 	bl	8000c18 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fafe 	bl	80021f8 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xae>
    {
        Error_Handler();
 8000c02:	f000 f809 	bl	8000c18 <Error_Handler>
    }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	@ 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <Error_Handler>:
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
    __disable_irq();
    while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	4a0f      	ldr	r2, [pc, #60]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a24      	ldr	r2, [pc, #144]	@ (8000d24 <HAL_ADC_MspInit+0xb0>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d141      	bne.n	8000d1a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <HAL_ADC_MspInit+0xb4>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	4a22      	ldr	r2, [pc, #136]	@ (8000d28 <HAL_ADC_MspInit+0xb4>)
 8000ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca6:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <HAL_ADC_MspInit+0xb4>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <HAL_ADC_MspInit+0xb4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <HAL_ADC_MspInit+0xb4>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <HAL_ADC_MspInit+0xb4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_ADC_MspInit+0xb4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <HAL_ADC_MspInit+0xb4>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_ADC_MspInit+0xb4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cea:	23c0      	movs	r3, #192	@ 0xc0
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <HAL_ADC_MspInit+0xb8>)
 8000cfe:	f000 fe65 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d02:	2303      	movs	r3, #3
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d06:	2303      	movs	r3, #3
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <HAL_ADC_MspInit+0xbc>)
 8000d16:	f000 fe59 	bl	80019cc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	@ 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40012000 	.word	0x40012000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020400 	.word	0x40020400

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	@ 0x30
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a32      	ldr	r2, [pc, #200]	@ (8000e1c <HAL_UART_MspInit+0xe8>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12d      	bne.n	8000db2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
 8000d5a:	4b31      	ldr	r3, [pc, #196]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a30      	ldr	r2, [pc, #192]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b2e      	ldr	r3, [pc, #184]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a29      	ldr	r2, [pc, #164]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b27      	ldr	r3, [pc, #156]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da0:	2307      	movs	r3, #7
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	481e      	ldr	r0, [pc, #120]	@ (8000e24 <HAL_UART_MspInit+0xf0>)
 8000dac:	f000 fe0e 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db0:	e030      	b.n	8000e14 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <HAL_UART_MspInit+0xf4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d12b      	bne.n	8000e14 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	4a16      	ldr	r2, [pc, #88]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <HAL_UART_MspInit+0xec>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000df4:	230c      	movs	r3, #12
 8000df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e04:	2307      	movs	r3, #7
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <HAL_UART_MspInit+0xf0>)
 8000e10:	f000 fddc 	bl	80019cc <HAL_GPIO_Init>
}
 8000e14:	bf00      	nop
 8000e16:	3730      	adds	r7, #48	@ 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40004400 	.word	0x40004400

08000e2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08e      	sub	sp, #56	@ 0x38
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	4b33      	ldr	r3, [pc, #204]	@ (8000f10 <HAL_InitTick+0xe4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	4a32      	ldr	r2, [pc, #200]	@ (8000f10 <HAL_InitTick+0xe4>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4c:	4b30      	ldr	r3, [pc, #192]	@ (8000f10 <HAL_InitTick+0xe4>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e58:	f107 0210 	add.w	r2, r7, #16
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fba8 	bl	80025b8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d103      	bne.n	8000e7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e72:	f001 fb79 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8000e76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e78:	e004      	b.n	8000e84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e7a:	f001 fb75 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e86:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <HAL_InitTick+0xe8>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	0c9b      	lsrs	r3, r3, #18
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <HAL_InitTick+0xec>)
 8000e94:	4a21      	ldr	r2, [pc, #132]	@ (8000f1c <HAL_InitTick+0xf0>)
 8000e96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <HAL_InitTick+0xec>)
 8000e9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e9e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f18 <HAL_InitTick+0xec>)
 8000ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <HAL_InitTick+0xec>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <HAL_InitTick+0xec>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_InitTick+0xec>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000eb8:	4817      	ldr	r0, [pc, #92]	@ (8000f18 <HAL_InitTick+0xec>)
 8000eba:	f001 fbaf 	bl	800261c <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ec4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d11b      	bne.n	8000f04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ecc:	4812      	ldr	r0, [pc, #72]	@ (8000f18 <HAL_InitTick+0xec>)
 8000ece:	f001 fbff 	bl	80026d0 <HAL_TIM_Base_Start_IT>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ed8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d111      	bne.n	8000f04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ee0:	2032      	movs	r0, #50	@ 0x32
 8000ee2:	f000 fd65 	bl	80019b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d808      	bhi.n	8000efe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	2032      	movs	r0, #50	@ 0x32
 8000ef2:	f000 fd41 	bl	8001978 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_InitTick+0xf4>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e002      	b.n	8000f04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3738      	adds	r7, #56	@ 0x38
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	20000124 	.word	0x20000124
 8000f1c:	40000c00 	.word	0x40000c00
 8000f20:	20000004 	.word	0x20000004

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <NMI_Handler+0x4>

08000f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <TIM5_IRQHandler+0x10>)
 8000f62:	f001 fc17 	bl	8002794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000124 	.word	0x20000124

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f98:	f7ff ffea 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f005 f977 	bl	80062b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fb05 	bl	80005d4 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fd8:	08006c98 	.word	0x08006c98
  ldr r2, =_sbss
 8000fdc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fe0:	2000fc60 	.word	0x2000fc60

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 fca6 	bl	8001962 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f7ff ff08 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fe02 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000016c 	.word	0x2000016c

08001044 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e033      	b.n	80010c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	2b00      	cmp	r3, #0
 8001060:	d109      	bne.n	8001076 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fe06 	bl	8000c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800108a:	f023 0302 	bic.w	r3, r3, #2
 800108e:	f043 0202 	orr.w	r2, r3, #2
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 faba 	bl	8001610 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	f023 0303 	bic.w	r3, r3, #3
 80010aa:	f043 0201 	orr.w	r2, r3, #1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80010b2:	e001      	b.n	80010b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Start+0x1a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e097      	b.n	8001216 <HAL_ADC_Start+0x14a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d018      	beq.n	800112e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800110c:	4b45      	ldr	r3, [pc, #276]	@ (8001224 <HAL_ADC_Start+0x158>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a45      	ldr	r2, [pc, #276]	@ (8001228 <HAL_ADC_Start+0x15c>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	0c9a      	lsrs	r2, r3, #18
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001120:	e002      	b.n	8001128 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3b01      	subs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d15f      	bne.n	80011fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001166:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800117a:	d106      	bne.n	800118a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001180:	f023 0206 	bic.w	r2, r3, #6
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	645a      	str	r2, [r3, #68]	@ 0x44
 8001188:	e002      	b.n	8001190 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <HAL_ADC_Start+0x160>)
 800119a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80011a4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10f      	bne.n	80011d2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d129      	bne.n	8001214 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	e020      	b.n	8001214 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a16      	ldr	r2, [pc, #88]	@ (8001230 <HAL_ADC_Start+0x164>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d11b      	bne.n	8001214 <HAL_ADC_Start+0x148>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d114      	bne.n	8001214 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e00b      	b.n	8001214 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	f043 0210 	orr.w	r2, r3, #16
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120c:	f043 0201 	orr.w	r2, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000000 	.word	0x20000000
 8001228:	431bde83 	.word	0x431bde83
 800122c:	40012300 	.word	0x40012300
 8001230:	40012000 	.word	0x40012000

08001234 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_ADC_Stop+0x16>
 8001246:	2302      	movs	r3, #2
 8001248:	e021      	b.n	800128e <HAL_ADC_Stop+0x5a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	f043 0201 	orr.w	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012b6:	d113      	bne.n	80012e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012c6:	d10b      	bne.n	80012e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	f043 0220 	orr.w	r2, r3, #32
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e063      	b.n	80013a8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e0:	f7ff fea4 	bl	800102c <HAL_GetTick>
 80012e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012e6:	e021      	b.n	800132c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ee:	d01d      	beq.n	800132c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <HAL_ADC_PollForConversion+0x6c>
 80012f6:	f7ff fe99 	bl	800102c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d212      	bcs.n	800132c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b02      	cmp	r3, #2
 8001312:	d00b      	beq.n	800132c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f043 0204 	orr.w	r2, r3, #4
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e03d      	b.n	80013a8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d1d6      	bne.n	80012e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f06f 0212 	mvn.w	r2, #18
 8001342:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d123      	bne.n	80013a6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001362:	2b00      	cmp	r3, #0
 8001364:	d11f      	bne.n	80013a6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800137e:	2b00      	cmp	r3, #0
 8001380:	d111      	bne.n	80013a6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x1c>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e105      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x228>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	d925      	bls.n	8001444 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68d9      	ldr	r1, [r3, #12]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	3b1e      	subs	r3, #30
 800140e:	2207      	movs	r2, #7
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43da      	mvns	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	400a      	ands	r2, r1
 800141c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68d9      	ldr	r1, [r3, #12]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	4603      	mov	r3, r0
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4403      	add	r3, r0
 8001436:	3b1e      	subs	r3, #30
 8001438:	409a      	lsls	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	e022      	b.n	800148a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6919      	ldr	r1, [r3, #16]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	2207      	movs	r2, #7
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	400a      	ands	r2, r1
 8001466:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6919      	ldr	r1, [r3, #16]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	4603      	mov	r3, r0
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4403      	add	r3, r0
 8001480:	409a      	lsls	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b06      	cmp	r3, #6
 8001490:	d824      	bhi.n	80014dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3b05      	subs	r3, #5
 80014a4:	221f      	movs	r2, #31
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	400a      	ands	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	3b05      	subs	r3, #5
 80014ce:	fa00 f203 	lsl.w	r2, r0, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80014da:	e04c      	b.n	8001576 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d824      	bhi.n	800152e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b23      	subs	r3, #35	@ 0x23
 80014f6:	221f      	movs	r2, #31
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43da      	mvns	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	400a      	ands	r2, r1
 8001504:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	3b23      	subs	r3, #35	@ 0x23
 8001520:	fa00 f203 	lsl.w	r2, r0, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	631a      	str	r2, [r3, #48]	@ 0x30
 800152c:	e023      	b.n	8001576 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b41      	subs	r3, #65	@ 0x41
 8001540:	221f      	movs	r2, #31
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	400a      	ands	r2, r1
 800154e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	3b41      	subs	r3, #65	@ 0x41
 800156a:	fa00 f203 	lsl.w	r2, r0, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001576:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <HAL_ADC_ConfigChannel+0x234>)
 8001578:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a21      	ldr	r2, [pc, #132]	@ (8001604 <HAL_ADC_ConfigChannel+0x238>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d109      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1cc>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b12      	cmp	r3, #18
 800158a:	d105      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <HAL_ADC_ConfigChannel+0x238>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d123      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x21e>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d003      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x1e6>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b11      	cmp	r3, #17
 80015b0:	d11b      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_ADC_ConfigChannel+0x23c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a10      	ldr	r2, [pc, #64]	@ (800160c <HAL_ADC_ConfigChannel+0x240>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0c9a      	lsrs	r2, r3, #18
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40012300 	.word	0x40012300
 8001604:	40012000 	.word	0x40012000
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83

08001610 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001618:	4b79      	ldr	r3, [pc, #484]	@ (8001800 <ADC_Init+0x1f0>)
 800161a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	431a      	orrs	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	021a      	lsls	r2, r3, #8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800168a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a2:	4a58      	ldr	r2, [pc, #352]	@ (8001804 <ADC_Init+0x1f4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d022      	beq.n	80016ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6899      	ldr	r1, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6899      	ldr	r1, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	e00f      	b.n	800170e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800170c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0202 	bic.w	r2, r2, #2
 800171c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7e1b      	ldrb	r3, [r3, #24]
 8001728:	005a      	lsls	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01b      	beq.n	8001774 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800174a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800175a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6859      	ldr	r1, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001766:	3b01      	subs	r3, #1
 8001768:	035a      	lsls	r2, r3, #13
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	e007      	b.n	8001784 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001782:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	3b01      	subs	r3, #1
 80017a0:	051a      	lsls	r2, r3, #20
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6899      	ldr	r1, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017c6:	025a      	lsls	r2, r3, #9
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6899      	ldr	r1, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	029a      	lsls	r2, r3, #10
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	609a      	str	r2, [r3, #8]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40012300 	.word	0x40012300
 8001804:	0f000001 	.word	0x0f000001

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	@ (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	@ (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	@ (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	@ 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff4c 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198a:	f7ff ff61 	bl	8001850 <__NVIC_GetPriorityGrouping>
 800198e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	6978      	ldr	r0, [r7, #20]
 8001996:	f7ff ffb1 	bl	80018fc <NVIC_EncodePriority>
 800199a:	4602      	mov	r2, r0
 800199c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff80 	bl	80018a8 <__NVIC_SetPriority>
}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff54 	bl	800186c <__NVIC_EnableIRQ>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	@ 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e159      	b.n	8001c9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 8148 	bne.w	8001c96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d005      	beq.n	8001a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d130      	bne.n	8001a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 0201 	and.w	r2, r3, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d017      	beq.n	8001abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80a2 	beq.w	8001c96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b57      	ldr	r3, [pc, #348]	@ (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a56      	ldr	r2, [pc, #344]	@ (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b54      	ldr	r3, [pc, #336]	@ (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6e:	4a52      	ldr	r2, [pc, #328]	@ (8001cb8 <HAL_GPIO_Init+0x2ec>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a49      	ldr	r2, [pc, #292]	@ (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x202>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a48      	ldr	r2, [pc, #288]	@ (8001cc0 <HAL_GPIO_Init+0x2f4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x1fe>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a47      	ldr	r2, [pc, #284]	@ (8001cc4 <HAL_GPIO_Init+0x2f8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x1fa>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a46      	ldr	r2, [pc, #280]	@ (8001cc8 <HAL_GPIO_Init+0x2fc>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x1f6>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a45      	ldr	r2, [pc, #276]	@ (8001ccc <HAL_GPIO_Init+0x300>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x1f2>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e008      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e004      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f002 0203 	and.w	r2, r2, #3
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be0:	4935      	ldr	r1, [pc, #212]	@ (8001cb8 <HAL_GPIO_Init+0x2ec>)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bee:	4b38      	ldr	r3, [pc, #224]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c12:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c3c:	4a24      	ldr	r2, [pc, #144]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c42:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c66:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c90:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	f67f aea2 	bls.w	80019e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e267      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d075      	beq.n	8001e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d26:	4b88      	ldr	r3, [pc, #544]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d00c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b85      	ldr	r3, [pc, #532]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d112      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4b82      	ldr	r3, [pc, #520]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d05b      	beq.n	8001e10 <HAL_RCC_OscConfig+0x108>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d157      	bne.n	8001e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e242      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_OscConfig+0x74>
 8001d6e:	4b76      	ldr	r3, [pc, #472]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a75      	ldr	r2, [pc, #468]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x98>
 8001d86:	4b70      	ldr	r3, [pc, #448]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b6d      	ldr	r3, [pc, #436]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6c      	ldr	r2, [pc, #432]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001da0:	4b69      	ldr	r3, [pc, #420]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a68      	ldr	r2, [pc, #416]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b66      	ldr	r3, [pc, #408]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a65      	ldr	r2, [pc, #404]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f934 	bl	800102c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f930 	bl	800102c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	@ 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e207      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b5b      	ldr	r3, [pc, #364]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xc0>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff f920 	bl	800102c <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f91c 	bl	800102c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1f3      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b51      	ldr	r3, [pc, #324]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0xe8>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b47      	ldr	r3, [pc, #284]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b44      	ldr	r3, [pc, #272]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b41      	ldr	r3, [pc, #260]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1c7      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4937      	ldr	r1, [pc, #220]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_RCC_OscConfig+0x244>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f8d5 	bl	800102c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff f8d1 	bl	800102c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1a8      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4925      	ldr	r1, [pc, #148]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <HAL_RCC_OscConfig+0x244>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f8b4 	bl	800102c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f8b0 	bl	800102c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e187      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d036      	beq.n	8001f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_RCC_OscConfig+0x248>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff f894 	bl	800102c <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff f890 	bl	800102c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e167      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x200>
 8001f26:	e01b      	b.n	8001f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f28:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_OscConfig+0x248>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f87d 	bl	800102c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	e00e      	b.n	8001f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff f879 	bl	800102c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d907      	bls.n	8001f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e150      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470000 	.word	0x42470000
 8001f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b88      	ldr	r3, [pc, #544]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ea      	bne.n	8001f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8097 	beq.w	800209c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b81      	ldr	r3, [pc, #516]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b7d      	ldr	r3, [pc, #500]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a7c      	ldr	r2, [pc, #496]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b77      	ldr	r3, [pc, #476]	@ (800217c <HAL_RCC_OscConfig+0x474>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b74      	ldr	r3, [pc, #464]	@ (800217c <HAL_RCC_OscConfig+0x474>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a73      	ldr	r2, [pc, #460]	@ (800217c <HAL_RCC_OscConfig+0x474>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f839 	bl	800102c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7ff f835 	bl	800102c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e10c      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800217c <HAL_RCC_OscConfig+0x474>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2ea>
 8001fe4:	4b64      	ldr	r3, [pc, #400]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a63      	ldr	r2, [pc, #396]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x324>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x30c>
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffe:	4a5e      	ldr	r2, [pc, #376]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6713      	str	r3, [r2, #112]	@ 0x70
 8002006:	4b5c      	ldr	r3, [pc, #368]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200a:	4a5b      	ldr	r2, [pc, #364]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	@ 0x70
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0x324>
 8002014:	4b58      	ldr	r3, [pc, #352]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002018:	4a57      	ldr	r2, [pc, #348]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002020:	4b55      	ldr	r3, [pc, #340]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a54      	ldr	r2, [pc, #336]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002026:	f023 0304 	bic.w	r3, r3, #4
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d015      	beq.n	8002060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7fe fffa 	bl	800102c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe fff6 	bl	800102c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0cb      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	4b49      	ldr	r3, [pc, #292]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ee      	beq.n	800203c <HAL_RCC_OscConfig+0x334>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7fe ffe4 	bl	800102c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7fe ffe0 	bl	800102c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0b5      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ee      	bne.n	8002068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b39      	ldr	r3, [pc, #228]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	4a38      	ldr	r2, [pc, #224]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800209a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a1 	beq.w	80021e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a6:	4b34      	ldr	r3, [pc, #208]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d05c      	beq.n	800216c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d141      	bne.n	800213e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_RCC_OscConfig+0x478>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe ffb4 	bl	800102c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe ffb0 	bl	800102c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e087      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	019b      	lsls	r3, r3, #6
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	491b      	ldr	r1, [pc, #108]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002110:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x478>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe ff89 	bl	800102c <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7fe ff85 	bl	800102c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e05c      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x416>
 800213c:	e054      	b.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <HAL_RCC_OscConfig+0x478>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe ff72 	bl	800102c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe ff6e 	bl	800102c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e045      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_RCC_OscConfig+0x470>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x444>
 800216a:	e03d      	b.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d107      	bne.n	8002184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e038      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
 8002180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002184:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <HAL_RCC_OscConfig+0x4ec>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d028      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d121      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11a      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021bc:	4293      	cmp	r3, r2
 80021be:	d111      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	3b01      	subs	r3, #1
 80021ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0cc      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b68      	ldr	r3, [pc, #416]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d90c      	bls.n	8002234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b65      	ldr	r3, [pc, #404]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a58      	ldr	r2, [pc, #352]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a52      	ldr	r2, [pc, #328]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800226e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d044      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d119      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b3f      	ldr	r3, [pc, #252]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3b      	ldr	r3, [pc, #236]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e067      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b37      	ldr	r3, [pc, #220]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4934      	ldr	r1, [pc, #208]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fea0 	bl	800102c <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7fe fe9c 	bl	800102c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d20c      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f821 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	490a      	ldr	r1, [pc, #40]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	5ccb      	ldrb	r3, [r1, r3]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	@ (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fd44 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	08006c3c 	.word	0x08006c3c
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c8:	b090      	sub	sp, #64	@ 0x40
 80023ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80023d0:	2300      	movs	r3, #0
 80023d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023d4:	2300      	movs	r3, #0
 80023d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023dc:	4b59      	ldr	r3, [pc, #356]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d00d      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x40>
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	f200 80a1 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x16c>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x34>
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x3a>
 80023f6:	e09b      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b53      	ldr	r3, [pc, #332]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x184>)
 80023fa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80023fc:	e09b      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023fe:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_RCC_GetSysClockFreq+0x188>)
 8002400:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002402:	e098      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002404:	4b4f      	ldr	r3, [pc, #316]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800240e:	4b4d      	ldr	r3, [pc, #308]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d028      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241a:	4b4a      	ldr	r3, [pc, #296]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	2200      	movs	r2, #0
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	627a      	str	r2, [r7, #36]	@ 0x24
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800242c:	2100      	movs	r1, #0
 800242e:	4b47      	ldr	r3, [pc, #284]	@ (800254c <HAL_RCC_GetSysClockFreq+0x188>)
 8002430:	fb03 f201 	mul.w	r2, r3, r1
 8002434:	2300      	movs	r3, #0
 8002436:	fb00 f303 	mul.w	r3, r0, r3
 800243a:	4413      	add	r3, r2
 800243c:	4a43      	ldr	r2, [pc, #268]	@ (800254c <HAL_RCC_GetSysClockFreq+0x188>)
 800243e:	fba0 1202 	umull	r1, r2, r0, r2
 8002442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002444:	460a      	mov	r2, r1
 8002446:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800244a:	4413      	add	r3, r2
 800244c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800244e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002450:	2200      	movs	r2, #0
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	61fa      	str	r2, [r7, #28]
 8002456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800245a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800245e:	f7fd ff17 	bl	8000290 <__aeabi_uldivmod>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4613      	mov	r3, r2
 8002468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800246a:	e053      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246c:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	2200      	movs	r2, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	617a      	str	r2, [r7, #20]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800247e:	f04f 0b00 	mov.w	fp, #0
 8002482:	4652      	mov	r2, sl
 8002484:	465b      	mov	r3, fp
 8002486:	f04f 0000 	mov.w	r0, #0
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	0159      	lsls	r1, r3, #5
 8002490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002494:	0150      	lsls	r0, r2, #5
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	ebb2 080a 	subs.w	r8, r2, sl
 800249e:	eb63 090b 	sbc.w	r9, r3, fp
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024b6:	ebb2 0408 	subs.w	r4, r2, r8
 80024ba:	eb63 0509 	sbc.w	r5, r3, r9
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	00eb      	lsls	r3, r5, #3
 80024c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024cc:	00e2      	lsls	r2, r4, #3
 80024ce:	4614      	mov	r4, r2
 80024d0:	461d      	mov	r5, r3
 80024d2:	eb14 030a 	adds.w	r3, r4, sl
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	eb45 030b 	adc.w	r3, r5, fp
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ea:	4629      	mov	r1, r5
 80024ec:	028b      	lsls	r3, r1, #10
 80024ee:	4621      	mov	r1, r4
 80024f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f4:	4621      	mov	r1, r4
 80024f6:	028a      	lsls	r2, r1, #10
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fe:	2200      	movs	r2, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	60fa      	str	r2, [r7, #12]
 8002504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002508:	f7fd fec2 	bl	8000290 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x180>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002524:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800252e:	e002      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x184>)
 8002532:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002538:	4618      	mov	r0, r3
 800253a:	3740      	adds	r7, #64	@ 0x40
 800253c:	46bd      	mov	sp, r7
 800253e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	017d7840 	.word	0x017d7840

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_RCC_GetHCLKFreq+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800256c:	f7ff fff0 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	@ (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	08006c4c 	.word	0x08006c4c

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffdc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0b5b      	lsrs	r3, r3, #13
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	@ (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	08006c4c 	.word	0x08006c4c

080025b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	220f      	movs	r2, #15
 80025c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025c8:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <HAL_RCC_GetClockConfig+0x5c>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0203 	and.w	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <HAL_RCC_GetClockConfig+0x5c>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <HAL_RCC_GetClockConfig+0x5c>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025ec:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_RCC_GetClockConfig+0x5c>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <HAL_RCC_GetClockConfig+0x60>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0207 	and.w	r2, r3, #7
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	601a      	str	r2, [r3, #0]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	40023c00 	.word	0x40023c00

0800261c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e041      	b.n	80026b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f839 	bl	80026ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3304      	adds	r3, #4
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f000 f9bc 	bl	80029d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e044      	b.n	8002772 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1e      	ldr	r2, [pc, #120]	@ (8002780 <HAL_TIM_Base_Start_IT+0xb0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d018      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x6c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002712:	d013      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x6c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1a      	ldr	r2, [pc, #104]	@ (8002784 <HAL_TIM_Base_Start_IT+0xb4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00e      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x6c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a19      	ldr	r2, [pc, #100]	@ (8002788 <HAL_TIM_Base_Start_IT+0xb8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x6c>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a17      	ldr	r2, [pc, #92]	@ (800278c <HAL_TIM_Base_Start_IT+0xbc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x6c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a16      	ldr	r2, [pc, #88]	@ (8002790 <HAL_TIM_Base_Start_IT+0xc0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d111      	bne.n	8002760 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b06      	cmp	r3, #6
 800274c:	d010      	beq.n	8002770 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	e007      	b.n	8002770 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40010000 	.word	0x40010000
 8002784:	40000400 	.word	0x40000400
 8002788:	40000800 	.word	0x40000800
 800278c:	40000c00 	.word	0x40000c00
 8002790:	40014000 	.word	0x40014000

08002794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d020      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0202 	mvn.w	r2, #2
 80027c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f8dc 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8ce 	bl	8002988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f8df 	bl	80029b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d020      	beq.n	8002844 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0204 	mvn.w	r2, #4
 8002814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8b6 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8a8 	bl	8002988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8b9 	bl	80029b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d020      	beq.n	8002890 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01b      	beq.n	8002890 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0208 	mvn.w	r2, #8
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2204      	movs	r2, #4
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f890 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f882 	bl	8002988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f893 	bl	80029b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	d020      	beq.n	80028dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01b      	beq.n	80028dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0210 	mvn.w	r2, #16
 80028ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2208      	movs	r2, #8
 80028b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f86a 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f85c 	bl	8002988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f86d 	bl	80029b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0201 	mvn.w	r2, #1
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f83a 	bl	8002974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8f0 	bl	8002b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f83e 	bl	80029c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00c      	beq.n	800296c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0220 	mvn.w	r2, #32
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8c2 	bl	8002af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a3a      	ldr	r2, [pc, #232]	@ (8002ad4 <TIM_Base_SetConfig+0xfc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00f      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f6:	d00b      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a37      	ldr	r2, [pc, #220]	@ (8002ad8 <TIM_Base_SetConfig+0x100>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a36      	ldr	r2, [pc, #216]	@ (8002adc <TIM_Base_SetConfig+0x104>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a35      	ldr	r2, [pc, #212]	@ (8002ae0 <TIM_Base_SetConfig+0x108>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d108      	bne.n	8002a22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a2b      	ldr	r2, [pc, #172]	@ (8002ad4 <TIM_Base_SetConfig+0xfc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01b      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a30:	d017      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a28      	ldr	r2, [pc, #160]	@ (8002ad8 <TIM_Base_SetConfig+0x100>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a27      	ldr	r2, [pc, #156]	@ (8002adc <TIM_Base_SetConfig+0x104>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00f      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a26      	ldr	r2, [pc, #152]	@ (8002ae0 <TIM_Base_SetConfig+0x108>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00b      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a25      	ldr	r2, [pc, #148]	@ (8002ae4 <TIM_Base_SetConfig+0x10c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a24      	ldr	r2, [pc, #144]	@ (8002ae8 <TIM_Base_SetConfig+0x110>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d003      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <TIM_Base_SetConfig+0x114>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad4 <TIM_Base_SetConfig+0xfc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d103      	bne.n	8002aa8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	611a      	str	r2, [r3, #16]
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40014000 	.word	0x40014000
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40014800 	.word	0x40014800

08002af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e042      	b.n	8002bb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe f8f8 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2224      	movs	r2, #36	@ 0x24
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f973 	bl	8002e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d175      	bne.n	8002cc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_UART_Transmit+0x2c>
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e06e      	b.n	8002cc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2221      	movs	r2, #33	@ 0x21
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bf6:	f7fe fa19 	bl	800102c <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	88fa      	ldrh	r2, [r7, #6]
 8002c06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c10:	d108      	bne.n	8002c24 <HAL_UART_Transmit+0x6c>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d104      	bne.n	8002c24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	e003      	b.n	8002c2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c2c:	e02e      	b.n	8002c8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	2180      	movs	r1, #128	@ 0x80
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f848 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e03a      	b.n	8002cc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	3302      	adds	r3, #2
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	e007      	b.n	8002c7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1cb      	bne.n	8002c2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2140      	movs	r1, #64	@ 0x40
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f814 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e006      	b.n	8002cc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cde:	e03b      	b.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d037      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce8:	f7fe f9a0 	bl	800102c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	6a3a      	ldr	r2, [r7, #32]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d302      	bcc.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e03a      	b.n	8002d78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d023      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b80      	cmp	r3, #128	@ 0x80
 8002d14:	d020      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d01d      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d116      	bne.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f81d 	bl	8002d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2208      	movs	r2, #8
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e00f      	b.n	8002d78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d0b4      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b095      	sub	sp, #84	@ 0x54
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d119      	bne.n	8002e2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 0310 	bic.w	r3, r3, #16
 8002e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e18:	61ba      	str	r2, [r7, #24]
 8002e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6979      	ldr	r1, [r7, #20]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	613b      	str	r3, [r7, #16]
   return(result);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e3a:	bf00      	nop
 8002e3c:	3754      	adds	r7, #84	@ 0x54
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e4c:	b0c0      	sub	sp, #256	@ 0x100
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e64:	68d9      	ldr	r1, [r3, #12]
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	ea40 0301 	orr.w	r3, r0, r1
 8002e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ea0:	f021 010c 	bic.w	r1, r1, #12
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec2:	6999      	ldr	r1, [r3, #24]
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	ea40 0301 	orr.w	r3, r0, r1
 8002ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8003114 <UART_SetConfig+0x2cc>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d005      	beq.n	8002ee8 <UART_SetConfig+0xa0>
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8003118 <UART_SetConfig+0x2d0>)
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d104      	bne.n	8002ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee8:	f7ff fb52 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002eec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ef0:	e003      	b.n	8002efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef2:	f7ff fb39 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8002ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f04:	f040 810c 	bne.w	8003120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	1891      	adds	r1, r2, r2
 8002f20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f22:	415b      	adcs	r3, r3
 8002f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	eb12 0801 	adds.w	r8, r2, r1
 8002f30:	4629      	mov	r1, r5
 8002f32:	eb43 0901 	adc.w	r9, r3, r1
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4a:	4690      	mov	r8, r2
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	eb18 0303 	adds.w	r3, r8, r3
 8002f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f58:	462b      	mov	r3, r5
 8002f5a:	eb49 0303 	adc.w	r3, r9, r3
 8002f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f76:	460b      	mov	r3, r1
 8002f78:	18db      	adds	r3, r3, r3
 8002f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	eb42 0303 	adc.w	r3, r2, r3
 8002f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f8c:	f7fd f980 	bl	8000290 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4b61      	ldr	r3, [pc, #388]	@ (800311c <UART_SetConfig+0x2d4>)
 8002f96:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	011c      	lsls	r4, r3, #4
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	1891      	adds	r1, r2, r2
 8002fb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe0:	4692      	mov	sl, r2
 8002fe2:	469b      	mov	fp, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8002fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003004:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800300c:	460b      	mov	r3, r1
 800300e:	18db      	adds	r3, r3, r3
 8003010:	643b      	str	r3, [r7, #64]	@ 0x40
 8003012:	4613      	mov	r3, r2
 8003014:	eb42 0303 	adc.w	r3, r2, r3
 8003018:	647b      	str	r3, [r7, #68]	@ 0x44
 800301a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800301e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003022:	f7fd f935 	bl	8000290 <__aeabi_uldivmod>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4611      	mov	r1, r2
 800302c:	4b3b      	ldr	r3, [pc, #236]	@ (800311c <UART_SetConfig+0x2d4>)
 800302e:	fba3 2301 	umull	r2, r3, r3, r1
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2264      	movs	r2, #100	@ 0x64
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	1acb      	subs	r3, r1, r3
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003042:	4b36      	ldr	r3, [pc, #216]	@ (800311c <UART_SetConfig+0x2d4>)
 8003044:	fba3 2302 	umull	r2, r3, r3, r2
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003050:	441c      	add	r4, r3
 8003052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800305c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003064:	4642      	mov	r2, r8
 8003066:	464b      	mov	r3, r9
 8003068:	1891      	adds	r1, r2, r2
 800306a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800306c:	415b      	adcs	r3, r3
 800306e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003074:	4641      	mov	r1, r8
 8003076:	1851      	adds	r1, r2, r1
 8003078:	6339      	str	r1, [r7, #48]	@ 0x30
 800307a:	4649      	mov	r1, r9
 800307c:	414b      	adcs	r3, r1
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800308c:	4659      	mov	r1, fp
 800308e:	00cb      	lsls	r3, r1, #3
 8003090:	4651      	mov	r1, sl
 8003092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003096:	4651      	mov	r1, sl
 8003098:	00ca      	lsls	r2, r1, #3
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	4603      	mov	r3, r0
 80030a0:	4642      	mov	r2, r8
 80030a2:	189b      	adds	r3, r3, r2
 80030a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030a8:	464b      	mov	r3, r9
 80030aa:	460a      	mov	r2, r1
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030c8:	460b      	mov	r3, r1
 80030ca:	18db      	adds	r3, r3, r3
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ce:	4613      	mov	r3, r2
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030de:	f7fd f8d7 	bl	8000290 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <UART_SetConfig+0x2d4>)
 80030e8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	2164      	movs	r1, #100	@ 0x64
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	3332      	adds	r3, #50	@ 0x32
 80030fa:	4a08      	ldr	r2, [pc, #32]	@ (800311c <UART_SetConfig+0x2d4>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	f003 0207 	and.w	r2, r3, #7
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4422      	add	r2, r4
 800310e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003110:	e106      	b.n	8003320 <UART_SetConfig+0x4d8>
 8003112:	bf00      	nop
 8003114:	40011000 	.word	0x40011000
 8003118:	40011400 	.word	0x40011400
 800311c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003124:	2200      	movs	r2, #0
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800312a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800312e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003132:	4642      	mov	r2, r8
 8003134:	464b      	mov	r3, r9
 8003136:	1891      	adds	r1, r2, r2
 8003138:	6239      	str	r1, [r7, #32]
 800313a:	415b      	adcs	r3, r3
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
 800313e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003142:	4641      	mov	r1, r8
 8003144:	1854      	adds	r4, r2, r1
 8003146:	4649      	mov	r1, r9
 8003148:	eb43 0501 	adc.w	r5, r3, r1
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	00eb      	lsls	r3, r5, #3
 8003156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315a:	00e2      	lsls	r2, r4, #3
 800315c:	4614      	mov	r4, r2
 800315e:	461d      	mov	r5, r3
 8003160:	4643      	mov	r3, r8
 8003162:	18e3      	adds	r3, r4, r3
 8003164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003168:	464b      	mov	r3, r9
 800316a:	eb45 0303 	adc.w	r3, r5, r3
 800316e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800317e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800318e:	4629      	mov	r1, r5
 8003190:	008b      	lsls	r3, r1, #2
 8003192:	4621      	mov	r1, r4
 8003194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003198:	4621      	mov	r1, r4
 800319a:	008a      	lsls	r2, r1, #2
 800319c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031a0:	f7fd f876 	bl	8000290 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4b60      	ldr	r3, [pc, #384]	@ (800332c <UART_SetConfig+0x4e4>)
 80031aa:	fba3 2302 	umull	r2, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	011c      	lsls	r4, r3, #4
 80031b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	1891      	adds	r1, r2, r2
 80031ca:	61b9      	str	r1, [r7, #24]
 80031cc:	415b      	adcs	r3, r3
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d4:	4641      	mov	r1, r8
 80031d6:	1851      	adds	r1, r2, r1
 80031d8:	6139      	str	r1, [r7, #16]
 80031da:	4649      	mov	r1, r9
 80031dc:	414b      	adcs	r3, r1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031ec:	4659      	mov	r1, fp
 80031ee:	00cb      	lsls	r3, r1, #3
 80031f0:	4651      	mov	r1, sl
 80031f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f6:	4651      	mov	r1, sl
 80031f8:	00ca      	lsls	r2, r1, #3
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	4642      	mov	r2, r8
 8003202:	189b      	adds	r3, r3, r2
 8003204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003208:	464b      	mov	r3, r9
 800320a:	460a      	mov	r2, r1
 800320c:	eb42 0303 	adc.w	r3, r2, r3
 8003210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800321e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800322c:	4649      	mov	r1, r9
 800322e:	008b      	lsls	r3, r1, #2
 8003230:	4641      	mov	r1, r8
 8003232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003236:	4641      	mov	r1, r8
 8003238:	008a      	lsls	r2, r1, #2
 800323a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800323e:	f7fd f827 	bl	8000290 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4611      	mov	r1, r2
 8003248:	4b38      	ldr	r3, [pc, #224]	@ (800332c <UART_SetConfig+0x4e4>)
 800324a:	fba3 2301 	umull	r2, r3, r3, r1
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2264      	movs	r2, #100	@ 0x64
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	1acb      	subs	r3, r1, r3
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	3332      	adds	r3, #50	@ 0x32
 800325c:	4a33      	ldr	r2, [pc, #204]	@ (800332c <UART_SetConfig+0x4e4>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003268:	441c      	add	r4, r3
 800326a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800326e:	2200      	movs	r2, #0
 8003270:	673b      	str	r3, [r7, #112]	@ 0x70
 8003272:	677a      	str	r2, [r7, #116]	@ 0x74
 8003274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	1891      	adds	r1, r2, r2
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	415b      	adcs	r3, r3
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003288:	4641      	mov	r1, r8
 800328a:	1851      	adds	r1, r2, r1
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	4649      	mov	r1, r9
 8003290:	414b      	adcs	r3, r1
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032a0:	4659      	mov	r1, fp
 80032a2:	00cb      	lsls	r3, r1, #3
 80032a4:	4651      	mov	r1, sl
 80032a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032aa:	4651      	mov	r1, sl
 80032ac:	00ca      	lsls	r2, r1, #3
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	4642      	mov	r2, r8
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ba:	464b      	mov	r3, r9
 80032bc:	460a      	mov	r2, r1
 80032be:	eb42 0303 	adc.w	r3, r2, r3
 80032c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032dc:	4649      	mov	r1, r9
 80032de:	008b      	lsls	r3, r1, #2
 80032e0:	4641      	mov	r1, r8
 80032e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e6:	4641      	mov	r1, r8
 80032e8:	008a      	lsls	r2, r1, #2
 80032ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032ee:	f7fc ffcf 	bl	8000290 <__aeabi_uldivmod>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <UART_SetConfig+0x4e4>)
 80032f8:	fba3 1302 	umull	r1, r3, r3, r2
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	2164      	movs	r1, #100	@ 0x64
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	3332      	adds	r3, #50	@ 0x32
 800330a:	4a08      	ldr	r2, [pc, #32]	@ (800332c <UART_SetConfig+0x4e4>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4422      	add	r2, r4
 800331e:	609a      	str	r2, [r3, #8]
}
 8003320:	bf00      	nop
 8003322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003326:	46bd      	mov	sp, r7
 8003328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f103 0208 	add.w	r2, r3, #8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f103 0208 	add.w	r2, r3, #8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f103 0208 	add.w	r2, r3, #8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d103      	bne.n	80033aa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e00c      	b.n	80033c4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3308      	adds	r3, #8
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e002      	b.n	80033b8 <vListInsert+0x2e>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d2f6      	bcs.n	80033b2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	601a      	str	r2, [r3, #0]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6892      	ldr	r2, [r2, #8]
 8003412:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6852      	ldr	r2, [r2, #4]
 800341c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d103      	bne.n	8003430 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	1e5a      	subs	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800345a:	2301      	movs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d05d      	beq.n	8003542 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800348a:	2b00      	cmp	r3, #0
 800348c:	d059      	beq.n	8003542 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003496:	2100      	movs	r1, #0
 8003498:	fba3 2302 	umull	r2, r3, r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d000      	beq.n	80034a2 <xQueueGenericReset+0x52>
 80034a0:	2101      	movs	r1, #1
 80034a2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d14c      	bne.n	8003542 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80034a8:	f002 fc10 	bl	8005ccc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	6939      	ldr	r1, [r7, #16]
 80034b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	441a      	add	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2200      	movs	r2, #0
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	3b01      	subs	r3, #1
 80034da:	6939      	ldr	r1, [r7, #16]
 80034dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	441a      	add	r2, r3
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	22ff      	movs	r2, #255	@ 0xff
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	22ff      	movs	r2, #255	@ 0xff
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d114      	bne.n	8003528 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01a      	beq.n	800353c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	3310      	adds	r3, #16
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fb4c 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003516:	4b16      	ldr	r3, [pc, #88]	@ (8003570 <xQueueGenericReset+0x120>)
 8003518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	e009      	b.n	800353c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	3310      	adds	r3, #16
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff feff 	bl	8003330 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	3324      	adds	r3, #36	@ 0x24
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fefa 	bl	8003330 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800353c:	f002 fbf8 	bl	8005d30 <vPortExitCritical>
 8003540:	e001      	b.n	8003546 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <xQueueGenericReset+0x114>
        __asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	60bb      	str	r3, [r7, #8]
    }
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003564:	697b      	ldr	r3, [r7, #20]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	@ 0x28
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d02e      	beq.n	80035ea <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800358c:	2100      	movs	r1, #0
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	fba3 2302 	umull	r2, r3, r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d000      	beq.n	800359c <xQueueGenericCreate+0x28>
 800359a:	2101      	movs	r1, #1
 800359c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d123      	bne.n	80035ea <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80035aa:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80035ae:	d81c      	bhi.n	80035ea <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	3350      	adds	r3, #80	@ 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f002 fc6c 	bl	8005e9c <pvPortMalloc>
 80035c4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01d      	beq.n	8003608 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3350      	adds	r3, #80	@ 0x50
 80035d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035d6:	79fa      	ldrb	r2, [r7, #7]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f815 	bl	8003612 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80035e8:	e00e      	b.n	8003608 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <xQueueGenericCreate+0x94>
        __asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	613b      	str	r3, [r7, #16]
    }
 8003602:	bf00      	nop
 8003604:	bf00      	nop
 8003606:	e7fd      	b.n	8003604 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003608:	69fb      	ldr	r3, [r7, #28]
    }
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e002      	b.n	8003634 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003640:	2101      	movs	r1, #1
 8003642:	69b8      	ldr	r0, [r7, #24]
 8003644:	f7ff ff04 	bl	8003450 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00e      	beq.n	8003684 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003678:	2300      	movs	r3, #0
 800367a:	2200      	movs	r2, #0
 800367c:	2100      	movs	r1, #0
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f81c 	bl	80036bc <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003696:	2301      	movs	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	461a      	mov	r2, r3
 80036a2:	6939      	ldr	r1, [r7, #16]
 80036a4:	6978      	ldr	r0, [r7, #20]
 80036a6:	f7ff ff65 	bl	8003574 <xQueueGenericCreate>
 80036aa:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff ffd3 	bl	8003658 <prvInitialiseMutex>

        return xNewQueue;
 80036b2:	68fb      	ldr	r3, [r7, #12]
    }
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08e      	sub	sp, #56	@ 0x38
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036ca:	2300      	movs	r3, #0
 80036cc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <xQueueGenericSend+0x34>
        __asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	e7fd      	b.n	80036ec <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <xQueueGenericSend+0x42>
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <xQueueGenericSend+0x46>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <xQueueGenericSend+0x48>
 8003702:	2300      	movs	r3, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <xQueueGenericSend+0x64>
        __asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d103      	bne.n	800372e <xQueueGenericSend+0x72>
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <xQueueGenericSend+0x76>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <xQueueGenericSend+0x78>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <xQueueGenericSend+0x94>
        __asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	623b      	str	r3, [r7, #32]
    }
 800374a:	bf00      	nop
 800374c:	bf00      	nop
 800374e:	e7fd      	b.n	800374c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003750:	f001 fc4e 	bl	8004ff0 <xTaskGetSchedulerState>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <xQueueGenericSend+0xa4>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <xQueueGenericSend+0xa8>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <xQueueGenericSend+0xaa>
 8003764:	2300      	movs	r3, #0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <xQueueGenericSend+0xc6>
        __asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	61fb      	str	r3, [r7, #28]
    }
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	e7fd      	b.n	800377e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003782:	f002 faa3 	bl	8005ccc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <xQueueGenericSend+0xdc>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d129      	bne.n	80037ec <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800379e:	f000 fa89 	bl	8003cb4 <prvCopyDataToQueue>
 80037a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d010      	beq.n	80037ce <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	3324      	adds	r3, #36	@ 0x24
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 f9f9 	bl	8004ba8 <xTaskRemoveFromEventList>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80037bc:	4b3f      	ldr	r3, [pc, #252]	@ (80038bc <xQueueGenericSend+0x200>)
 80037be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	e00a      	b.n	80037e4 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80037ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80037d4:	4b39      	ldr	r3, [pc, #228]	@ (80038bc <xQueueGenericSend+0x200>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80037e4:	f002 faa4 	bl	8005d30 <vPortExitCritical>
                return pdPASS;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e063      	b.n	80038b4 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037f2:	f002 fa9d 	bl	8005d30 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e05c      	b.n	80038b4 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80037fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	4618      	mov	r0, r3
 8003806:	f001 faa7 	bl	8004d58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800380a:	2301      	movs	r3, #1
 800380c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800380e:	f002 fa8f 	bl	8005d30 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003812:	f000 feab 	bl	800456c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003816:	f002 fa59 	bl	8005ccc <vPortEnterCritical>
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003820:	b25b      	sxtb	r3, r3
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d103      	bne.n	8003830 <xQueueGenericSend+0x174>
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003836:	b25b      	sxtb	r3, r3
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d103      	bne.n	8003846 <xQueueGenericSend+0x18a>
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003846:	f002 fa73 	bl	8005d30 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800384a:	1d3a      	adds	r2, r7, #4
 800384c:	f107 0314 	add.w	r3, r7, #20
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f001 fa96 	bl	8004d84 <xTaskCheckForTimeOut>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d124      	bne.n	80038a8 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800385e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003860:	f000 fb20 	bl	8003ea4 <prvIsQueueFull>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800386a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386c:	3310      	adds	r3, #16
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f001 f92c 	bl	8004ad0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800387a:	f000 faab 	bl	8003dd4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800387e:	f000 fe83 	bl	8004588 <xTaskResumeAll>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	f47f af7c 	bne.w	8003782 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800388a:	4b0c      	ldr	r3, [pc, #48]	@ (80038bc <xQueueGenericSend+0x200>)
 800388c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	e772      	b.n	8003782 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800389c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800389e:	f000 fa99 	bl	8003dd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80038a2:	f000 fe71 	bl	8004588 <xTaskResumeAll>
 80038a6:	e76c      	b.n	8003782 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80038a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038aa:	f000 fa93 	bl	8003dd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80038ae:	f000 fe6b 	bl	8004588 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80038b2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3738      	adds	r7, #56	@ 0x38
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	@ 0x30
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <xQueueReceive+0x32>
        __asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	623b      	str	r3, [r7, #32]
    }
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d103      	bne.n	8003900 <xQueueReceive+0x40>
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <xQueueReceive+0x44>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <xQueueReceive+0x46>
 8003904:	2300      	movs	r3, #0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <xQueueReceive+0x62>
        __asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	61fb      	str	r3, [r7, #28]
    }
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	e7fd      	b.n	800391e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003922:	f001 fb65 	bl	8004ff0 <xTaskGetSchedulerState>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d102      	bne.n	8003932 <xQueueReceive+0x72>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <xQueueReceive+0x76>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <xQueueReceive+0x78>
 8003936:	2300      	movs	r3, #0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10b      	bne.n	8003954 <xQueueReceive+0x94>
        __asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	61bb      	str	r3, [r7, #24]
    }
 800394e:	bf00      	nop
 8003950:	bf00      	nop
 8003952:	e7fd      	b.n	8003950 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003954:	f002 f9ba 	bl	8005ccc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01f      	beq.n	80039a4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003968:	f000 fa0e 	bl	8003d88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003972:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00f      	beq.n	800399c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	3310      	adds	r3, #16
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f911 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800398c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a80 <xQueueReceive+0x1c0>)
 800398e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800399c:	f002 f9c8 	bl	8005d30 <vPortExitCritical>
                return pdPASS;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e069      	b.n	8003a78 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80039aa:	f002 f9c1 	bl	8005d30 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e062      	b.n	8003a78 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80039b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 f9cb 	bl	8004d58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80039c2:	2301      	movs	r3, #1
 80039c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80039c6:	f002 f9b3 	bl	8005d30 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80039ca:	f000 fdcf 	bl	800456c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80039ce:	f002 f97d 	bl	8005ccc <vPortEnterCritical>
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d103      	bne.n	80039e8 <xQueueReceive+0x128>
 80039e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039ee:	b25b      	sxtb	r3, r3
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d103      	bne.n	80039fe <xQueueReceive+0x13e>
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039fe:	f002 f997 	bl	8005d30 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a02:	1d3a      	adds	r2, r7, #4
 8003a04:	f107 0310 	add.w	r3, r7, #16
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 f9ba 	bl	8004d84 <xTaskCheckForTimeOut>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d123      	bne.n	8003a5e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a18:	f000 fa2e 	bl	8003e78 <prvIsQueueEmpty>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d017      	beq.n	8003a52 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a24:	3324      	adds	r3, #36	@ 0x24
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 f850 	bl	8004ad0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003a30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a32:	f000 f9cf 	bl	8003dd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003a36:	f000 fda7 	bl	8004588 <xTaskResumeAll>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d189      	bne.n	8003954 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003a40:	4b0f      	ldr	r3, [pc, #60]	@ (8003a80 <xQueueReceive+0x1c0>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	e780      	b.n	8003954 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a54:	f000 f9be 	bl	8003dd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003a58:	f000 fd96 	bl	8004588 <xTaskResumeAll>
 8003a5c:	e77a      	b.n	8003954 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a60:	f000 f9b8 	bl	8003dd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003a64:	f000 fd90 	bl	8004588 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a6a:	f000 fa05 	bl	8003e78 <prvIsQueueEmpty>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f43f af6f 	beq.w	8003954 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003a76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3730      	adds	r7, #48	@ 0x30
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	@ 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	61bb      	str	r3, [r7, #24]
    }
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	617b      	str	r3, [r7, #20]
    }
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
 8003ad6:	e7fd      	b.n	8003ad4 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ad8:	f001 fa8a 	bl	8004ff0 <xTaskGetSchedulerState>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <xQueueSemaphoreTake+0x64>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <xQueueSemaphoreTake+0x68>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <xQueueSemaphoreTake+0x6a>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10b      	bne.n	8003b0a <xQueueSemaphoreTake+0x86>
        __asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	613b      	str	r3, [r7, #16]
    }
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	e7fd      	b.n	8003b06 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003b0a:	f002 f8df 	bl	8005ccc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b12:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d024      	beq.n	8003b64 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b2a:	f001 fc7d 	bl	8005428 <pvTaskIncrementMutexHeldCount>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00f      	beq.n	8003b5c <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	3310      	adds	r3, #16
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 f831 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003c80 <xQueueSemaphoreTake+0x1fc>)
 8003b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003b5c:	f002 f8e8 	bl	8005d30 <vPortExitCritical>
                return pdPASS;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e089      	b.n	8003c78 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003b6a:	f002 f8e1 	bl	8005d30 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e082      	b.n	8003c78 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 f8eb 	bl	8004d58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003b86:	f002 f8d3 	bl	8005d30 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003b8a:	f000 fcef 	bl	800456c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003b8e:	f002 f89d 	bl	8005ccc <vPortEnterCritical>
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b98:	b25b      	sxtb	r3, r3
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d103      	bne.n	8003ba8 <xQueueSemaphoreTake+0x124>
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bae:	b25b      	sxtb	r3, r3
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d103      	bne.n	8003bbe <xQueueSemaphoreTake+0x13a>
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bbe:	f002 f8b7 	bl	8005d30 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bc2:	463a      	mov	r2, r7
 8003bc4:	f107 0308 	add.w	r3, r7, #8
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f8da 	bl	8004d84 <xTaskCheckForTimeOut>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d132      	bne.n	8003c3c <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003bd8:	f000 f94e 	bl	8003e78 <prvIsQueueEmpty>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d026      	beq.n	8003c30 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 8003bea:	f002 f86f 	bl	8005ccc <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 fa1a 	bl	800502c <xTaskPriorityInherit>
 8003bf8:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8003bfa:	f002 f899 	bl	8005d30 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	3324      	adds	r3, #36	@ 0x24
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 ff62 	bl	8004ad0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003c0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c0e:	f000 f8e1 	bl	8003dd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003c12:	f000 fcb9 	bl	8004588 <xTaskResumeAll>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f47f af76 	bne.w	8003b0a <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8003c1e:	4b18      	ldr	r3, [pc, #96]	@ (8003c80 <xQueueSemaphoreTake+0x1fc>)
 8003c20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	e76c      	b.n	8003b0a <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003c30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c32:	f000 f8cf 	bl	8003dd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c36:	f000 fca7 	bl	8004588 <xTaskResumeAll>
 8003c3a:	e766      	b.n	8003b0a <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003c3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c3e:	f000 f8c9 	bl	8003dd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003c42:	f000 fca1 	bl	8004588 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c48:	f000 f916 	bl	8003e78 <prvIsQueueEmpty>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f43f af5b 	beq.w	8003b0a <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8003c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 8003c5a:	f002 f837 	bl	8005ccc <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003c5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c60:	f000 f810 	bl	8003c84 <prvGetDisinheritPriorityAfterTimeout>
 8003c64:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	69f9      	ldr	r1, [r7, #28]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fb21 	bl	80052b4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8003c72:	f002 f85d 	bl	8005d30 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003c76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3730      	adds	r7, #48	@ 0x30
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d006      	beq.n	8003ca2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f1c3 0305 	rsb	r3, r3, #5
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e001      	b.n	8003ca6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
    }
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d14d      	bne.n	8003d76 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 fa42 	bl	8005168 <xTaskPriorityDisinherit>
 8003ce4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	e043      	b.n	8003d76 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d119      	bne.n	8003d28 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6858      	ldr	r0, [r3, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	f002 fafe 	bl	8006300 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	441a      	add	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d32b      	bcc.n	8003d76 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	e026      	b.n	8003d76 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	68d8      	ldr	r0, [r3, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	461a      	mov	r2, r3
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	f002 fae4 	bl	8006300 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	425b      	negs	r3, r3
 8003d42:	441a      	add	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d207      	bcs.n	8003d64 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	425b      	negs	r3, r3
 8003d5e:	441a      	add	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d105      	bne.n	8003d76 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003d7e:	697b      	ldr	r3, [r7, #20]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d018      	beq.n	8003dcc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	441a      	add	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d303      	bcc.n	8003dbc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68d9      	ldr	r1, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6838      	ldr	r0, [r7, #0]
 8003dc8:	f002 fa9a 	bl	8006300 <memcpy>
    }
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003ddc:	f001 ff76 	bl	8005ccc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003de6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003de8:	e011      	b.n	8003e0e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d012      	beq.n	8003e18 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3324      	adds	r3, #36	@ 0x24
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fed6 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003e02:	f001 f827 	bl	8004e54 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	dce9      	bgt.n	8003dea <prvUnlockQueue+0x16>
 8003e16:	e000      	b.n	8003e1a <prvUnlockQueue+0x46>
                    break;
 8003e18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	22ff      	movs	r2, #255	@ 0xff
 8003e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003e22:	f001 ff85 	bl	8005d30 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003e26:	f001 ff51 	bl	8005ccc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e32:	e011      	b.n	8003e58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d012      	beq.n	8003e62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3310      	adds	r3, #16
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 feb1 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003e4c:	f001 f802 	bl	8004e54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003e50:	7bbb      	ldrb	r3, [r7, #14]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	dce9      	bgt.n	8003e34 <prvUnlockQueue+0x60>
 8003e60:	e000      	b.n	8003e64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003e62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	22ff      	movs	r2, #255	@ 0xff
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003e6c:	f001 ff60 	bl	8005d30 <vPortExitCritical>
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003e80:	f001 ff24 	bl	8005ccc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e001      	b.n	8003e96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003e96:	f001 ff4b 	bl	8005d30 <vPortExitCritical>

    return xReturn;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003eac:	f001 ff0e 	bl	8005ccc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d102      	bne.n	8003ec2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e001      	b.n	8003ec6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ec6:	f001 ff33 	bl	8005d30 <vPortExitCritical>

    return xReturn;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	60fb      	str	r3, [r7, #12]
    }
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d024      	beq.n	8003f50 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e01e      	b.n	8003f4a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003f0c:	4a18      	ldr	r2, [pc, #96]	@ (8003f70 <vQueueAddToRegistry+0x9c>)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d105      	bne.n	8003f28 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4a13      	ldr	r2, [pc, #76]	@ (8003f70 <vQueueAddToRegistry+0x9c>)
 8003f22:	4413      	add	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
                    break;
 8003f26:	e013      	b.n	8003f50 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <vQueueAddToRegistry+0x70>
 8003f2e:	4a10      	ldr	r2, [pc, #64]	@ (8003f70 <vQueueAddToRegistry+0x9c>)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f70 <vQueueAddToRegistry+0x9c>)
 8003f40:	4413      	add	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	3301      	adds	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b07      	cmp	r3, #7
 8003f4e:	d9dd      	bls.n	8003f0c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000170 	.word	0x20000170

08003f74 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003f84:	f001 fea2 	bl	8005ccc <vPortEnterCritical>
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f8e:	b25b      	sxtb	r3, r3
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d103      	bne.n	8003f9e <vQueueWaitForMessageRestricted+0x2a>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003faa:	d103      	bne.n	8003fb4 <vQueueWaitForMessageRestricted+0x40>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fb4:	f001 febc 	bl	8005d30 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	3324      	adds	r3, #36	@ 0x24
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fda7 	bl	8004b1c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003fce:	6978      	ldr	r0, [r7, #20]
 8003fd0:	f7ff ff00 	bl	8003dd4 <prvUnlockQueue>
    }
 8003fd4:	bf00      	nop
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	@ 0x30
 8003fe0:	af04      	add	r7, sp, #16
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 ff53 	bl	8005e9c <pvPortMalloc>
 8003ff6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d013      	beq.n	8004026 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ffe:	205c      	movs	r0, #92	@ 0x5c
 8004000:	f001 ff4c 	bl	8005e9c <pvPortMalloc>
 8004004:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800400c:	225c      	movs	r2, #92	@ 0x5c
 800400e:	2100      	movs	r1, #0
 8004010:	69f8      	ldr	r0, [r7, #28]
 8004012:	f002 f947 	bl	80062a4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30
 800401c:	e005      	b.n	800402a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800401e:	6978      	ldr	r0, [r7, #20]
 8004020:	f001 fff8 	bl	8006014 <vPortFree>
 8004024:	e001      	b.n	800402a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d013      	beq.n	8004058 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	2300      	movs	r3, #0
 8004034:	9303      	str	r3, [sp, #12]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	9302      	str	r3, [sp, #8]
 800403a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f80e 	bl	8004068 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800404c:	69f8      	ldr	r0, [r7, #28]
 800404e:	f000 f89b 	bl	8004188 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004052:	2301      	movs	r3, #1
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e002      	b.n	800405e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004058:	f04f 33ff 	mov.w	r3, #4294967295
 800405c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800405e:	69bb      	ldr	r3, [r7, #24]
    }
 8004060:	4618      	mov	r0, r3
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004078:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	461a      	mov	r2, r3
 8004080:	21a5      	movs	r1, #165	@ 0xa5
 8004082:	f002 f90f 	bl	80062a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004090:	3b01      	subs	r3, #1
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f023 0307 	bic.w	r3, r3, #7
 800409e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	617b      	str	r3, [r7, #20]
    }
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	e7fd      	b.n	80040be <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01e      	beq.n	8004106 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e012      	b.n	80040f4 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	4413      	add	r3, r2
 80040d4:	7819      	ldrb	r1, [r3, #0]
 80040d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	3338      	adds	r3, #56	@ 0x38
 80040de:	460a      	mov	r2, r1
 80040e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3301      	adds	r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b09      	cmp	r3, #9
 80040f8:	d9e9      	bls.n	80040ce <prvInitialiseNewTask+0x66>
 80040fa:	e000      	b.n	80040fe <prvInitialiseNewTask+0x96>
            {
                break;
 80040fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004108:	2b04      	cmp	r3, #4
 800410a:	d90b      	bls.n	8004124 <prvInitialiseNewTask+0xbc>
        __asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	613b      	str	r3, [r7, #16]
    }
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004126:	2b04      	cmp	r3, #4
 8004128:	d901      	bls.n	800412e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800412a:	2304      	movs	r3, #4
 800412c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800412e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004132:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004138:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800413a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413c:	3304      	adds	r3, #4
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff f916 	bl	8003370 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	3318      	adds	r3, #24
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f911 	bl	8003370 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004152:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004156:	f1c3 0205 	rsb	r2, r3, #5
 800415a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004162:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	69b8      	ldr	r0, [r7, #24]
 800416a:	f001 fc7d 	bl	8005a68 <pxPortInitialiseStack>
 800416e:	4602      	mov	r2, r0
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800417a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800417e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004180:	bf00      	nop
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004190:	f001 fd9c 	bl	8005ccc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004194:	4b40      	ldr	r3, [pc, #256]	@ (8004298 <prvAddNewTaskToReadyList+0x110>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	4a3f      	ldr	r2, [pc, #252]	@ (8004298 <prvAddNewTaskToReadyList+0x110>)
 800419c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800419e:	4b3f      	ldr	r3, [pc, #252]	@ (800429c <prvAddNewTaskToReadyList+0x114>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80041a6:	4a3d      	ldr	r2, [pc, #244]	@ (800429c <prvAddNewTaskToReadyList+0x114>)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004298 <prvAddNewTaskToReadyList+0x110>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d110      	bne.n	80041d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80041b4:	f000 fe72 	bl	8004e9c <prvInitialiseTaskLists>
 80041b8:	e00d      	b.n	80041d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80041ba:	4b39      	ldr	r3, [pc, #228]	@ (80042a0 <prvAddNewTaskToReadyList+0x118>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041c2:	4b36      	ldr	r3, [pc, #216]	@ (800429c <prvAddNewTaskToReadyList+0x114>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d802      	bhi.n	80041d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80041d0:	4a32      	ldr	r2, [pc, #200]	@ (800429c <prvAddNewTaskToReadyList+0x114>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80041d6:	4b33      	ldr	r3, [pc, #204]	@ (80042a4 <prvAddNewTaskToReadyList+0x11c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3301      	adds	r3, #1
 80041dc:	4a31      	ldr	r2, [pc, #196]	@ (80042a4 <prvAddNewTaskToReadyList+0x11c>)
 80041de:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041e0:	4b30      	ldr	r3, [pc, #192]	@ (80042a4 <prvAddNewTaskToReadyList+0x11c>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	2201      	movs	r2, #1
 80041ee:	409a      	lsls	r2, r3
 80041f0:	4b2d      	ldr	r3, [pc, #180]	@ (80042a8 <prvAddNewTaskToReadyList+0x120>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	4a2c      	ldr	r2, [pc, #176]	@ (80042a8 <prvAddNewTaskToReadyList+0x120>)
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fe:	492b      	ldr	r1, [pc, #172]	@ (80042ac <prvAddNewTaskToReadyList+0x124>)
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3304      	adds	r3, #4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	3204      	adds	r2, #4
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ac <prvAddNewTaskToReadyList+0x124>)
 800423e:	441a      	add	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	615a      	str	r2, [r3, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004248:	4918      	ldr	r1, [pc, #96]	@ (80042ac <prvAddNewTaskToReadyList+0x124>)
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1c59      	adds	r1, r3, #1
 8004258:	4814      	ldr	r0, [pc, #80]	@ (80042ac <prvAddNewTaskToReadyList+0x124>)
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4403      	add	r3, r0
 8004264:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004266:	f001 fd63 	bl	8005d30 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800426a:	4b0d      	ldr	r3, [pc, #52]	@ (80042a0 <prvAddNewTaskToReadyList+0x118>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00e      	beq.n	8004290 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <prvAddNewTaskToReadyList+0x114>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	429a      	cmp	r2, r3
 800427e:	d207      	bcs.n	8004290 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004280:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <prvAddNewTaskToReadyList+0x128>)
 8004282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000288 	.word	0x20000288
 800429c:	200001b0 	.word	0x200001b0
 80042a0:	20000294 	.word	0x20000294
 80042a4:	200002a4 	.word	0x200002a4
 80042a8:	20000290 	.word	0x20000290
 80042ac:	200001b4 	.word	0x200001b4
 80042b0:	e000ed04 	.word	0xe000ed04

080042b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d018      	beq.n	80042f8 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80042c6:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <vTaskDelay+0x64>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <vTaskDelay+0x32>
        __asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60bb      	str	r3, [r7, #8]
    }
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80042e6:	f000 f941 	bl	800456c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042ea:	2100      	movs	r1, #0
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f001 f8af 	bl	8005450 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80042f2:	f000 f949 	bl	8004588 <xTaskResumeAll>
 80042f6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d107      	bne.n	800430e <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80042fe:	4b07      	ldr	r3, [pc, #28]	@ (800431c <vTaskDelay+0x68>)
 8004300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200002b0 	.word	0x200002b0
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b04      	cmp	r3, #4
 8004332:	d90b      	bls.n	800434c <vTaskPrioritySet+0x2c>
        __asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	60bb      	str	r3, [r7, #8]
    }
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d901      	bls.n	8004356 <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004352:	2304      	movs	r3, #4
 8004354:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8004356:	f001 fcb9 	bl	8005ccc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <vTaskPrioritySet+0x46>
 8004360:	4b55      	ldr	r3, [pc, #340]	@ (80044b8 <vTaskPrioritySet+0x198>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	e000      	b.n	8004368 <vTaskPrioritySet+0x48>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436e:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	f000 8098 	beq.w	80044aa <vTaskPrioritySet+0x18a>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	429a      	cmp	r2, r3
 8004380:	d90d      	bls.n	800439e <vTaskPrioritySet+0x7e>
                {
                    if( pxTCB != pxCurrentTCB )
 8004382:	4b4d      	ldr	r3, [pc, #308]	@ (80044b8 <vTaskPrioritySet+0x198>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	429a      	cmp	r2, r3
 800438a:	d00f      	beq.n	80043ac <vTaskPrioritySet+0x8c>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800438c:	4b4a      	ldr	r3, [pc, #296]	@ (80044b8 <vTaskPrioritySet+0x198>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d309      	bcc.n	80043ac <vTaskPrioritySet+0x8c>
                        {
                            xYieldRequired = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e006      	b.n	80043ac <vTaskPrioritySet+0x8c>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 800439e:	4b46      	ldr	r3, [pc, #280]	@ (80044b8 <vTaskPrioritySet+0x198>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d101      	bne.n	80043ac <vTaskPrioritySet+0x8c>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80043a8:	2301      	movs	r3, #1
 80043aa:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b0:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d102      	bne.n	80043c4 <vTaskPrioritySet+0xa4>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	62da      	str	r2, [r3, #44]	@ 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	64da      	str	r2, [r3, #76]	@ 0x4c
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	db04      	blt.n	80043dc <vTaskPrioritySet+0xbc>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	f1c3 0205 	rsb	r2, r3, #5
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6959      	ldr	r1, [r3, #20]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4a34      	ldr	r2, [pc, #208]	@ (80044bc <vTaskPrioritySet+0x19c>)
 80043ec:	4413      	add	r3, r2
 80043ee:	4299      	cmp	r1, r3
 80043f0:	d150      	bne.n	8004494 <vTaskPrioritySet+0x174>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff f800 	bl	80033fc <uxListRemove>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <vTaskPrioritySet+0xf6>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8004402:	2201      	movs	r2, #1
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43da      	mvns	r2, r3
 800440c:	4b2c      	ldr	r3, [pc, #176]	@ (80044c0 <vTaskPrioritySet+0x1a0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4013      	ands	r3, r2
 8004412:	4a2b      	ldr	r2, [pc, #172]	@ (80044c0 <vTaskPrioritySet+0x1a0>)
 8004414:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	2201      	movs	r2, #1
 800441c:	409a      	lsls	r2, r3
 800441e:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <vTaskPrioritySet+0x1a0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	4a26      	ldr	r2, [pc, #152]	@ (80044c0 <vTaskPrioritySet+0x1a0>)
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442c:	4923      	ldr	r1, [pc, #140]	@ (80044bc <vTaskPrioritySet+0x19c>)
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	3304      	adds	r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	60da      	str	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	3204      	adds	r2, #4
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	1d1a      	adds	r2, r3, #4
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4a14      	ldr	r2, [pc, #80]	@ (80044bc <vTaskPrioritySet+0x19c>)
 800446c:	441a      	add	r2, r3
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	615a      	str	r2, [r3, #20]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004476:	4911      	ldr	r1, [pc, #68]	@ (80044bc <vTaskPrioritySet+0x19c>)
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	1c59      	adds	r1, r3, #1
 8004486:	480d      	ldr	r0, [pc, #52]	@ (80044bc <vTaskPrioritySet+0x19c>)
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4403      	add	r3, r0
 8004492:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <vTaskPrioritySet+0x18a>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800449a:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <vTaskPrioritySet+0x1a4>)
 800449c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80044aa:	f001 fc41 	bl	8005d30 <vPortExitCritical>
    }
 80044ae:	bf00      	nop
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200001b0 	.word	0x200001b0
 80044bc:	200001b4 	.word	0x200001b4
 80044c0:	20000290 	.word	0x20000290
 80044c4:	e000ed04 	.word	0xe000ed04

080044c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80044ce:	4b20      	ldr	r3, [pc, #128]	@ (8004550 <vTaskStartScheduler+0x88>)
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	2282      	movs	r2, #130	@ 0x82
 80044da:	491e      	ldr	r1, [pc, #120]	@ (8004554 <vTaskStartScheduler+0x8c>)
 80044dc:	481e      	ldr	r0, [pc, #120]	@ (8004558 <vTaskStartScheduler+0x90>)
 80044de:	f7ff fd7d 	bl	8003fdc <xTaskCreate>
 80044e2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d102      	bne.n	80044f0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80044ea:	f001 f831 	bl	8005550 <xTimerCreateTimerTask>
 80044ee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d116      	bne.n	8004524 <vTaskStartScheduler+0x5c>
        __asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	60bb      	str	r3, [r7, #8]
    }
 8004508:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800450a:	4b14      	ldr	r3, [pc, #80]	@ (800455c <vTaskStartScheduler+0x94>)
 800450c:	f04f 32ff 	mov.w	r2, #4294967295
 8004510:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004512:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <vTaskStartScheduler+0x98>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004518:	4b12      	ldr	r3, [pc, #72]	@ (8004564 <vTaskStartScheduler+0x9c>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800451e:	f001 fb31 	bl	8005b84 <xPortStartScheduler>
 8004522:	e00f      	b.n	8004544 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d10b      	bne.n	8004544 <vTaskStartScheduler+0x7c>
        __asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	607b      	str	r3, [r7, #4]
    }
 800453e:	bf00      	nop
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <vTaskStartScheduler+0xa0>)
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	200002ac 	.word	0x200002ac
 8004554:	08006c24 	.word	0x08006c24
 8004558:	08004e6d 	.word	0x08004e6d
 800455c:	200002a8 	.word	0x200002a8
 8004560:	20000294 	.word	0x20000294
 8004564:	2000028c 	.word	0x2000028c
 8004568:	20000008 	.word	0x20000008

0800456c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004570:	4b04      	ldr	r3, [pc, #16]	@ (8004584 <vTaskSuspendAll+0x18>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	4a03      	ldr	r2, [pc, #12]	@ (8004584 <vTaskSuspendAll+0x18>)
 8004578:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	200002b0 	.word	0x200002b0

08004588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004592:	2300      	movs	r3, #0
 8004594:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004596:	4b71      	ldr	r3, [pc, #452]	@ (800475c <xTaskResumeAll+0x1d4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <xTaskResumeAll+0x2e>
        __asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	607b      	str	r3, [r7, #4]
    }
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80045b6:	f001 fb89 	bl	8005ccc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80045ba:	4b68      	ldr	r3, [pc, #416]	@ (800475c <xTaskResumeAll+0x1d4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3b01      	subs	r3, #1
 80045c0:	4a66      	ldr	r2, [pc, #408]	@ (800475c <xTaskResumeAll+0x1d4>)
 80045c2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c4:	4b65      	ldr	r3, [pc, #404]	@ (800475c <xTaskResumeAll+0x1d4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 80c0 	bne.w	800474e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045ce:	4b64      	ldr	r3, [pc, #400]	@ (8004760 <xTaskResumeAll+0x1d8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80bb 	beq.w	800474e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045d8:	e08a      	b.n	80046f0 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045da:	4b62      	ldr	r3, [pc, #392]	@ (8004764 <xTaskResumeAll+0x1dc>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	6a12      	ldr	r2, [r2, #32]
 80045f0:	609a      	str	r2, [r3, #8]
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	69d2      	ldr	r2, [r2, #28]
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	3318      	adds	r3, #24
 8004604:	429a      	cmp	r2, r3
 8004606:	d103      	bne.n	8004610 <xTaskResumeAll+0x88>
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2200      	movs	r2, #0
 8004614:	629a      	str	r2, [r3, #40]	@ 0x28
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	1e5a      	subs	r2, r3, #1
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	68d2      	ldr	r2, [r2, #12]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	6892      	ldr	r2, [r2, #8]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3304      	adds	r3, #4
 8004642:	429a      	cmp	r2, r3
 8004644:	d103      	bne.n	800464e <xTaskResumeAll+0xc6>
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2200      	movs	r2, #0
 8004652:	615a      	str	r2, [r3, #20]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1e5a      	subs	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	2201      	movs	r2, #1
 8004664:	409a      	lsls	r2, r3
 8004666:	4b40      	ldr	r3, [pc, #256]	@ (8004768 <xTaskResumeAll+0x1e0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	4a3e      	ldr	r2, [pc, #248]	@ (8004768 <xTaskResumeAll+0x1e0>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004674:	493d      	ldr	r1, [pc, #244]	@ (800476c <xTaskResumeAll+0x1e4>)
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3304      	adds	r3, #4
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	60da      	str	r2, [r3, #12]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	3204      	adds	r2, #4
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	609a      	str	r2, [r3, #8]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4a2e      	ldr	r2, [pc, #184]	@ (800476c <xTaskResumeAll+0x1e4>)
 80046b4:	441a      	add	r2, r3
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	615a      	str	r2, [r3, #20]
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046be:	492b      	ldr	r1, [pc, #172]	@ (800476c <xTaskResumeAll+0x1e4>)
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	1c59      	adds	r1, r3, #1
 80046ce:	4827      	ldr	r0, [pc, #156]	@ (800476c <xTaskResumeAll+0x1e4>)
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4403      	add	r3, r0
 80046da:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e0:	4b23      	ldr	r3, [pc, #140]	@ (8004770 <xTaskResumeAll+0x1e8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80046ea:	4b22      	ldr	r3, [pc, #136]	@ (8004774 <xTaskResumeAll+0x1ec>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004764 <xTaskResumeAll+0x1dc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f47f af70 	bne.w	80045da <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004700:	f000 fc4a 	bl	8004f98 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004704:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <xTaskResumeAll+0x1f0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d010      	beq.n	8004732 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004710:	f000 f854 	bl	80047bc <xTaskIncrementTick>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 800471a:	4b16      	ldr	r3, [pc, #88]	@ (8004774 <xTaskResumeAll+0x1ec>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	3b01      	subs	r3, #1
 8004724:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f1      	bne.n	8004710 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 800472c:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <xTaskResumeAll+0x1f0>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004732:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <xTaskResumeAll+0x1ec>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800473a:	2301      	movs	r3, #1
 800473c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800473e:	4b0f      	ldr	r3, [pc, #60]	@ (800477c <xTaskResumeAll+0x1f4>)
 8004740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800474e:	f001 faef 	bl	8005d30 <vPortExitCritical>

    return xAlreadyYielded;
 8004752:	69bb      	ldr	r3, [r7, #24]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	200002b0 	.word	0x200002b0
 8004760:	20000288 	.word	0x20000288
 8004764:	20000248 	.word	0x20000248
 8004768:	20000290 	.word	0x20000290
 800476c:	200001b4 	.word	0x200001b4
 8004770:	200001b0 	.word	0x200001b0
 8004774:	2000029c 	.word	0x2000029c
 8004778:	20000298 	.word	0x20000298
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <getTaskDeadline>:
/*-----------------------------------------------------------*/

TickType_t getTaskDeadline(TaskHandle_t xTask)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    /* Cast the task handle to a TCB pointer to access the deadline */
    TCB_t *pxTCB = (TCB_t *) xTask;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60fb      	str	r3, [r7, #12]
    return pxTCB->xDeadline;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <xTaskGetTickCount>:

TickType_t xTaskGetTickCount( void )
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80047a2:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <xTaskGetTickCount+0x1c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80047a8:	687b      	ldr	r3, [r7, #4]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	2000028c 	.word	0x2000028c

080047bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c6:	4b7e      	ldr	r3, [pc, #504]	@ (80049c0 <xTaskIncrementTick+0x204>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f040 80ed 	bne.w	80049aa <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047d0:	4b7c      	ldr	r3, [pc, #496]	@ (80049c4 <xTaskIncrementTick+0x208>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3301      	adds	r3, #1
 80047d6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80047d8:	4a7a      	ldr	r2, [pc, #488]	@ (80049c4 <xTaskIncrementTick+0x208>)
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d121      	bne.n	8004828 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80047e4:	4b78      	ldr	r3, [pc, #480]	@ (80049c8 <xTaskIncrementTick+0x20c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <xTaskIncrementTick+0x4a>
        __asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
    }
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	e7fd      	b.n	8004802 <xTaskIncrementTick+0x46>
 8004806:	4b70      	ldr	r3, [pc, #448]	@ (80049c8 <xTaskIncrementTick+0x20c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	4b6f      	ldr	r3, [pc, #444]	@ (80049cc <xTaskIncrementTick+0x210>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a6d      	ldr	r2, [pc, #436]	@ (80049c8 <xTaskIncrementTick+0x20c>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4a6d      	ldr	r2, [pc, #436]	@ (80049cc <xTaskIncrementTick+0x210>)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b6d      	ldr	r3, [pc, #436]	@ (80049d0 <xTaskIncrementTick+0x214>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3301      	adds	r3, #1
 8004820:	4a6b      	ldr	r2, [pc, #428]	@ (80049d0 <xTaskIncrementTick+0x214>)
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	f000 fbb8 	bl	8004f98 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004828:	4b6a      	ldr	r3, [pc, #424]	@ (80049d4 <xTaskIncrementTick+0x218>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	429a      	cmp	r2, r3
 8004830:	f0c0 80a6 	bcc.w	8004980 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004834:	4b64      	ldr	r3, [pc, #400]	@ (80049c8 <xTaskIncrementTick+0x20c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800483e:	4b65      	ldr	r3, [pc, #404]	@ (80049d4 <xTaskIncrementTick+0x218>)
 8004840:	f04f 32ff 	mov.w	r2, #4294967295
 8004844:	601a      	str	r2, [r3, #0]
                    break;
 8004846:	e09b      	b.n	8004980 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004848:	4b5f      	ldr	r3, [pc, #380]	@ (80049c8 <xTaskIncrementTick+0x20c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	429a      	cmp	r2, r3
 800485e:	d203      	bcs.n	8004868 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004860:	4a5c      	ldr	r2, [pc, #368]	@ (80049d4 <xTaskIncrementTick+0x218>)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004866:	e08b      	b.n	8004980 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	68d2      	ldr	r2, [r2, #12]
 8004876:	609a      	str	r2, [r3, #8]
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	6892      	ldr	r2, [r2, #8]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3304      	adds	r3, #4
 800488a:	429a      	cmp	r2, r3
 800488c:	d103      	bne.n	8004896 <xTaskIncrementTick+0xda>
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2200      	movs	r2, #0
 800489a:	615a      	str	r2, [r3, #20]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	1e5a      	subs	r2, r3, #1
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01e      	beq.n	80048ec <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	6a12      	ldr	r2, [r2, #32]
 80048bc:	609a      	str	r2, [r3, #8]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	69d2      	ldr	r2, [r2, #28]
 80048c6:	605a      	str	r2, [r3, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	3318      	adds	r3, #24
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d103      	bne.n	80048dc <xTaskIncrementTick+0x120>
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	6a1a      	ldr	r2, [r3, #32]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2200      	movs	r2, #0
 80048e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	2201      	movs	r2, #1
 80048f2:	409a      	lsls	r2, r3
 80048f4:	4b38      	ldr	r3, [pc, #224]	@ (80049d8 <xTaskIncrementTick+0x21c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	4a37      	ldr	r2, [pc, #220]	@ (80049d8 <xTaskIncrementTick+0x21c>)
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004902:	4936      	ldr	r1, [pc, #216]	@ (80049dc <xTaskIncrementTick+0x220>)
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	3304      	adds	r3, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	609a      	str	r2, [r3, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	3204      	adds	r2, #4
 800492a:	605a      	str	r2, [r3, #4]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	1d1a      	adds	r2, r3, #4
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4a26      	ldr	r2, [pc, #152]	@ (80049dc <xTaskIncrementTick+0x220>)
 8004942:	441a      	add	r2, r3
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	615a      	str	r2, [r3, #20]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494c:	4923      	ldr	r1, [pc, #140]	@ (80049dc <xTaskIncrementTick+0x220>)
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	481f      	ldr	r0, [pc, #124]	@ (80049dc <xTaskIncrementTick+0x220>)
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4403      	add	r3, r0
 8004968:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496e:	4b1c      	ldr	r3, [pc, #112]	@ (80049e0 <xTaskIncrementTick+0x224>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	f67f af5d 	bls.w	8004834 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800497a:	2301      	movs	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800497e:	e759      	b.n	8004834 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004980:	4b17      	ldr	r3, [pc, #92]	@ (80049e0 <xTaskIncrementTick+0x224>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004986:	4915      	ldr	r1, [pc, #84]	@ (80049dc <xTaskIncrementTick+0x220>)
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d901      	bls.n	800499c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8004998:	2301      	movs	r3, #1
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800499c:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <xTaskIncrementTick+0x228>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a8:	e004      	b.n	80049b4 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80049aa:	4b0f      	ldr	r3, [pc, #60]	@ (80049e8 <xTaskIncrementTick+0x22c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3301      	adds	r3, #1
 80049b0:	4a0d      	ldr	r2, [pc, #52]	@ (80049e8 <xTaskIncrementTick+0x22c>)
 80049b2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3728      	adds	r7, #40	@ 0x28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200002b0 	.word	0x200002b0
 80049c4:	2000028c 	.word	0x2000028c
 80049c8:	20000240 	.word	0x20000240
 80049cc:	20000244 	.word	0x20000244
 80049d0:	200002a0 	.word	0x200002a0
 80049d4:	200002a8 	.word	0x200002a8
 80049d8:	20000290 	.word	0x20000290
 80049dc:	200001b4 	.word	0x200001b4
 80049e0:	200001b0 	.word	0x200001b0
 80049e4:	2000029c 	.word	0x2000029c
 80049e8:	20000298 	.word	0x20000298

080049ec <vTaskSetDeadline>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSetDeadline(TaskHandle_t xTask, TickType_t xDeadline)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
	/* Cast the task handle to a TCB pointer to access the deadline */
	TCB_t *pxTCB = (TCB_t *) xTask;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60fb      	str	r3, [r7, #12]
	pxTCB->xDeadline = xDeadline;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <vTaskSwitchContext>:
//    }
//}


void vTaskSwitchContext( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a12:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac0 <vTaskSwitchContext+0xb4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		 * switch. */
		xYieldPending = pdTRUE;
 8004a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac4 <vTaskSwitchContext+0xb8>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
		{
			configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
		}
		#endif
	}
}
 8004a20:	e049      	b.n	8004ab6 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8004a22:	4b28      	ldr	r3, [pc, #160]	@ (8004ac4 <vTaskSwitchContext+0xb8>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
		TickType_t xEarliestDeadline = portMAX_DELAY;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	617b      	str	r3, [r7, #20]
		TaskHandle_t xNextTask = NULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
		for( UBaseType_t uxPriority = configMAX_PRIORITIES - 1; uxPriority >= 0; uxPriority-- )
 8004a32:	2304      	movs	r3, #4
 8004a34:	60fb      	str	r3, [r7, #12]
			if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxPriority ] ) ) )
 8004a36:	4924      	ldr	r1, [pc, #144]	@ (8004ac8 <vTaskSwitchContext+0xbc>)
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d02a      	beq.n	8004aa0 <vTaskSwitchContext+0x94>
				for( pxListItem = listGET_HEAD_ENTRY( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a4a:	491f      	ldr	r1, [pc, #124]	@ (8004ac8 <vTaskSwitchContext+0xbc>)
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	330c      	adds	r3, #12
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	e011      	b.n	8004a84 <vTaskSwitchContext+0x78>
					TaskHandle_t xTask = listGET_LIST_ITEM_OWNER( pxListItem );
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	607b      	str	r3, [r7, #4]
					TickType_t xTaskDeadline = getTaskDeadline( xTask ); /* Retrieve the task's deadline */
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff fe8a 	bl	8004780 <getTaskDeadline>
 8004a6c:	6038      	str	r0, [r7, #0]
					if( xTaskDeadline < xEarliestDeadline )
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d203      	bcs.n	8004a7e <vTaskSwitchContext+0x72>
						xEarliestDeadline = xTaskDeadline;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	617b      	str	r3, [r7, #20]
						xNextTask = xTask;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	613b      	str	r3, [r7, #16]
					 pxListItem = listGET_NEXT( pxListItem ) )
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	60bb      	str	r3, [r7, #8]
					 pxListItem != listGET_END_MARKER( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	3308      	adds	r3, #8
 8004a90:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac8 <vTaskSwitchContext+0xbc>)
 8004a92:	4413      	add	r3, r2
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d1e2      	bne.n	8004a60 <vTaskSwitchContext+0x54>
				if( xNextTask != NULL )
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <vTaskSwitchContext+0x9c>
		for( UBaseType_t uxPriority = configMAX_PRIORITIES - 1; uxPriority >= 0; uxPriority-- )
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]
			if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxPriority ] ) ) )
 8004aa6:	e7c6      	b.n	8004a36 <vTaskSwitchContext+0x2a>
					break;
 8004aa8:	bf00      	nop
		if( xNextTask != NULL )
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <vTaskSwitchContext+0xaa>
			pxCurrentTCB = xNextTask;
 8004ab0:	4a06      	ldr	r2, [pc, #24]	@ (8004acc <vTaskSwitchContext+0xc0>)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6013      	str	r3, [r2, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	200002b0 	.word	0x200002b0
 8004ac4:	2000029c 	.word	0x2000029c
 8004ac8:	200001b4 	.word	0x200001b4
 8004acc:	200001b0 	.word	0x200001b0

08004ad0 <vTaskPlaceOnEventList>:

/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10b      	bne.n	8004af8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60fb      	str	r3, [r7, #12]
    }
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	e7fd      	b.n	8004af4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004af8:	4b07      	ldr	r3, [pc, #28]	@ (8004b18 <vTaskPlaceOnEventList+0x48>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3318      	adds	r3, #24
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fe fc42 	bl	800338a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b06:	2101      	movs	r1, #1
 8004b08:	6838      	ldr	r0, [r7, #0]
 8004b0a:	f000 fca1 	bl	8005450 <prvAddCurrentTaskToDelayedList>
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200001b0 	.word	0x200001b0

08004b1c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	613b      	str	r3, [r7, #16]
    }
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	61da      	str	r2, [r3, #28]
 8004b54:	4b13      	ldr	r3, [pc, #76]	@ (8004ba4 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	6892      	ldr	r2, [r2, #8]
 8004b5c:	621a      	str	r2, [r3, #32]
 8004b5e:	4b11      	ldr	r3, [pc, #68]	@ (8004ba4 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	3218      	adds	r2, #24
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba4 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f103 0218 	add.w	r2, r3, #24
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	609a      	str	r2, [r3, #8]
 8004b76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <vTaskPlaceOnEventListRestricted+0x88>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	68b8      	ldr	r0, [r7, #8]
 8004b98:	f000 fc5a 	bl	8005450 <prvAddCurrentTaskToDelayedList>
    }
 8004b9c:	bf00      	nop
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	200001b0 	.word	0x200001b0

08004ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b08b      	sub	sp, #44	@ 0x2c
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	60fb      	str	r3, [r7, #12]
    }
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	6a12      	ldr	r2, [r2, #32]
 8004be4:	609a      	str	r2, [r3, #8]
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	69d2      	ldr	r2, [r2, #28]
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	3318      	adds	r3, #24
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d103      	bne.n	8004c04 <xTaskRemoveFromEventList+0x5c>
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	6a1a      	ldr	r2, [r3, #32]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2200      	movs	r2, #0
 8004c08:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	1e5a      	subs	r2, r3, #1
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c14:	4b4a      	ldr	r3, [pc, #296]	@ (8004d40 <xTaskRemoveFromEventList+0x198>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d15e      	bne.n	8004cda <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	68d2      	ldr	r2, [r2, #12]
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	6892      	ldr	r2, [r2, #8]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d103      	bne.n	8004c4a <xTaskRemoveFromEventList+0xa2>
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	615a      	str	r2, [r3, #20]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	2201      	movs	r2, #1
 8004c60:	409a      	lsls	r2, r3
 8004c62:	4b38      	ldr	r3, [pc, #224]	@ (8004d44 <xTaskRemoveFromEventList+0x19c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	4a36      	ldr	r2, [pc, #216]	@ (8004d44 <xTaskRemoveFromEventList+0x19c>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c70:	4935      	ldr	r1, [pc, #212]	@ (8004d48 <xTaskRemoveFromEventList+0x1a0>)
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	60da      	str	r2, [r3, #12]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	3204      	adds	r2, #4
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	1d1a      	adds	r2, r3, #4
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	609a      	str	r2, [r3, #8]
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4a26      	ldr	r2, [pc, #152]	@ (8004d48 <xTaskRemoveFromEventList+0x1a0>)
 8004cb0:	441a      	add	r2, r3
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	615a      	str	r2, [r3, #20]
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	4923      	ldr	r1, [pc, #140]	@ (8004d48 <xTaskRemoveFromEventList+0x1a0>)
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	1c59      	adds	r1, r3, #1
 8004cca:	481f      	ldr	r0, [pc, #124]	@ (8004d48 <xTaskRemoveFromEventList+0x1a0>)
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4403      	add	r3, r0
 8004cd6:	6019      	str	r1, [r3, #0]
 8004cd8:	e01b      	b.n	8004d12 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cda:	4b1c      	ldr	r3, [pc, #112]	@ (8004d4c <xTaskRemoveFromEventList+0x1a4>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	61da      	str	r2, [r3, #28]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	621a      	str	r2, [r3, #32]
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	6a3a      	ldr	r2, [r7, #32]
 8004cf4:	3218      	adds	r2, #24
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	f103 0218 	add.w	r2, r3, #24
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	609a      	str	r2, [r3, #8]
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	4a11      	ldr	r2, [pc, #68]	@ (8004d4c <xTaskRemoveFromEventList+0x1a4>)
 8004d06:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d08:	4b10      	ldr	r3, [pc, #64]	@ (8004d4c <xTaskRemoveFromEventList+0x1a4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8004d4c <xTaskRemoveFromEventList+0x1a4>)
 8004d10:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d16:	4b0e      	ldr	r3, [pc, #56]	@ (8004d50 <xTaskRemoveFromEventList+0x1a8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d905      	bls.n	8004d2c <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004d24:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <xTaskRemoveFromEventList+0x1ac>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e001      	b.n	8004d30 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	372c      	adds	r7, #44	@ 0x2c
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	200002b0 	.word	0x200002b0
 8004d44:	20000290 	.word	0x20000290
 8004d48:	200001b4 	.word	0x200001b4
 8004d4c:	20000248 	.word	0x20000248
 8004d50:	200001b0 	.word	0x200001b0
 8004d54:	2000029c 	.word	0x2000029c

08004d58 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d60:	4b06      	ldr	r3, [pc, #24]	@ (8004d7c <vTaskInternalSetTimeOutState+0x24>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <vTaskInternalSetTimeOutState+0x28>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	200002a0 	.word	0x200002a0
 8004d80:	2000028c 	.word	0x2000028c

08004d84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	613b      	str	r3, [r7, #16]
    }
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60fb      	str	r3, [r7, #12]
    }
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004dca:	f000 ff7f 	bl	8005ccc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004dce:	4b1f      	ldr	r3, [pc, #124]	@ (8004e4c <xTaskCheckForTimeOut+0xc8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d102      	bne.n	8004dee <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	e026      	b.n	8004e3c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b17      	ldr	r3, [pc, #92]	@ (8004e50 <xTaskCheckForTimeOut+0xcc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d00a      	beq.n	8004e10 <xTaskCheckForTimeOut+0x8c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d305      	bcc.n	8004e10 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004e04:	2301      	movs	r3, #1
 8004e06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e015      	b.n	8004e3c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d20b      	bcs.n	8004e32 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	1ad2      	subs	r2, r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ff96 	bl	8004d58 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e004      	b.n	8004e3c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004e3c:	f000 ff78 	bl	8005d30 <vPortExitCritical>

    return xReturn;
 8004e40:	69fb      	ldr	r3, [r7, #28]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	2000028c 	.word	0x2000028c
 8004e50:	200002a0 	.word	0x200002a0

08004e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004e58:	4b03      	ldr	r3, [pc, #12]	@ (8004e68 <vTaskMissedYield+0x14>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	2000029c 	.word	0x2000029c

08004e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004e74:	f000 f852 	bl	8004f1c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e78:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <prvIdleTask+0x28>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d9f9      	bls.n	8004e74 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <prvIdleTask+0x2c>)
 8004e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004e90:	e7f0      	b.n	8004e74 <prvIdleTask+0x8>
 8004e92:	bf00      	nop
 8004e94:	200001b4 	.word	0x200001b4
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	e00c      	b.n	8004ec2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4a12      	ldr	r2, [pc, #72]	@ (8004efc <prvInitialiseTaskLists+0x60>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fa3a 	bl	8003330 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d9ef      	bls.n	8004ea8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004ec8:	480d      	ldr	r0, [pc, #52]	@ (8004f00 <prvInitialiseTaskLists+0x64>)
 8004eca:	f7fe fa31 	bl	8003330 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004ece:	480d      	ldr	r0, [pc, #52]	@ (8004f04 <prvInitialiseTaskLists+0x68>)
 8004ed0:	f7fe fa2e 	bl	8003330 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004ed4:	480c      	ldr	r0, [pc, #48]	@ (8004f08 <prvInitialiseTaskLists+0x6c>)
 8004ed6:	f7fe fa2b 	bl	8003330 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004eda:	480c      	ldr	r0, [pc, #48]	@ (8004f0c <prvInitialiseTaskLists+0x70>)
 8004edc:	f7fe fa28 	bl	8003330 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004ee0:	480b      	ldr	r0, [pc, #44]	@ (8004f10 <prvInitialiseTaskLists+0x74>)
 8004ee2:	f7fe fa25 	bl	8003330 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <prvInitialiseTaskLists+0x78>)
 8004ee8:	4a05      	ldr	r2, [pc, #20]	@ (8004f00 <prvInitialiseTaskLists+0x64>)
 8004eea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004eec:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <prvInitialiseTaskLists+0x7c>)
 8004eee:	4a05      	ldr	r2, [pc, #20]	@ (8004f04 <prvInitialiseTaskLists+0x68>)
 8004ef0:	601a      	str	r2, [r3, #0]
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	200001b4 	.word	0x200001b4
 8004f00:	20000218 	.word	0x20000218
 8004f04:	2000022c 	.word	0x2000022c
 8004f08:	20000248 	.word	0x20000248
 8004f0c:	2000025c 	.word	0x2000025c
 8004f10:	20000274 	.word	0x20000274
 8004f14:	20000240 	.word	0x20000240
 8004f18:	20000244 	.word	0x20000244

08004f1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f22:	e019      	b.n	8004f58 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004f24:	f000 fed2 	bl	8005ccc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f28:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <prvCheckTasksWaitingTermination+0x50>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fa61 	bl	80033fc <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <prvCheckTasksWaitingTermination+0x54>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	4a0b      	ldr	r2, [pc, #44]	@ (8004f70 <prvCheckTasksWaitingTermination+0x54>)
 8004f42:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004f44:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <prvCheckTasksWaitingTermination+0x58>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f74 <prvCheckTasksWaitingTermination+0x58>)
 8004f4c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004f4e:	f000 feef 	bl	8005d30 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f810 	bl	8004f78 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f58:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <prvCheckTasksWaitingTermination+0x58>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e1      	bne.n	8004f24 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	2000025c 	.word	0x2000025c
 8004f70:	20000288 	.word	0x20000288
 8004f74:	20000270 	.word	0x20000270

08004f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	4618      	mov	r0, r3
 8004f86:	f001 f845 	bl	8006014 <vPortFree>
            vPortFree( pxTCB );
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f001 f842 	bl	8006014 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc8 <prvResetNextTaskUnblockTime+0x30>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d104      	bne.n	8004fb0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004fa6:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <prvResetNextTaskUnblockTime+0x34>)
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004fae:	e005      	b.n	8004fbc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <prvResetNextTaskUnblockTime+0x30>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a04      	ldr	r2, [pc, #16]	@ (8004fcc <prvResetNextTaskUnblockTime+0x34>)
 8004fba:	6013      	str	r3, [r2, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000240 	.word	0x20000240
 8004fcc:	200002a8 	.word	0x200002a8

08004fd0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8004fd6:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <xTaskGetCurrentTaskHandle+0x1c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	607b      	str	r3, [r7, #4]

        return xReturn;
 8004fdc:	687b      	ldr	r3, [r7, #4]
    }
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	200001b0 	.word	0x200001b0

08004ff0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <xTaskGetSchedulerState+0x34>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ffe:	2301      	movs	r3, #1
 8005000:	607b      	str	r3, [r7, #4]
 8005002:	e008      	b.n	8005016 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005004:	4b08      	ldr	r3, [pc, #32]	@ (8005028 <xTaskGetSchedulerState+0x38>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800500c:	2302      	movs	r3, #2
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	e001      	b.n	8005016 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005012:	2300      	movs	r3, #0
 8005014:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005016:	687b      	ldr	r3, [r7, #4]
    }
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	20000294 	.word	0x20000294
 8005028:	200002b0 	.word	0x200002b0

0800502c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8087 	beq.w	8005152 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005048:	4b44      	ldr	r3, [pc, #272]	@ (800515c <xTaskPriorityInherit+0x130>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504e:	429a      	cmp	r2, r3
 8005050:	d276      	bcs.n	8005140 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	db06      	blt.n	8005068 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505a:	4b40      	ldr	r3, [pc, #256]	@ (800515c <xTaskPriorityInherit+0x130>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	f1c3 0205 	rsb	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6959      	ldr	r1, [r3, #20]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4a39      	ldr	r2, [pc, #228]	@ (8005160 <xTaskPriorityInherit+0x134>)
 800507a:	4413      	add	r3, r2
 800507c:	4299      	cmp	r1, r3
 800507e:	d157      	bne.n	8005130 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3304      	adds	r3, #4
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe f9b9 	bl	80033fc <uxListRemove>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005094:	2201      	movs	r2, #1
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43da      	mvns	r2, r3
 800509c:	4b31      	ldr	r3, [pc, #196]	@ (8005164 <xTaskPriorityInherit+0x138>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4013      	ands	r3, r2
 80050a2:	4a30      	ldr	r2, [pc, #192]	@ (8005164 <xTaskPriorityInherit+0x138>)
 80050a4:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050a6:	4b2d      	ldr	r3, [pc, #180]	@ (800515c <xTaskPriorityInherit+0x130>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	2201      	movs	r2, #1
 80050b6:	409a      	lsls	r2, r3
 80050b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005164 <xTaskPriorityInherit+0x138>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	4a29      	ldr	r2, [pc, #164]	@ (8005164 <xTaskPriorityInherit+0x138>)
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c6:	4926      	ldr	r1, [pc, #152]	@ (8005160 <xTaskPriorityInherit+0x134>)
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	3304      	adds	r3, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	609a      	str	r2, [r3, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	60da      	str	r2, [r3, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	3204      	adds	r2, #4
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4a16      	ldr	r2, [pc, #88]	@ (8005160 <xTaskPriorityInherit+0x134>)
 8005106:	441a      	add	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	615a      	str	r2, [r3, #20]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005110:	4913      	ldr	r1, [pc, #76]	@ (8005160 <xTaskPriorityInherit+0x134>)
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1c59      	adds	r1, r3, #1
 8005120:	480f      	ldr	r0, [pc, #60]	@ (8005160 <xTaskPriorityInherit+0x134>)
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4403      	add	r3, r0
 800512c:	6019      	str	r1, [r3, #0]
 800512e:	e004      	b.n	800513a <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005130:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <xTaskPriorityInherit+0x130>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800513a:	2301      	movs	r3, #1
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e008      	b.n	8005152 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005144:	4b05      	ldr	r3, [pc, #20]	@ (800515c <xTaskPriorityInherit+0x130>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	429a      	cmp	r2, r3
 800514c:	d201      	bcs.n	8005152 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800514e:	2301      	movs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005152:	697b      	ldr	r3, [r7, #20]
    }
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	200001b0 	.word	0x200001b0
 8005160:	200001b4 	.word	0x200001b4
 8005164:	20000290 	.word	0x20000290

08005168 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 808e 	beq.w	800529c <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005180:	4b49      	ldr	r3, [pc, #292]	@ (80052a8 <xTaskPriorityDisinherit+0x140>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	429a      	cmp	r2, r3
 8005188:	d00b      	beq.n	80051a2 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	613b      	str	r3, [r7, #16]
    }
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	60fb      	str	r3, [r7, #12]
    }
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c6:	1e5a      	subs	r2, r3, #1
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d061      	beq.n	800529c <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d15d      	bne.n	800529c <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe f909 	bl	80033fc <uxListRemove>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	2201      	movs	r2, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43da      	mvns	r2, r3
 80051fc:	4b2b      	ldr	r3, [pc, #172]	@ (80052ac <xTaskPriorityDisinherit+0x144>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4013      	ands	r3, r2
 8005202:	4a2a      	ldr	r2, [pc, #168]	@ (80052ac <xTaskPriorityDisinherit+0x144>)
 8005204:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	f1c3 0205 	rsb	r2, r3, #5
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	2201      	movs	r2, #1
 8005220:	409a      	lsls	r2, r3
 8005222:	4b22      	ldr	r3, [pc, #136]	@ (80052ac <xTaskPriorityDisinherit+0x144>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	4a20      	ldr	r2, [pc, #128]	@ (80052ac <xTaskPriorityDisinherit+0x144>)
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005230:	491f      	ldr	r1, [pc, #124]	@ (80052b0 <xTaskPriorityDisinherit+0x148>)
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	3304      	adds	r3, #4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	609a      	str	r2, [r3, #8]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	60da      	str	r2, [r3, #12]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	3204      	adds	r2, #4
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	1d1a      	adds	r2, r3, #4
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	609a      	str	r2, [r3, #8]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4a10      	ldr	r2, [pc, #64]	@ (80052b0 <xTaskPriorityDisinherit+0x148>)
 8005270:	441a      	add	r2, r3
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	615a      	str	r2, [r3, #20]
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527a:	490d      	ldr	r1, [pc, #52]	@ (80052b0 <xTaskPriorityDisinherit+0x148>)
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	1c59      	adds	r1, r3, #1
 800528a:	4809      	ldr	r0, [pc, #36]	@ (80052b0 <xTaskPriorityDisinherit+0x148>)
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4403      	add	r3, r0
 8005296:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005298:	2301      	movs	r3, #1
 800529a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800529c:	69fb      	ldr	r3, [r7, #28]
    }
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	200001b0 	.word	0x200001b0
 80052ac:	20000290 	.word	0x20000290
 80052b0:	200001b4 	.word	0x200001b4

080052b4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	@ 0x28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052c2:	2301      	movs	r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80a3 	beq.w	8005414 <vTaskPriorityDisinheritAfterTimeout+0x160>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	613b      	str	r3, [r7, #16]
    }
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d902      	bls.n	80052fe <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fc:	e002      	b.n	8005304 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530a:	429a      	cmp	r2, r3
 800530c:	f000 8082 	beq.w	8005414 <vTaskPriorityDisinheritAfterTimeout+0x160>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	429a      	cmp	r2, r3
 8005318:	d17c      	bne.n	8005414 <vTaskPriorityDisinheritAfterTimeout+0x160>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800531a:	4b40      	ldr	r3, [pc, #256]	@ (800541c <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a3a      	ldr	r2, [r7, #32]
 8005320:	429a      	cmp	r2, r3
 8005322:	d10b      	bne.n	800533c <vTaskPriorityDisinheritAfterTimeout+0x88>
        __asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60fb      	str	r3, [r7, #12]
    }
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005346:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	db04      	blt.n	800535a <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	f1c3 0205 	rsb	r2, r3, #5
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	6959      	ldr	r1, [r3, #20]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4a2d      	ldr	r2, [pc, #180]	@ (8005420 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800536a:	4413      	add	r3, r2
 800536c:	4299      	cmp	r1, r3
 800536e:	d151      	bne.n	8005414 <vTaskPriorityDisinheritAfterTimeout+0x160>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	3304      	adds	r3, #4
 8005374:	4618      	mov	r0, r3
 8005376:	f7fe f841 	bl	80033fc <uxListRemove>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	2201      	movs	r2, #1
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43da      	mvns	r2, r3
 800538c:	4b25      	ldr	r3, [pc, #148]	@ (8005424 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4013      	ands	r3, r2
 8005392:	4a24      	ldr	r2, [pc, #144]	@ (8005424 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8005394:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	2201      	movs	r2, #1
 800539c:	409a      	lsls	r2, r3
 800539e:	4b21      	ldr	r3, [pc, #132]	@ (8005424 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005424 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ac:	491c      	ldr	r1, [pc, #112]	@ (8005420 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3304      	adds	r3, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	6a3a      	ldr	r2, [r7, #32]
 80053d2:	3204      	adds	r2, #4
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	1d1a      	adds	r2, r3, #4
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	609a      	str	r2, [r3, #8]
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005420 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80053ec:	441a      	add	r2, r3
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	615a      	str	r2, [r3, #20]
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f6:	490a      	ldr	r1, [pc, #40]	@ (8005420 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	1c59      	adds	r1, r3, #1
 8005406:	4806      	ldr	r0, [pc, #24]	@ (8005420 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4403      	add	r3, r0
 8005412:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005414:	bf00      	nop
 8005416:	3728      	adds	r7, #40	@ 0x28
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	200001b0 	.word	0x200001b0
 8005420:	200001b4 	.word	0x200001b4
 8005424:	20000290 	.word	0x20000290

08005428 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800542c:	4b07      	ldr	r3, [pc, #28]	@ (800544c <pvTaskIncrementMutexHeldCount+0x24>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <pvTaskIncrementMutexHeldCount+0x24>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800543a:	3201      	adds	r2, #1
 800543c:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800543e:	4b03      	ldr	r3, [pc, #12]	@ (800544c <pvTaskIncrementMutexHeldCount+0x24>)
 8005440:	681b      	ldr	r3, [r3, #0]
    }
 8005442:	4618      	mov	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	200001b0 	.word	0x200001b0

08005450 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800545a:	4b36      	ldr	r3, [pc, #216]	@ (8005534 <prvAddCurrentTaskToDelayedList+0xe4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005460:	4b35      	ldr	r3, [pc, #212]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3304      	adds	r3, #4
 8005466:	4618      	mov	r0, r3
 8005468:	f7fd ffc8 	bl	80033fc <uxListRemove>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005472:	4b31      	ldr	r3, [pc, #196]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	2201      	movs	r2, #1
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43da      	mvns	r2, r3
 8005480:	4b2e      	ldr	r3, [pc, #184]	@ (800553c <prvAddCurrentTaskToDelayedList+0xec>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4013      	ands	r3, r2
 8005486:	4a2d      	ldr	r2, [pc, #180]	@ (800553c <prvAddCurrentTaskToDelayedList+0xec>)
 8005488:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d124      	bne.n	80054dc <prvAddCurrentTaskToDelayedList+0x8c>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d021      	beq.n	80054dc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005498:	4b29      	ldr	r3, [pc, #164]	@ (8005540 <prvAddCurrentTaskToDelayedList+0xf0>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	4b26      	ldr	r3, [pc, #152]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	609a      	str	r2, [r3, #8]
 80054a6:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	6892      	ldr	r2, [r2, #8]
 80054ae:	60da      	str	r2, [r3, #12]
 80054b0:	4b21      	ldr	r3, [pc, #132]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	3204      	adds	r2, #4
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	1d1a      	adds	r2, r3, #4
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	609a      	str	r2, [r3, #8]
 80054c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005540 <prvAddCurrentTaskToDelayedList+0xf0>)
 80054cc:	615a      	str	r2, [r3, #20]
 80054ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005540 <prvAddCurrentTaskToDelayedList+0xf0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <prvAddCurrentTaskToDelayedList+0xf0>)
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80054da:	e026      	b.n	800552a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054e4:	4b14      	ldr	r3, [pc, #80]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d209      	bcs.n	8005508 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f4:	4b13      	ldr	r3, [pc, #76]	@ (8005544 <prvAddCurrentTaskToDelayedList+0xf4>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f7fd ff42 	bl	800338a <vListInsert>
}
 8005506:	e010      	b.n	800552a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005508:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <prvAddCurrentTaskToDelayedList+0xf8>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xe8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f7fd ff38 	bl	800338a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800551a:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <prvAddCurrentTaskToDelayedList+0xfc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	429a      	cmp	r2, r3
 8005522:	d202      	bcs.n	800552a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005524:	4a09      	ldr	r2, [pc, #36]	@ (800554c <prvAddCurrentTaskToDelayedList+0xfc>)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6013      	str	r3, [r2, #0]
}
 800552a:	bf00      	nop
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	2000028c 	.word	0x2000028c
 8005538:	200001b0 	.word	0x200001b0
 800553c:	20000290 	.word	0x20000290
 8005540:	20000274 	.word	0x20000274
 8005544:	20000244 	.word	0x20000244
 8005548:	20000240 	.word	0x20000240
 800554c:	200002a8 	.word	0x200002a8

08005550 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800555a:	f000 fa4f 	bl	80059fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800555e:	4b12      	ldr	r3, [pc, #72]	@ (80055a8 <xTimerCreateTimerTask+0x58>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00b      	beq.n	800557e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005566:	4b11      	ldr	r3, [pc, #68]	@ (80055ac <xTimerCreateTimerTask+0x5c>)
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	2302      	movs	r3, #2
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	2300      	movs	r3, #0
 8005570:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005574:	490e      	ldr	r1, [pc, #56]	@ (80055b0 <xTimerCreateTimerTask+0x60>)
 8005576:	480f      	ldr	r0, [pc, #60]	@ (80055b4 <xTimerCreateTimerTask+0x64>)
 8005578:	f7fe fd30 	bl	8003fdc <xTaskCreate>
 800557c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	603b      	str	r3, [r7, #0]
    }
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800559c:	687b      	ldr	r3, [r7, #4]
    }
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200002e4 	.word	0x200002e4
 80055ac:	200002e8 	.word	0x200002e8
 80055b0:	08006c2c 	.word	0x08006c2c
 80055b4:	0800565d 	.word	0x0800565d

080055b8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80055c4:	e008      	b.n	80055d8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4413      	add	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	18d1      	adds	r1, r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f8df 	bl	80057a8 <prvInsertTimerInActiveList>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ea      	bne.n	80055c6 <prvReloadTimer+0xe>
        }
    }
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005606:	4b14      	ldr	r3, [pc, #80]	@ (8005658 <prvProcessExpiredTimer+0x5c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3304      	adds	r3, #4
 8005614:	4618      	mov	r0, r3
 8005616:	f7fd fef1 	bl	80033fc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7ff ffc3 	bl	80055b8 <prvReloadTimer>
 8005632:	e008      	b.n	8005646 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	4798      	blx	r3
    }
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	200002dc 	.word	0x200002dc

0800565c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005664:	f107 0308 	add.w	r3, r7, #8
 8005668:	4618      	mov	r0, r3
 800566a:	f000 f859 	bl	8005720 <prvGetNextExpireTime>
 800566e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4619      	mov	r1, r3
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f805 	bl	8005684 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800567a:	f000 f8d7 	bl	800582c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800567e:	bf00      	nop
 8005680:	e7f0      	b.n	8005664 <prvTimerTask+0x8>
	...

08005684 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800568e:	f7fe ff6d 	bl	800456c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005692:	f107 0308 	add.w	r3, r7, #8
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f866 	bl	8005768 <prvSampleTimeNow>
 800569c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d130      	bne.n	8005706 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <prvProcessTimerOrBlockTask+0x3c>
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d806      	bhi.n	80056c0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80056b2:	f7fe ff69 	bl	8004588 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff9f 	bl	80055fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80056be:	e024      	b.n	800570a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056c6:	4b13      	ldr	r3, [pc, #76]	@ (8005714 <prvProcessTimerOrBlockTask+0x90>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <prvProcessTimerOrBlockTask+0x50>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <prvProcessTimerOrBlockTask+0x52>
 80056d4:	2300      	movs	r3, #0
 80056d6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005718 <prvProcessTimerOrBlockTask+0x94>)
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4619      	mov	r1, r3
 80056e6:	f7fe fc45 	bl	8003f74 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80056ea:	f7fe ff4d 	bl	8004588 <xTaskResumeAll>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80056f4:	4b09      	ldr	r3, [pc, #36]	@ (800571c <prvProcessTimerOrBlockTask+0x98>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
    }
 8005704:	e001      	b.n	800570a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005706:	f7fe ff3f 	bl	8004588 <xTaskResumeAll>
    }
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	200002e0 	.word	0x200002e0
 8005718:	200002e4 	.word	0x200002e4
 800571c:	e000ed04 	.word	0xe000ed04

08005720 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005728:	4b0e      	ldr	r3, [pc, #56]	@ (8005764 <prvGetNextExpireTime+0x44>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <prvGetNextExpireTime+0x16>
 8005732:	2201      	movs	r2, #1
 8005734:	e000      	b.n	8005738 <prvGetNextExpireTime+0x18>
 8005736:	2200      	movs	r2, #0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005744:	4b07      	ldr	r3, [pc, #28]	@ (8005764 <prvGetNextExpireTime+0x44>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e001      	b.n	8005754 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005754:	68fb      	ldr	r3, [r7, #12]
    }
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	200002dc 	.word	0x200002dc

08005768 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005770:	f7ff f814 	bl	800479c <xTaskGetTickCount>
 8005774:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005776:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <prvSampleTimeNow+0x3c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	429a      	cmp	r2, r3
 800577e:	d205      	bcs.n	800578c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005780:	f000 f916 	bl	80059b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e002      	b.n	8005792 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005792:	4a04      	ldr	r2, [pc, #16]	@ (80057a4 <prvSampleTimeNow+0x3c>)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005798:	68fb      	ldr	r3, [r7, #12]
    }
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200002ec 	.word	0x200002ec

080057a8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d812      	bhi.n	80057f4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	1ad2      	subs	r2, r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80057dc:	2301      	movs	r3, #1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e01b      	b.n	800581a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057e2:	4b10      	ldr	r3, [pc, #64]	@ (8005824 <prvInsertTimerInActiveList+0x7c>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7fd fdcc 	bl	800338a <vListInsert>
 80057f2:	e012      	b.n	800581a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d206      	bcs.n	800580a <prvInsertTimerInActiveList+0x62>
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e007      	b.n	800581a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800580a:	4b07      	ldr	r3, [pc, #28]	@ (8005828 <prvInsertTimerInActiveList+0x80>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f7fd fdb8 	bl	800338a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800581a:	697b      	ldr	r3, [r7, #20]
    }
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	200002e0 	.word	0x200002e0
 8005828:	200002dc 	.word	0x200002dc

0800582c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005832:	e0a9      	b.n	8005988 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f2c0 80a6 	blt.w	8005988 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	3304      	adds	r3, #4
 800584c:	4618      	mov	r0, r3
 800584e:	f7fd fdd5 	bl	80033fc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff ff87 	bl	8005768 <prvSampleTimeNow>
 800585a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	3b01      	subs	r3, #1
 8005860:	2b08      	cmp	r3, #8
 8005862:	f200 808e 	bhi.w	8005982 <prvProcessReceivedCommands+0x156>
 8005866:	a201      	add	r2, pc, #4	@ (adr r2, 800586c <prvProcessReceivedCommands+0x40>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	08005891 	.word	0x08005891
 8005870:	08005891 	.word	0x08005891
 8005874:	080058f9 	.word	0x080058f9
 8005878:	0800590d 	.word	0x0800590d
 800587c:	08005959 	.word	0x08005959
 8005880:	08005891 	.word	0x08005891
 8005884:	08005891 	.word	0x08005891
 8005888:	080058f9 	.word	0x080058f9
 800588c:	0800590d 	.word	0x0800590d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	18d1      	adds	r1, r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	69f8      	ldr	r0, [r7, #28]
 80058b0:	f7ff ff7a 	bl	80057a8 <prvInsertTimerInActiveList>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d065      	beq.n	8005986 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	4413      	add	r3, r2
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4619      	mov	r1, r3
 80058d4:	69f8      	ldr	r0, [r7, #28]
 80058d6:	f7ff fe6f 	bl	80055b8 <prvReloadTimer>
 80058da:	e008      	b.n	80058ee <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	69f8      	ldr	r0, [r7, #28]
 80058f4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80058f6:	e046      	b.n	8005986 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800590a:	e03d      	b.n	8005988 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	b2da      	uxtb	r2, r3
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	617b      	str	r3, [r7, #20]
    }
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	18d1      	adds	r1, r2, r3
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	69f8      	ldr	r0, [r7, #28]
 8005952:	f7ff ff29 	bl	80057a8 <prvInsertTimerInActiveList>
                        break;
 8005956:	e017      	b.n	8005988 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8005966:	69f8      	ldr	r0, [r7, #28]
 8005968:	f000 fb54 	bl	8006014 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800596c:	e00c      	b.n	8005988 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	b2da      	uxtb	r2, r3
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005980:	e002      	b.n	8005988 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005982:	bf00      	nop
 8005984:	e000      	b.n	8005988 <prvProcessReceivedCommands+0x15c>
                        break;
 8005986:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005988:	4b08      	ldr	r3, [pc, #32]	@ (80059ac <prvProcessReceivedCommands+0x180>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f107 0108 	add.w	r1, r7, #8
 8005990:	2200      	movs	r2, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f7fd ff94 	bl	80038c0 <xQueueReceive>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	f47f af4a 	bne.w	8005834 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200002e4 	.word	0x200002e4

080059b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059b6:	e009      	b.n	80059cc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059b8:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <prvSwitchTimerLists+0x44>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80059c2:	f04f 31ff 	mov.w	r1, #4294967295
 80059c6:	6838      	ldr	r0, [r7, #0]
 80059c8:	f7ff fe18 	bl	80055fc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059cc:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <prvSwitchTimerLists+0x44>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f0      	bne.n	80059b8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80059d6:	4b07      	ldr	r3, [pc, #28]	@ (80059f4 <prvSwitchTimerLists+0x44>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80059dc:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <prvSwitchTimerLists+0x48>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a04      	ldr	r2, [pc, #16]	@ (80059f4 <prvSwitchTimerLists+0x44>)
 80059e2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80059e4:	4a04      	ldr	r2, [pc, #16]	@ (80059f8 <prvSwitchTimerLists+0x48>)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6013      	str	r3, [r2, #0]
    }
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	200002dc 	.word	0x200002dc
 80059f8:	200002e0 	.word	0x200002e0

080059fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005a00:	f000 f964 	bl	8005ccc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005a04:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <prvCheckForValidListAndQueue+0x54>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d11d      	bne.n	8005a48 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005a0c:	4811      	ldr	r0, [pc, #68]	@ (8005a54 <prvCheckForValidListAndQueue+0x58>)
 8005a0e:	f7fd fc8f 	bl	8003330 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005a12:	4811      	ldr	r0, [pc, #68]	@ (8005a58 <prvCheckForValidListAndQueue+0x5c>)
 8005a14:	f7fd fc8c 	bl	8003330 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005a18:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <prvCheckForValidListAndQueue+0x60>)
 8005a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8005a54 <prvCheckForValidListAndQueue+0x58>)
 8005a1c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005a1e:	4b10      	ldr	r3, [pc, #64]	@ (8005a60 <prvCheckForValidListAndQueue+0x64>)
 8005a20:	4a0d      	ldr	r2, [pc, #52]	@ (8005a58 <prvCheckForValidListAndQueue+0x5c>)
 8005a22:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005a24:	2200      	movs	r2, #0
 8005a26:	210c      	movs	r1, #12
 8005a28:	200a      	movs	r0, #10
 8005a2a:	f7fd fda3 	bl	8003574 <xQueueGenericCreate>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4a07      	ldr	r2, [pc, #28]	@ (8005a50 <prvCheckForValidListAndQueue+0x54>)
 8005a32:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005a34:	4b06      	ldr	r3, [pc, #24]	@ (8005a50 <prvCheckForValidListAndQueue+0x54>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <prvCheckForValidListAndQueue+0x54>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4908      	ldr	r1, [pc, #32]	@ (8005a64 <prvCheckForValidListAndQueue+0x68>)
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe fa46 	bl	8003ed4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005a48:	f000 f972 	bl	8005d30 <vPortExitCritical>
    }
 8005a4c:	bf00      	nop
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	200002e4 	.word	0x200002e4
 8005a54:	200002b4 	.word	0x200002b4
 8005a58:	200002c8 	.word	0x200002c8
 8005a5c:	200002dc 	.word	0x200002dc
 8005a60:	200002e0 	.word	0x200002e0
 8005a64:	08006c34 	.word	0x08006c34

08005a68 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3b04      	subs	r3, #4
 8005a78:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3b04      	subs	r3, #4
 8005a86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3b04      	subs	r3, #4
 8005a96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005a98:	4a0c      	ldr	r2, [pc, #48]	@ (8005acc <pxPortInitialiseStack+0x64>)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3b14      	subs	r3, #20
 8005aa2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3b04      	subs	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f06f 0202 	mvn.w	r2, #2
 8005ab6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3b20      	subs	r3, #32
 8005abc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005abe:	68fb      	ldr	r3, [r7, #12]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	08005ad1 	.word	0x08005ad1

08005ad0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005ada:	4b13      	ldr	r3, [pc, #76]	@ (8005b28 <prvTaskExitError+0x58>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d00b      	beq.n	8005afc <prvTaskExitError+0x2c>
        __asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	60fb      	str	r3, [r7, #12]
    }
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <prvTaskExitError+0x28>
        __asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60bb      	str	r3, [r7, #8]
    }
 8005b0e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005b10:	bf00      	nop
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0fc      	beq.n	8005b12 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	2000000c 	.word	0x2000000c
 8005b2c:	00000000 	.word	0x00000000

08005b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005b30:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <pxCurrentTCBConst2>)
 8005b32:	6819      	ldr	r1, [r3, #0]
 8005b34:	6808      	ldr	r0, [r1, #0]
 8005b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3a:	f380 8809 	msr	PSP, r0
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f04f 0000 	mov.w	r0, #0
 8005b46:	f380 8811 	msr	BASEPRI, r0
 8005b4a:	4770      	bx	lr
 8005b4c:	f3af 8000 	nop.w

08005b50 <pxCurrentTCBConst2>:
 8005b50:	200001b0 	.word	0x200001b0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop

08005b58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005b58:	4808      	ldr	r0, [pc, #32]	@ (8005b7c <prvPortStartFirstTask+0x24>)
 8005b5a:	6800      	ldr	r0, [r0, #0]
 8005b5c:	6800      	ldr	r0, [r0, #0]
 8005b5e:	f380 8808 	msr	MSP, r0
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f380 8814 	msr	CONTROL, r0
 8005b6a:	b662      	cpsie	i
 8005b6c:	b661      	cpsie	f
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	df00      	svc	0
 8005b78:	bf00      	nop
 8005b7a:	0000      	.short	0x0000
 8005b7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop

08005b84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ca8 <xPortStartScheduler+0x124>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a47      	ldr	r2, [pc, #284]	@ (8005cac <xPortStartScheduler+0x128>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10b      	bne.n	8005bac <xPortStartScheduler+0x28>
        __asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	613b      	str	r3, [r7, #16]
    }
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bac:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca8 <xPortStartScheduler+0x124>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a3f      	ldr	r2, [pc, #252]	@ (8005cb0 <xPortStartScheduler+0x12c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d10b      	bne.n	8005bce <xPortStartScheduler+0x4a>
        __asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	60fb      	str	r3, [r7, #12]
    }
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	e7fd      	b.n	8005bca <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bce:	4b39      	ldr	r3, [pc, #228]	@ (8005cb4 <xPortStartScheduler+0x130>)
 8005bd0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	22ff      	movs	r2, #255	@ 0xff
 8005bde:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4b31      	ldr	r3, [pc, #196]	@ (8005cb8 <xPortStartScheduler+0x134>)
 8005bf4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bf6:	4b31      	ldr	r3, [pc, #196]	@ (8005cbc <xPortStartScheduler+0x138>)
 8005bf8:	2207      	movs	r2, #7
 8005bfa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bfc:	e009      	b.n	8005c12 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8005bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <xPortStartScheduler+0x138>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4a2d      	ldr	r2, [pc, #180]	@ (8005cbc <xPortStartScheduler+0x138>)
 8005c06:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1a:	2b80      	cmp	r3, #128	@ 0x80
 8005c1c:	d0ef      	beq.n	8005bfe <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c1e:	4b27      	ldr	r3, [pc, #156]	@ (8005cbc <xPortStartScheduler+0x138>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1c3 0307 	rsb	r3, r3, #7
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d00b      	beq.n	8005c42 <xPortStartScheduler+0xbe>
        __asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60bb      	str	r3, [r7, #8]
    }
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	e7fd      	b.n	8005c3e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c42:	4b1e      	ldr	r3, [pc, #120]	@ (8005cbc <xPortStartScheduler+0x138>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	4a1c      	ldr	r2, [pc, #112]	@ (8005cbc <xPortStartScheduler+0x138>)
 8005c4a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cbc <xPortStartScheduler+0x138>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c54:	4a19      	ldr	r2, [pc, #100]	@ (8005cbc <xPortStartScheduler+0x138>)
 8005c56:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005c60:	4b17      	ldr	r3, [pc, #92]	@ (8005cc0 <xPortStartScheduler+0x13c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a16      	ldr	r2, [pc, #88]	@ (8005cc0 <xPortStartScheduler+0x13c>)
 8005c66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c6a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005c6c:	4b14      	ldr	r3, [pc, #80]	@ (8005cc0 <xPortStartScheduler+0x13c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a13      	ldr	r2, [pc, #76]	@ (8005cc0 <xPortStartScheduler+0x13c>)
 8005c72:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c76:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005c78:	f000 f8e0 	bl	8005e3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005c7c:	4b11      	ldr	r3, [pc, #68]	@ (8005cc4 <xPortStartScheduler+0x140>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005c82:	f000 f8ff 	bl	8005e84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c86:	4b10      	ldr	r3, [pc, #64]	@ (8005cc8 <xPortStartScheduler+0x144>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8005cc8 <xPortStartScheduler+0x144>)
 8005c8c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c90:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005c92:	f7ff ff61 	bl	8005b58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005c96:	f7fe feb9 	bl	8004a0c <vTaskSwitchContext>
    prvTaskExitError();
 8005c9a:	f7ff ff19 	bl	8005ad0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	e000ed00 	.word	0xe000ed00
 8005cac:	410fc271 	.word	0x410fc271
 8005cb0:	410fc270 	.word	0x410fc270
 8005cb4:	e000e400 	.word	0xe000e400
 8005cb8:	200002f0 	.word	0x200002f0
 8005cbc:	200002f4 	.word	0x200002f4
 8005cc0:	e000ed20 	.word	0xe000ed20
 8005cc4:	2000000c 	.word	0x2000000c
 8005cc8:	e000ef34 	.word	0xe000ef34

08005ccc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
        __asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	607b      	str	r3, [r7, #4]
    }
 8005ce4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005ce6:	4b10      	ldr	r3, [pc, #64]	@ (8005d28 <vPortEnterCritical+0x5c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3301      	adds	r3, #1
 8005cec:	4a0e      	ldr	r2, [pc, #56]	@ (8005d28 <vPortEnterCritical+0x5c>)
 8005cee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d28 <vPortEnterCritical+0x5c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d110      	bne.n	8005d1a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d2c <vPortEnterCritical+0x60>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <vPortEnterCritical+0x4e>
        __asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	603b      	str	r3, [r7, #0]
    }
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	e7fd      	b.n	8005d16 <vPortEnterCritical+0x4a>
    }
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	2000000c 	.word	0x2000000c
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005d36:	4b12      	ldr	r3, [pc, #72]	@ (8005d80 <vPortExitCritical+0x50>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <vPortExitCritical+0x26>
        __asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	607b      	str	r3, [r7, #4]
    }
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	e7fd      	b.n	8005d52 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005d56:	4b0a      	ldr	r3, [pc, #40]	@ (8005d80 <vPortExitCritical+0x50>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	4a08      	ldr	r2, [pc, #32]	@ (8005d80 <vPortExitCritical+0x50>)
 8005d5e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005d60:	4b07      	ldr	r3, [pc, #28]	@ (8005d80 <vPortExitCritical+0x50>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <vPortExitCritical+0x44>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005d72:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	2000000c 	.word	0x2000000c
	...

08005d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005d90:	f3ef 8009 	mrs	r0, PSP
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4b15      	ldr	r3, [pc, #84]	@ (8005df0 <pxCurrentTCBConst>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	f01e 0f10 	tst.w	lr, #16
 8005da0:	bf08      	it	eq
 8005da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005daa:	6010      	str	r0, [r2, #0]
 8005dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005db4:	f380 8811 	msr	BASEPRI, r0
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f7fe fe24 	bl	8004a0c <vTaskSwitchContext>
 8005dc4:	f04f 0000 	mov.w	r0, #0
 8005dc8:	f380 8811 	msr	BASEPRI, r0
 8005dcc:	bc09      	pop	{r0, r3}
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	6808      	ldr	r0, [r1, #0]
 8005dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd6:	f01e 0f10 	tst.w	lr, #16
 8005dda:	bf08      	it	eq
 8005ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005de0:	f380 8809 	msr	PSP, r0
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	f3af 8000 	nop.w

08005df0 <pxCurrentTCBConst>:
 8005df0:	200001b0 	.word	0x200001b0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop

08005df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
        __asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
    }
 8005e10:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005e12:	f7fe fcd3 	bl	80047bc <xTaskIncrementTick>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e1c:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <SysTick_Handler+0x40>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	2300      	movs	r3, #0
 8005e26:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	f383 8811 	msr	BASEPRI, r3
    }
 8005e2e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e40:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <vPortSetupTimerInterrupt+0x34>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e46:	4b0b      	ldr	r3, [pc, #44]	@ (8005e74 <vPortSetupTimerInterrupt+0x38>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e78 <vPortSetupTimerInterrupt+0x3c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a0a      	ldr	r2, [pc, #40]	@ (8005e7c <vPortSetupTimerInterrupt+0x40>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	099b      	lsrs	r3, r3, #6
 8005e58:	4a09      	ldr	r2, [pc, #36]	@ (8005e80 <vPortSetupTimerInterrupt+0x44>)
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e5e:	4b04      	ldr	r3, [pc, #16]	@ (8005e70 <vPortSetupTimerInterrupt+0x34>)
 8005e60:	2207      	movs	r2, #7
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	e000e010 	.word	0xe000e010
 8005e74:	e000e018 	.word	0xe000e018
 8005e78:	20000000 	.word	0x20000000
 8005e7c:	10624dd3 	.word	0x10624dd3
 8005e80:	e000e014 	.word	0xe000e014

08005e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005e84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e94 <vPortEnableVFP+0x10>
 8005e88:	6801      	ldr	r1, [r0, #0]
 8005e8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e8e:	6001      	str	r1, [r0, #0]
 8005e90:	4770      	bx	lr
 8005e92:	0000      	.short	0x0000
 8005e94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop

08005e9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	@ 0x28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005ea8:	f7fe fb60 	bl	800456c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005eac:	4b54      	ldr	r3, [pc, #336]	@ (8006000 <pvPortMalloc+0x164>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005eb4:	f000 f90c 	bl	80060d0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d012      	beq.n	8005ee4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	3308      	adds	r3, #8
 8005eca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d804      	bhi.n	8005ee0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	4413      	add	r3, r2
 8005edc:	607b      	str	r3, [r7, #4]
 8005ede:	e001      	b.n	8005ee4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	db71      	blt.n	8005fce <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d06e      	beq.n	8005fce <pvPortMalloc+0x132>
 8005ef0:	4b44      	ldr	r3, [pc, #272]	@ (8006004 <pvPortMalloc+0x168>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d869      	bhi.n	8005fce <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005efa:	4b43      	ldr	r3, [pc, #268]	@ (8006008 <pvPortMalloc+0x16c>)
 8005efc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005efe:	4b42      	ldr	r3, [pc, #264]	@ (8006008 <pvPortMalloc+0x16c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f04:	e004      	b.n	8005f10 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d903      	bls.n	8005f22 <pvPortMalloc+0x86>
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f1      	bne.n	8005f06 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005f22:	4b37      	ldr	r3, [pc, #220]	@ (8006000 <pvPortMalloc+0x164>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d050      	beq.n	8005fce <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2208      	movs	r2, #8
 8005f32:	4413      	add	r3, r2
 8005f34:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	1ad2      	subs	r2, r2, r3
 8005f46:	2308      	movs	r3, #8
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d920      	bls.n	8005f90 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4413      	add	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <pvPortMalloc+0xdc>
        __asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	613b      	str	r3, [r7, #16]
    }
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	1ad2      	subs	r2, r2, r3
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f8a:	6978      	ldr	r0, [r7, #20]
 8005f8c:	f000 f8fc 	bl	8006188 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f90:	4b1c      	ldr	r3, [pc, #112]	@ (8006004 <pvPortMalloc+0x168>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006004 <pvPortMalloc+0x168>)
 8005f9c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f9e:	4b19      	ldr	r3, [pc, #100]	@ (8006004 <pvPortMalloc+0x168>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800600c <pvPortMalloc+0x170>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d203      	bcs.n	8005fb2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005faa:	4b16      	ldr	r3, [pc, #88]	@ (8006004 <pvPortMalloc+0x168>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a17      	ldr	r2, [pc, #92]	@ (800600c <pvPortMalloc+0x170>)
 8005fb0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005fc4:	4b12      	ldr	r3, [pc, #72]	@ (8006010 <pvPortMalloc+0x174>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	4a11      	ldr	r2, [pc, #68]	@ (8006010 <pvPortMalloc+0x174>)
 8005fcc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005fce:	f7fe fadb 	bl	8004588 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <pvPortMalloc+0x158>
        __asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60fb      	str	r3, [r7, #12]
    }
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	e7fd      	b.n	8005ff0 <pvPortMalloc+0x154>
    return pvReturn;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3728      	adds	r7, #40	@ 0x28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	2000fb00 	.word	0x2000fb00
 8006004:	2000fb04 	.word	0x2000fb04
 8006008:	2000faf8 	.word	0x2000faf8
 800600c:	2000fb08 	.word	0x2000fb08
 8006010:	2000fb0c 	.word	0x2000fb0c

08006014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d04b      	beq.n	80060be <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006026:	2308      	movs	r3, #8
 8006028:	425b      	negs	r3, r3
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4413      	add	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	db0b      	blt.n	8006054 <vPortFree+0x40>
        __asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60fb      	str	r3, [r7, #12]
    }
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	e7fd      	b.n	8006050 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <vPortFree+0x60>
        __asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60bb      	str	r3, [r7, #8]
    }
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	0fdb      	lsrs	r3, r3, #31
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01c      	beq.n	80060be <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d118      	bne.n	80060be <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006098:	f7fe fa68 	bl	800456c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	4b09      	ldr	r3, [pc, #36]	@ (80060c8 <vPortFree+0xb4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	4a08      	ldr	r2, [pc, #32]	@ (80060c8 <vPortFree+0xb4>)
 80060a8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060aa:	6938      	ldr	r0, [r7, #16]
 80060ac:	f000 f86c 	bl	8006188 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80060b0:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <vPortFree+0xb8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a05      	ldr	r2, [pc, #20]	@ (80060cc <vPortFree+0xb8>)
 80060b8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80060ba:	f7fe fa65 	bl	8004588 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80060be:	bf00      	nop
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	2000fb04 	.word	0x2000fb04
 80060cc:	2000fb10 	.word	0x2000fb10

080060d0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060d6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80060da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80060dc:	4b25      	ldr	r3, [pc, #148]	@ (8006174 <prvHeapInit+0xa4>)
 80060de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00c      	beq.n	8006104 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3307      	adds	r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0307 	bic.w	r3, r3, #7
 80060f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006174 <prvHeapInit+0xa4>)
 8006100:	4413      	add	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006108:	4a1b      	ldr	r2, [pc, #108]	@ (8006178 <prvHeapInit+0xa8>)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800610e:	4b1a      	ldr	r3, [pc, #104]	@ (8006178 <prvHeapInit+0xa8>)
 8006110:	2200      	movs	r2, #0
 8006112:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4413      	add	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800611c:	2208      	movs	r2, #8
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4a13      	ldr	r2, [pc, #76]	@ (800617c <prvHeapInit+0xac>)
 8006130:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006132:	4b12      	ldr	r3, [pc, #72]	@ (800617c <prvHeapInit+0xac>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2200      	movs	r2, #0
 8006138:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800613a:	4b10      	ldr	r3, [pc, #64]	@ (800617c <prvHeapInit+0xac>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006150:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <prvHeapInit+0xac>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4a08      	ldr	r2, [pc, #32]	@ (8006180 <prvHeapInit+0xb0>)
 800615e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4a07      	ldr	r2, [pc, #28]	@ (8006184 <prvHeapInit+0xb4>)
 8006166:	6013      	str	r3, [r2, #0]
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	200002f8 	.word	0x200002f8
 8006178:	2000faf8 	.word	0x2000faf8
 800617c:	2000fb00 	.word	0x2000fb00
 8006180:	2000fb08 	.word	0x2000fb08
 8006184:	2000fb04 	.word	0x2000fb04

08006188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006190:	4b28      	ldr	r3, [pc, #160]	@ (8006234 <prvInsertBlockIntoFreeList+0xac>)
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e002      	b.n	800619c <prvInsertBlockIntoFreeList+0x14>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d8f7      	bhi.n	8006196 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	4413      	add	r3, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d108      	bne.n	80061ca <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	441a      	add	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	441a      	add	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d118      	bne.n	8006210 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b15      	ldr	r3, [pc, #84]	@ (8006238 <prvInsertBlockIntoFreeList+0xb0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d00d      	beq.n	8006206 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	e008      	b.n	8006218 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006206:	4b0c      	ldr	r3, [pc, #48]	@ (8006238 <prvInsertBlockIntoFreeList+0xb0>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	e003      	b.n	8006218 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	429a      	cmp	r2, r3
 800621e:	d002      	beq.n	8006226 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	2000faf8 	.word	0x2000faf8
 8006238:	2000fb00 	.word	0x2000fb00

0800623c <sniprintf>:
 800623c:	b40c      	push	{r2, r3}
 800623e:	b530      	push	{r4, r5, lr}
 8006240:	4b17      	ldr	r3, [pc, #92]	@ (80062a0 <sniprintf+0x64>)
 8006242:	1e0c      	subs	r4, r1, #0
 8006244:	681d      	ldr	r5, [r3, #0]
 8006246:	b09d      	sub	sp, #116	@ 0x74
 8006248:	da08      	bge.n	800625c <sniprintf+0x20>
 800624a:	238b      	movs	r3, #139	@ 0x8b
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	f04f 30ff 	mov.w	r0, #4294967295
 8006252:	b01d      	add	sp, #116	@ 0x74
 8006254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006258:	b002      	add	sp, #8
 800625a:	4770      	bx	lr
 800625c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006260:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006264:	bf14      	ite	ne
 8006266:	f104 33ff 	addne.w	r3, r4, #4294967295
 800626a:	4623      	moveq	r3, r4
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	9307      	str	r3, [sp, #28]
 8006270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006274:	9002      	str	r0, [sp, #8]
 8006276:	9006      	str	r0, [sp, #24]
 8006278:	f8ad 3016 	strh.w	r3, [sp, #22]
 800627c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800627e:	ab21      	add	r3, sp, #132	@ 0x84
 8006280:	a902      	add	r1, sp, #8
 8006282:	4628      	mov	r0, r5
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	f000 f99d 	bl	80065c4 <_svfiprintf_r>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	bfbc      	itt	lt
 800628e:	238b      	movlt	r3, #139	@ 0x8b
 8006290:	602b      	strlt	r3, [r5, #0]
 8006292:	2c00      	cmp	r4, #0
 8006294:	d0dd      	beq.n	8006252 <sniprintf+0x16>
 8006296:	9b02      	ldr	r3, [sp, #8]
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	e7d9      	b.n	8006252 <sniprintf+0x16>
 800629e:	bf00      	nop
 80062a0:	20000010 	.word	0x20000010

080062a4 <memset>:
 80062a4:	4402      	add	r2, r0
 80062a6:	4603      	mov	r3, r0
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d100      	bne.n	80062ae <memset+0xa>
 80062ac:	4770      	bx	lr
 80062ae:	f803 1b01 	strb.w	r1, [r3], #1
 80062b2:	e7f9      	b.n	80062a8 <memset+0x4>

080062b4 <__libc_init_array>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	4d0d      	ldr	r5, [pc, #52]	@ (80062ec <__libc_init_array+0x38>)
 80062b8:	4c0d      	ldr	r4, [pc, #52]	@ (80062f0 <__libc_init_array+0x3c>)
 80062ba:	1b64      	subs	r4, r4, r5
 80062bc:	10a4      	asrs	r4, r4, #2
 80062be:	2600      	movs	r6, #0
 80062c0:	42a6      	cmp	r6, r4
 80062c2:	d109      	bne.n	80062d8 <__libc_init_array+0x24>
 80062c4:	4d0b      	ldr	r5, [pc, #44]	@ (80062f4 <__libc_init_array+0x40>)
 80062c6:	4c0c      	ldr	r4, [pc, #48]	@ (80062f8 <__libc_init_array+0x44>)
 80062c8:	f000 fc74 	bl	8006bb4 <_init>
 80062cc:	1b64      	subs	r4, r4, r5
 80062ce:	10a4      	asrs	r4, r4, #2
 80062d0:	2600      	movs	r6, #0
 80062d2:	42a6      	cmp	r6, r4
 80062d4:	d105      	bne.n	80062e2 <__libc_init_array+0x2e>
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062dc:	4798      	blx	r3
 80062de:	3601      	adds	r6, #1
 80062e0:	e7ee      	b.n	80062c0 <__libc_init_array+0xc>
 80062e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e6:	4798      	blx	r3
 80062e8:	3601      	adds	r6, #1
 80062ea:	e7f2      	b.n	80062d2 <__libc_init_array+0x1e>
 80062ec:	08006c90 	.word	0x08006c90
 80062f0:	08006c90 	.word	0x08006c90
 80062f4:	08006c90 	.word	0x08006c90
 80062f8:	08006c94 	.word	0x08006c94

080062fc <__retarget_lock_acquire_recursive>:
 80062fc:	4770      	bx	lr

080062fe <__retarget_lock_release_recursive>:
 80062fe:	4770      	bx	lr

08006300 <memcpy>:
 8006300:	440a      	add	r2, r1
 8006302:	4291      	cmp	r1, r2
 8006304:	f100 33ff 	add.w	r3, r0, #4294967295
 8006308:	d100      	bne.n	800630c <memcpy+0xc>
 800630a:	4770      	bx	lr
 800630c:	b510      	push	{r4, lr}
 800630e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006316:	4291      	cmp	r1, r2
 8006318:	d1f9      	bne.n	800630e <memcpy+0xe>
 800631a:	bd10      	pop	{r4, pc}

0800631c <_free_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4605      	mov	r5, r0
 8006320:	2900      	cmp	r1, #0
 8006322:	d041      	beq.n	80063a8 <_free_r+0x8c>
 8006324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006328:	1f0c      	subs	r4, r1, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	bfb8      	it	lt
 800632e:	18e4      	addlt	r4, r4, r3
 8006330:	f000 f8e0 	bl	80064f4 <__malloc_lock>
 8006334:	4a1d      	ldr	r2, [pc, #116]	@ (80063ac <_free_r+0x90>)
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	b933      	cbnz	r3, 8006348 <_free_r+0x2c>
 800633a:	6063      	str	r3, [r4, #4]
 800633c:	6014      	str	r4, [r2, #0]
 800633e:	4628      	mov	r0, r5
 8006340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006344:	f000 b8dc 	b.w	8006500 <__malloc_unlock>
 8006348:	42a3      	cmp	r3, r4
 800634a:	d908      	bls.n	800635e <_free_r+0x42>
 800634c:	6820      	ldr	r0, [r4, #0]
 800634e:	1821      	adds	r1, r4, r0
 8006350:	428b      	cmp	r3, r1
 8006352:	bf01      	itttt	eq
 8006354:	6819      	ldreq	r1, [r3, #0]
 8006356:	685b      	ldreq	r3, [r3, #4]
 8006358:	1809      	addeq	r1, r1, r0
 800635a:	6021      	streq	r1, [r4, #0]
 800635c:	e7ed      	b.n	800633a <_free_r+0x1e>
 800635e:	461a      	mov	r2, r3
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	b10b      	cbz	r3, 8006368 <_free_r+0x4c>
 8006364:	42a3      	cmp	r3, r4
 8006366:	d9fa      	bls.n	800635e <_free_r+0x42>
 8006368:	6811      	ldr	r1, [r2, #0]
 800636a:	1850      	adds	r0, r2, r1
 800636c:	42a0      	cmp	r0, r4
 800636e:	d10b      	bne.n	8006388 <_free_r+0x6c>
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	4401      	add	r1, r0
 8006374:	1850      	adds	r0, r2, r1
 8006376:	4283      	cmp	r3, r0
 8006378:	6011      	str	r1, [r2, #0]
 800637a:	d1e0      	bne.n	800633e <_free_r+0x22>
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	6053      	str	r3, [r2, #4]
 8006382:	4408      	add	r0, r1
 8006384:	6010      	str	r0, [r2, #0]
 8006386:	e7da      	b.n	800633e <_free_r+0x22>
 8006388:	d902      	bls.n	8006390 <_free_r+0x74>
 800638a:	230c      	movs	r3, #12
 800638c:	602b      	str	r3, [r5, #0]
 800638e:	e7d6      	b.n	800633e <_free_r+0x22>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	1821      	adds	r1, r4, r0
 8006394:	428b      	cmp	r3, r1
 8006396:	bf04      	itt	eq
 8006398:	6819      	ldreq	r1, [r3, #0]
 800639a:	685b      	ldreq	r3, [r3, #4]
 800639c:	6063      	str	r3, [r4, #4]
 800639e:	bf04      	itt	eq
 80063a0:	1809      	addeq	r1, r1, r0
 80063a2:	6021      	streq	r1, [r4, #0]
 80063a4:	6054      	str	r4, [r2, #4]
 80063a6:	e7ca      	b.n	800633e <_free_r+0x22>
 80063a8:	bd38      	pop	{r3, r4, r5, pc}
 80063aa:	bf00      	nop
 80063ac:	2000fc58 	.word	0x2000fc58

080063b0 <sbrk_aligned>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4e0f      	ldr	r6, [pc, #60]	@ (80063f0 <sbrk_aligned+0x40>)
 80063b4:	460c      	mov	r4, r1
 80063b6:	6831      	ldr	r1, [r6, #0]
 80063b8:	4605      	mov	r5, r0
 80063ba:	b911      	cbnz	r1, 80063c2 <sbrk_aligned+0x12>
 80063bc:	f000 fba6 	bl	8006b0c <_sbrk_r>
 80063c0:	6030      	str	r0, [r6, #0]
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	f000 fba1 	bl	8006b0c <_sbrk_r>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	d103      	bne.n	80063d6 <sbrk_aligned+0x26>
 80063ce:	f04f 34ff 	mov.w	r4, #4294967295
 80063d2:	4620      	mov	r0, r4
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	1cc4      	adds	r4, r0, #3
 80063d8:	f024 0403 	bic.w	r4, r4, #3
 80063dc:	42a0      	cmp	r0, r4
 80063de:	d0f8      	beq.n	80063d2 <sbrk_aligned+0x22>
 80063e0:	1a21      	subs	r1, r4, r0
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fb92 	bl	8006b0c <_sbrk_r>
 80063e8:	3001      	adds	r0, #1
 80063ea:	d1f2      	bne.n	80063d2 <sbrk_aligned+0x22>
 80063ec:	e7ef      	b.n	80063ce <sbrk_aligned+0x1e>
 80063ee:	bf00      	nop
 80063f0:	2000fc54 	.word	0x2000fc54

080063f4 <_malloc_r>:
 80063f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f8:	1ccd      	adds	r5, r1, #3
 80063fa:	f025 0503 	bic.w	r5, r5, #3
 80063fe:	3508      	adds	r5, #8
 8006400:	2d0c      	cmp	r5, #12
 8006402:	bf38      	it	cc
 8006404:	250c      	movcc	r5, #12
 8006406:	2d00      	cmp	r5, #0
 8006408:	4606      	mov	r6, r0
 800640a:	db01      	blt.n	8006410 <_malloc_r+0x1c>
 800640c:	42a9      	cmp	r1, r5
 800640e:	d904      	bls.n	800641a <_malloc_r+0x26>
 8006410:	230c      	movs	r3, #12
 8006412:	6033      	str	r3, [r6, #0]
 8006414:	2000      	movs	r0, #0
 8006416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800641a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064f0 <_malloc_r+0xfc>
 800641e:	f000 f869 	bl	80064f4 <__malloc_lock>
 8006422:	f8d8 3000 	ldr.w	r3, [r8]
 8006426:	461c      	mov	r4, r3
 8006428:	bb44      	cbnz	r4, 800647c <_malloc_r+0x88>
 800642a:	4629      	mov	r1, r5
 800642c:	4630      	mov	r0, r6
 800642e:	f7ff ffbf 	bl	80063b0 <sbrk_aligned>
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	4604      	mov	r4, r0
 8006436:	d158      	bne.n	80064ea <_malloc_r+0xf6>
 8006438:	f8d8 4000 	ldr.w	r4, [r8]
 800643c:	4627      	mov	r7, r4
 800643e:	2f00      	cmp	r7, #0
 8006440:	d143      	bne.n	80064ca <_malloc_r+0xd6>
 8006442:	2c00      	cmp	r4, #0
 8006444:	d04b      	beq.n	80064de <_malloc_r+0xea>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	4639      	mov	r1, r7
 800644a:	4630      	mov	r0, r6
 800644c:	eb04 0903 	add.w	r9, r4, r3
 8006450:	f000 fb5c 	bl	8006b0c <_sbrk_r>
 8006454:	4581      	cmp	r9, r0
 8006456:	d142      	bne.n	80064de <_malloc_r+0xea>
 8006458:	6821      	ldr	r1, [r4, #0]
 800645a:	1a6d      	subs	r5, r5, r1
 800645c:	4629      	mov	r1, r5
 800645e:	4630      	mov	r0, r6
 8006460:	f7ff ffa6 	bl	80063b0 <sbrk_aligned>
 8006464:	3001      	adds	r0, #1
 8006466:	d03a      	beq.n	80064de <_malloc_r+0xea>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	442b      	add	r3, r5
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	f8d8 3000 	ldr.w	r3, [r8]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	bb62      	cbnz	r2, 80064d0 <_malloc_r+0xdc>
 8006476:	f8c8 7000 	str.w	r7, [r8]
 800647a:	e00f      	b.n	800649c <_malloc_r+0xa8>
 800647c:	6822      	ldr	r2, [r4, #0]
 800647e:	1b52      	subs	r2, r2, r5
 8006480:	d420      	bmi.n	80064c4 <_malloc_r+0xd0>
 8006482:	2a0b      	cmp	r2, #11
 8006484:	d917      	bls.n	80064b6 <_malloc_r+0xc2>
 8006486:	1961      	adds	r1, r4, r5
 8006488:	42a3      	cmp	r3, r4
 800648a:	6025      	str	r5, [r4, #0]
 800648c:	bf18      	it	ne
 800648e:	6059      	strne	r1, [r3, #4]
 8006490:	6863      	ldr	r3, [r4, #4]
 8006492:	bf08      	it	eq
 8006494:	f8c8 1000 	streq.w	r1, [r8]
 8006498:	5162      	str	r2, [r4, r5]
 800649a:	604b      	str	r3, [r1, #4]
 800649c:	4630      	mov	r0, r6
 800649e:	f000 f82f 	bl	8006500 <__malloc_unlock>
 80064a2:	f104 000b 	add.w	r0, r4, #11
 80064a6:	1d23      	adds	r3, r4, #4
 80064a8:	f020 0007 	bic.w	r0, r0, #7
 80064ac:	1ac2      	subs	r2, r0, r3
 80064ae:	bf1c      	itt	ne
 80064b0:	1a1b      	subne	r3, r3, r0
 80064b2:	50a3      	strne	r3, [r4, r2]
 80064b4:	e7af      	b.n	8006416 <_malloc_r+0x22>
 80064b6:	6862      	ldr	r2, [r4, #4]
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	bf0c      	ite	eq
 80064bc:	f8c8 2000 	streq.w	r2, [r8]
 80064c0:	605a      	strne	r2, [r3, #4]
 80064c2:	e7eb      	b.n	800649c <_malloc_r+0xa8>
 80064c4:	4623      	mov	r3, r4
 80064c6:	6864      	ldr	r4, [r4, #4]
 80064c8:	e7ae      	b.n	8006428 <_malloc_r+0x34>
 80064ca:	463c      	mov	r4, r7
 80064cc:	687f      	ldr	r7, [r7, #4]
 80064ce:	e7b6      	b.n	800643e <_malloc_r+0x4a>
 80064d0:	461a      	mov	r2, r3
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	d1fb      	bne.n	80064d0 <_malloc_r+0xdc>
 80064d8:	2300      	movs	r3, #0
 80064da:	6053      	str	r3, [r2, #4]
 80064dc:	e7de      	b.n	800649c <_malloc_r+0xa8>
 80064de:	230c      	movs	r3, #12
 80064e0:	6033      	str	r3, [r6, #0]
 80064e2:	4630      	mov	r0, r6
 80064e4:	f000 f80c 	bl	8006500 <__malloc_unlock>
 80064e8:	e794      	b.n	8006414 <_malloc_r+0x20>
 80064ea:	6005      	str	r5, [r0, #0]
 80064ec:	e7d6      	b.n	800649c <_malloc_r+0xa8>
 80064ee:	bf00      	nop
 80064f0:	2000fc58 	.word	0x2000fc58

080064f4 <__malloc_lock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	@ (80064fc <__malloc_lock+0x8>)
 80064f6:	f7ff bf01 	b.w	80062fc <__retarget_lock_acquire_recursive>
 80064fa:	bf00      	nop
 80064fc:	2000fc50 	.word	0x2000fc50

08006500 <__malloc_unlock>:
 8006500:	4801      	ldr	r0, [pc, #4]	@ (8006508 <__malloc_unlock+0x8>)
 8006502:	f7ff befc 	b.w	80062fe <__retarget_lock_release_recursive>
 8006506:	bf00      	nop
 8006508:	2000fc50 	.word	0x2000fc50

0800650c <__ssputs_r>:
 800650c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	688e      	ldr	r6, [r1, #8]
 8006512:	461f      	mov	r7, r3
 8006514:	42be      	cmp	r6, r7
 8006516:	680b      	ldr	r3, [r1, #0]
 8006518:	4682      	mov	sl, r0
 800651a:	460c      	mov	r4, r1
 800651c:	4690      	mov	r8, r2
 800651e:	d82d      	bhi.n	800657c <__ssputs_r+0x70>
 8006520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006528:	d026      	beq.n	8006578 <__ssputs_r+0x6c>
 800652a:	6965      	ldr	r5, [r4, #20]
 800652c:	6909      	ldr	r1, [r1, #16]
 800652e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006532:	eba3 0901 	sub.w	r9, r3, r1
 8006536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800653a:	1c7b      	adds	r3, r7, #1
 800653c:	444b      	add	r3, r9
 800653e:	106d      	asrs	r5, r5, #1
 8006540:	429d      	cmp	r5, r3
 8006542:	bf38      	it	cc
 8006544:	461d      	movcc	r5, r3
 8006546:	0553      	lsls	r3, r2, #21
 8006548:	d527      	bpl.n	800659a <__ssputs_r+0x8e>
 800654a:	4629      	mov	r1, r5
 800654c:	f7ff ff52 	bl	80063f4 <_malloc_r>
 8006550:	4606      	mov	r6, r0
 8006552:	b360      	cbz	r0, 80065ae <__ssputs_r+0xa2>
 8006554:	6921      	ldr	r1, [r4, #16]
 8006556:	464a      	mov	r2, r9
 8006558:	f7ff fed2 	bl	8006300 <memcpy>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	6126      	str	r6, [r4, #16]
 800656a:	6165      	str	r5, [r4, #20]
 800656c:	444e      	add	r6, r9
 800656e:	eba5 0509 	sub.w	r5, r5, r9
 8006572:	6026      	str	r6, [r4, #0]
 8006574:	60a5      	str	r5, [r4, #8]
 8006576:	463e      	mov	r6, r7
 8006578:	42be      	cmp	r6, r7
 800657a:	d900      	bls.n	800657e <__ssputs_r+0x72>
 800657c:	463e      	mov	r6, r7
 800657e:	6820      	ldr	r0, [r4, #0]
 8006580:	4632      	mov	r2, r6
 8006582:	4641      	mov	r1, r8
 8006584:	f000 faa8 	bl	8006ad8 <memmove>
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	1b9b      	subs	r3, r3, r6
 800658c:	60a3      	str	r3, [r4, #8]
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	4433      	add	r3, r6
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	2000      	movs	r0, #0
 8006596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659a:	462a      	mov	r2, r5
 800659c:	f000 fac6 	bl	8006b2c <_realloc_r>
 80065a0:	4606      	mov	r6, r0
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d1e0      	bne.n	8006568 <__ssputs_r+0x5c>
 80065a6:	6921      	ldr	r1, [r4, #16]
 80065a8:	4650      	mov	r0, sl
 80065aa:	f7ff feb7 	bl	800631c <_free_r>
 80065ae:	230c      	movs	r3, #12
 80065b0:	f8ca 3000 	str.w	r3, [sl]
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	e7e9      	b.n	8006596 <__ssputs_r+0x8a>
	...

080065c4 <_svfiprintf_r>:
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	4698      	mov	r8, r3
 80065ca:	898b      	ldrh	r3, [r1, #12]
 80065cc:	061b      	lsls	r3, r3, #24
 80065ce:	b09d      	sub	sp, #116	@ 0x74
 80065d0:	4607      	mov	r7, r0
 80065d2:	460d      	mov	r5, r1
 80065d4:	4614      	mov	r4, r2
 80065d6:	d510      	bpl.n	80065fa <_svfiprintf_r+0x36>
 80065d8:	690b      	ldr	r3, [r1, #16]
 80065da:	b973      	cbnz	r3, 80065fa <_svfiprintf_r+0x36>
 80065dc:	2140      	movs	r1, #64	@ 0x40
 80065de:	f7ff ff09 	bl	80063f4 <_malloc_r>
 80065e2:	6028      	str	r0, [r5, #0]
 80065e4:	6128      	str	r0, [r5, #16]
 80065e6:	b930      	cbnz	r0, 80065f6 <_svfiprintf_r+0x32>
 80065e8:	230c      	movs	r3, #12
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	b01d      	add	sp, #116	@ 0x74
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	2340      	movs	r3, #64	@ 0x40
 80065f8:	616b      	str	r3, [r5, #20]
 80065fa:	2300      	movs	r3, #0
 80065fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80065fe:	2320      	movs	r3, #32
 8006600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006604:	f8cd 800c 	str.w	r8, [sp, #12]
 8006608:	2330      	movs	r3, #48	@ 0x30
 800660a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067a8 <_svfiprintf_r+0x1e4>
 800660e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006612:	f04f 0901 	mov.w	r9, #1
 8006616:	4623      	mov	r3, r4
 8006618:	469a      	mov	sl, r3
 800661a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800661e:	b10a      	cbz	r2, 8006624 <_svfiprintf_r+0x60>
 8006620:	2a25      	cmp	r2, #37	@ 0x25
 8006622:	d1f9      	bne.n	8006618 <_svfiprintf_r+0x54>
 8006624:	ebba 0b04 	subs.w	fp, sl, r4
 8006628:	d00b      	beq.n	8006642 <_svfiprintf_r+0x7e>
 800662a:	465b      	mov	r3, fp
 800662c:	4622      	mov	r2, r4
 800662e:	4629      	mov	r1, r5
 8006630:	4638      	mov	r0, r7
 8006632:	f7ff ff6b 	bl	800650c <__ssputs_r>
 8006636:	3001      	adds	r0, #1
 8006638:	f000 80a7 	beq.w	800678a <_svfiprintf_r+0x1c6>
 800663c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800663e:	445a      	add	r2, fp
 8006640:	9209      	str	r2, [sp, #36]	@ 0x24
 8006642:	f89a 3000 	ldrb.w	r3, [sl]
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 809f 	beq.w	800678a <_svfiprintf_r+0x1c6>
 800664c:	2300      	movs	r3, #0
 800664e:	f04f 32ff 	mov.w	r2, #4294967295
 8006652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006656:	f10a 0a01 	add.w	sl, sl, #1
 800665a:	9304      	str	r3, [sp, #16]
 800665c:	9307      	str	r3, [sp, #28]
 800665e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006662:	931a      	str	r3, [sp, #104]	@ 0x68
 8006664:	4654      	mov	r4, sl
 8006666:	2205      	movs	r2, #5
 8006668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666c:	484e      	ldr	r0, [pc, #312]	@ (80067a8 <_svfiprintf_r+0x1e4>)
 800666e:	f7f9 fdbf 	bl	80001f0 <memchr>
 8006672:	9a04      	ldr	r2, [sp, #16]
 8006674:	b9d8      	cbnz	r0, 80066ae <_svfiprintf_r+0xea>
 8006676:	06d0      	lsls	r0, r2, #27
 8006678:	bf44      	itt	mi
 800667a:	2320      	movmi	r3, #32
 800667c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006680:	0711      	lsls	r1, r2, #28
 8006682:	bf44      	itt	mi
 8006684:	232b      	movmi	r3, #43	@ 0x2b
 8006686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800668a:	f89a 3000 	ldrb.w	r3, [sl]
 800668e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006690:	d015      	beq.n	80066be <_svfiprintf_r+0xfa>
 8006692:	9a07      	ldr	r2, [sp, #28]
 8006694:	4654      	mov	r4, sl
 8006696:	2000      	movs	r0, #0
 8006698:	f04f 0c0a 	mov.w	ip, #10
 800669c:	4621      	mov	r1, r4
 800669e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a2:	3b30      	subs	r3, #48	@ 0x30
 80066a4:	2b09      	cmp	r3, #9
 80066a6:	d94b      	bls.n	8006740 <_svfiprintf_r+0x17c>
 80066a8:	b1b0      	cbz	r0, 80066d8 <_svfiprintf_r+0x114>
 80066aa:	9207      	str	r2, [sp, #28]
 80066ac:	e014      	b.n	80066d8 <_svfiprintf_r+0x114>
 80066ae:	eba0 0308 	sub.w	r3, r0, r8
 80066b2:	fa09 f303 	lsl.w	r3, r9, r3
 80066b6:	4313      	orrs	r3, r2
 80066b8:	9304      	str	r3, [sp, #16]
 80066ba:	46a2      	mov	sl, r4
 80066bc:	e7d2      	b.n	8006664 <_svfiprintf_r+0xa0>
 80066be:	9b03      	ldr	r3, [sp, #12]
 80066c0:	1d19      	adds	r1, r3, #4
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	9103      	str	r1, [sp, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bfbb      	ittet	lt
 80066ca:	425b      	neglt	r3, r3
 80066cc:	f042 0202 	orrlt.w	r2, r2, #2
 80066d0:	9307      	strge	r3, [sp, #28]
 80066d2:	9307      	strlt	r3, [sp, #28]
 80066d4:	bfb8      	it	lt
 80066d6:	9204      	strlt	r2, [sp, #16]
 80066d8:	7823      	ldrb	r3, [r4, #0]
 80066da:	2b2e      	cmp	r3, #46	@ 0x2e
 80066dc:	d10a      	bne.n	80066f4 <_svfiprintf_r+0x130>
 80066de:	7863      	ldrb	r3, [r4, #1]
 80066e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066e2:	d132      	bne.n	800674a <_svfiprintf_r+0x186>
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	1d1a      	adds	r2, r3, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	9203      	str	r2, [sp, #12]
 80066ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066f0:	3402      	adds	r4, #2
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067b8 <_svfiprintf_r+0x1f4>
 80066f8:	7821      	ldrb	r1, [r4, #0]
 80066fa:	2203      	movs	r2, #3
 80066fc:	4650      	mov	r0, sl
 80066fe:	f7f9 fd77 	bl	80001f0 <memchr>
 8006702:	b138      	cbz	r0, 8006714 <_svfiprintf_r+0x150>
 8006704:	9b04      	ldr	r3, [sp, #16]
 8006706:	eba0 000a 	sub.w	r0, r0, sl
 800670a:	2240      	movs	r2, #64	@ 0x40
 800670c:	4082      	lsls	r2, r0
 800670e:	4313      	orrs	r3, r2
 8006710:	3401      	adds	r4, #1
 8006712:	9304      	str	r3, [sp, #16]
 8006714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006718:	4824      	ldr	r0, [pc, #144]	@ (80067ac <_svfiprintf_r+0x1e8>)
 800671a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800671e:	2206      	movs	r2, #6
 8006720:	f7f9 fd66 	bl	80001f0 <memchr>
 8006724:	2800      	cmp	r0, #0
 8006726:	d036      	beq.n	8006796 <_svfiprintf_r+0x1d2>
 8006728:	4b21      	ldr	r3, [pc, #132]	@ (80067b0 <_svfiprintf_r+0x1ec>)
 800672a:	bb1b      	cbnz	r3, 8006774 <_svfiprintf_r+0x1b0>
 800672c:	9b03      	ldr	r3, [sp, #12]
 800672e:	3307      	adds	r3, #7
 8006730:	f023 0307 	bic.w	r3, r3, #7
 8006734:	3308      	adds	r3, #8
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673a:	4433      	add	r3, r6
 800673c:	9309      	str	r3, [sp, #36]	@ 0x24
 800673e:	e76a      	b.n	8006616 <_svfiprintf_r+0x52>
 8006740:	fb0c 3202 	mla	r2, ip, r2, r3
 8006744:	460c      	mov	r4, r1
 8006746:	2001      	movs	r0, #1
 8006748:	e7a8      	b.n	800669c <_svfiprintf_r+0xd8>
 800674a:	2300      	movs	r3, #0
 800674c:	3401      	adds	r4, #1
 800674e:	9305      	str	r3, [sp, #20]
 8006750:	4619      	mov	r1, r3
 8006752:	f04f 0c0a 	mov.w	ip, #10
 8006756:	4620      	mov	r0, r4
 8006758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800675c:	3a30      	subs	r2, #48	@ 0x30
 800675e:	2a09      	cmp	r2, #9
 8006760:	d903      	bls.n	800676a <_svfiprintf_r+0x1a6>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0c6      	beq.n	80066f4 <_svfiprintf_r+0x130>
 8006766:	9105      	str	r1, [sp, #20]
 8006768:	e7c4      	b.n	80066f4 <_svfiprintf_r+0x130>
 800676a:	fb0c 2101 	mla	r1, ip, r1, r2
 800676e:	4604      	mov	r4, r0
 8006770:	2301      	movs	r3, #1
 8006772:	e7f0      	b.n	8006756 <_svfiprintf_r+0x192>
 8006774:	ab03      	add	r3, sp, #12
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	462a      	mov	r2, r5
 800677a:	4b0e      	ldr	r3, [pc, #56]	@ (80067b4 <_svfiprintf_r+0x1f0>)
 800677c:	a904      	add	r1, sp, #16
 800677e:	4638      	mov	r0, r7
 8006780:	f3af 8000 	nop.w
 8006784:	1c42      	adds	r2, r0, #1
 8006786:	4606      	mov	r6, r0
 8006788:	d1d6      	bne.n	8006738 <_svfiprintf_r+0x174>
 800678a:	89ab      	ldrh	r3, [r5, #12]
 800678c:	065b      	lsls	r3, r3, #25
 800678e:	f53f af2d 	bmi.w	80065ec <_svfiprintf_r+0x28>
 8006792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006794:	e72c      	b.n	80065f0 <_svfiprintf_r+0x2c>
 8006796:	ab03      	add	r3, sp, #12
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	462a      	mov	r2, r5
 800679c:	4b05      	ldr	r3, [pc, #20]	@ (80067b4 <_svfiprintf_r+0x1f0>)
 800679e:	a904      	add	r1, sp, #16
 80067a0:	4638      	mov	r0, r7
 80067a2:	f000 f879 	bl	8006898 <_printf_i>
 80067a6:	e7ed      	b.n	8006784 <_svfiprintf_r+0x1c0>
 80067a8:	08006c54 	.word	0x08006c54
 80067ac:	08006c5e 	.word	0x08006c5e
 80067b0:	00000000 	.word	0x00000000
 80067b4:	0800650d 	.word	0x0800650d
 80067b8:	08006c5a 	.word	0x08006c5a

080067bc <_printf_common>:
 80067bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	4616      	mov	r6, r2
 80067c2:	4698      	mov	r8, r3
 80067c4:	688a      	ldr	r2, [r1, #8]
 80067c6:	690b      	ldr	r3, [r1, #16]
 80067c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067cc:	4293      	cmp	r3, r2
 80067ce:	bfb8      	it	lt
 80067d0:	4613      	movlt	r3, r2
 80067d2:	6033      	str	r3, [r6, #0]
 80067d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067d8:	4607      	mov	r7, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	b10a      	cbz	r2, 80067e2 <_printf_common+0x26>
 80067de:	3301      	adds	r3, #1
 80067e0:	6033      	str	r3, [r6, #0]
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	0699      	lsls	r1, r3, #26
 80067e6:	bf42      	ittt	mi
 80067e8:	6833      	ldrmi	r3, [r6, #0]
 80067ea:	3302      	addmi	r3, #2
 80067ec:	6033      	strmi	r3, [r6, #0]
 80067ee:	6825      	ldr	r5, [r4, #0]
 80067f0:	f015 0506 	ands.w	r5, r5, #6
 80067f4:	d106      	bne.n	8006804 <_printf_common+0x48>
 80067f6:	f104 0a19 	add.w	sl, r4, #25
 80067fa:	68e3      	ldr	r3, [r4, #12]
 80067fc:	6832      	ldr	r2, [r6, #0]
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	42ab      	cmp	r3, r5
 8006802:	dc26      	bgt.n	8006852 <_printf_common+0x96>
 8006804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	3b00      	subs	r3, #0
 800680c:	bf18      	it	ne
 800680e:	2301      	movne	r3, #1
 8006810:	0692      	lsls	r2, r2, #26
 8006812:	d42b      	bmi.n	800686c <_printf_common+0xb0>
 8006814:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006818:	4641      	mov	r1, r8
 800681a:	4638      	mov	r0, r7
 800681c:	47c8      	blx	r9
 800681e:	3001      	adds	r0, #1
 8006820:	d01e      	beq.n	8006860 <_printf_common+0xa4>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	6922      	ldr	r2, [r4, #16]
 8006826:	f003 0306 	and.w	r3, r3, #6
 800682a:	2b04      	cmp	r3, #4
 800682c:	bf02      	ittt	eq
 800682e:	68e5      	ldreq	r5, [r4, #12]
 8006830:	6833      	ldreq	r3, [r6, #0]
 8006832:	1aed      	subeq	r5, r5, r3
 8006834:	68a3      	ldr	r3, [r4, #8]
 8006836:	bf0c      	ite	eq
 8006838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800683c:	2500      	movne	r5, #0
 800683e:	4293      	cmp	r3, r2
 8006840:	bfc4      	itt	gt
 8006842:	1a9b      	subgt	r3, r3, r2
 8006844:	18ed      	addgt	r5, r5, r3
 8006846:	2600      	movs	r6, #0
 8006848:	341a      	adds	r4, #26
 800684a:	42b5      	cmp	r5, r6
 800684c:	d11a      	bne.n	8006884 <_printf_common+0xc8>
 800684e:	2000      	movs	r0, #0
 8006850:	e008      	b.n	8006864 <_printf_common+0xa8>
 8006852:	2301      	movs	r3, #1
 8006854:	4652      	mov	r2, sl
 8006856:	4641      	mov	r1, r8
 8006858:	4638      	mov	r0, r7
 800685a:	47c8      	blx	r9
 800685c:	3001      	adds	r0, #1
 800685e:	d103      	bne.n	8006868 <_printf_common+0xac>
 8006860:	f04f 30ff 	mov.w	r0, #4294967295
 8006864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006868:	3501      	adds	r5, #1
 800686a:	e7c6      	b.n	80067fa <_printf_common+0x3e>
 800686c:	18e1      	adds	r1, r4, r3
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	2030      	movs	r0, #48	@ 0x30
 8006872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006876:	4422      	add	r2, r4
 8006878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800687c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006880:	3302      	adds	r3, #2
 8006882:	e7c7      	b.n	8006814 <_printf_common+0x58>
 8006884:	2301      	movs	r3, #1
 8006886:	4622      	mov	r2, r4
 8006888:	4641      	mov	r1, r8
 800688a:	4638      	mov	r0, r7
 800688c:	47c8      	blx	r9
 800688e:	3001      	adds	r0, #1
 8006890:	d0e6      	beq.n	8006860 <_printf_common+0xa4>
 8006892:	3601      	adds	r6, #1
 8006894:	e7d9      	b.n	800684a <_printf_common+0x8e>
	...

08006898 <_printf_i>:
 8006898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	7e0f      	ldrb	r7, [r1, #24]
 800689e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068a0:	2f78      	cmp	r7, #120	@ 0x78
 80068a2:	4691      	mov	r9, r2
 80068a4:	4680      	mov	r8, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	469a      	mov	sl, r3
 80068aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068ae:	d807      	bhi.n	80068c0 <_printf_i+0x28>
 80068b0:	2f62      	cmp	r7, #98	@ 0x62
 80068b2:	d80a      	bhi.n	80068ca <_printf_i+0x32>
 80068b4:	2f00      	cmp	r7, #0
 80068b6:	f000 80d2 	beq.w	8006a5e <_printf_i+0x1c6>
 80068ba:	2f58      	cmp	r7, #88	@ 0x58
 80068bc:	f000 80b9 	beq.w	8006a32 <_printf_i+0x19a>
 80068c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068c8:	e03a      	b.n	8006940 <_printf_i+0xa8>
 80068ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068ce:	2b15      	cmp	r3, #21
 80068d0:	d8f6      	bhi.n	80068c0 <_printf_i+0x28>
 80068d2:	a101      	add	r1, pc, #4	@ (adr r1, 80068d8 <_printf_i+0x40>)
 80068d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006945 	.word	0x08006945
 80068e0:	080068c1 	.word	0x080068c1
 80068e4:	080068c1 	.word	0x080068c1
 80068e8:	080068c1 	.word	0x080068c1
 80068ec:	080068c1 	.word	0x080068c1
 80068f0:	08006945 	.word	0x08006945
 80068f4:	080068c1 	.word	0x080068c1
 80068f8:	080068c1 	.word	0x080068c1
 80068fc:	080068c1 	.word	0x080068c1
 8006900:	080068c1 	.word	0x080068c1
 8006904:	08006a45 	.word	0x08006a45
 8006908:	0800696f 	.word	0x0800696f
 800690c:	080069ff 	.word	0x080069ff
 8006910:	080068c1 	.word	0x080068c1
 8006914:	080068c1 	.word	0x080068c1
 8006918:	08006a67 	.word	0x08006a67
 800691c:	080068c1 	.word	0x080068c1
 8006920:	0800696f 	.word	0x0800696f
 8006924:	080068c1 	.word	0x080068c1
 8006928:	080068c1 	.word	0x080068c1
 800692c:	08006a07 	.word	0x08006a07
 8006930:	6833      	ldr	r3, [r6, #0]
 8006932:	1d1a      	adds	r2, r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6032      	str	r2, [r6, #0]
 8006938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800693c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006940:	2301      	movs	r3, #1
 8006942:	e09d      	b.n	8006a80 <_printf_i+0x1e8>
 8006944:	6833      	ldr	r3, [r6, #0]
 8006946:	6820      	ldr	r0, [r4, #0]
 8006948:	1d19      	adds	r1, r3, #4
 800694a:	6031      	str	r1, [r6, #0]
 800694c:	0606      	lsls	r6, r0, #24
 800694e:	d501      	bpl.n	8006954 <_printf_i+0xbc>
 8006950:	681d      	ldr	r5, [r3, #0]
 8006952:	e003      	b.n	800695c <_printf_i+0xc4>
 8006954:	0645      	lsls	r5, r0, #25
 8006956:	d5fb      	bpl.n	8006950 <_printf_i+0xb8>
 8006958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800695c:	2d00      	cmp	r5, #0
 800695e:	da03      	bge.n	8006968 <_printf_i+0xd0>
 8006960:	232d      	movs	r3, #45	@ 0x2d
 8006962:	426d      	negs	r5, r5
 8006964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006968:	4859      	ldr	r0, [pc, #356]	@ (8006ad0 <_printf_i+0x238>)
 800696a:	230a      	movs	r3, #10
 800696c:	e011      	b.n	8006992 <_printf_i+0xfa>
 800696e:	6821      	ldr	r1, [r4, #0]
 8006970:	6833      	ldr	r3, [r6, #0]
 8006972:	0608      	lsls	r0, r1, #24
 8006974:	f853 5b04 	ldr.w	r5, [r3], #4
 8006978:	d402      	bmi.n	8006980 <_printf_i+0xe8>
 800697a:	0649      	lsls	r1, r1, #25
 800697c:	bf48      	it	mi
 800697e:	b2ad      	uxthmi	r5, r5
 8006980:	2f6f      	cmp	r7, #111	@ 0x6f
 8006982:	4853      	ldr	r0, [pc, #332]	@ (8006ad0 <_printf_i+0x238>)
 8006984:	6033      	str	r3, [r6, #0]
 8006986:	bf14      	ite	ne
 8006988:	230a      	movne	r3, #10
 800698a:	2308      	moveq	r3, #8
 800698c:	2100      	movs	r1, #0
 800698e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006992:	6866      	ldr	r6, [r4, #4]
 8006994:	60a6      	str	r6, [r4, #8]
 8006996:	2e00      	cmp	r6, #0
 8006998:	bfa2      	ittt	ge
 800699a:	6821      	ldrge	r1, [r4, #0]
 800699c:	f021 0104 	bicge.w	r1, r1, #4
 80069a0:	6021      	strge	r1, [r4, #0]
 80069a2:	b90d      	cbnz	r5, 80069a8 <_printf_i+0x110>
 80069a4:	2e00      	cmp	r6, #0
 80069a6:	d04b      	beq.n	8006a40 <_printf_i+0x1a8>
 80069a8:	4616      	mov	r6, r2
 80069aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ae:	fb03 5711 	mls	r7, r3, r1, r5
 80069b2:	5dc7      	ldrb	r7, [r0, r7]
 80069b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069b8:	462f      	mov	r7, r5
 80069ba:	42bb      	cmp	r3, r7
 80069bc:	460d      	mov	r5, r1
 80069be:	d9f4      	bls.n	80069aa <_printf_i+0x112>
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d10b      	bne.n	80069dc <_printf_i+0x144>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	07df      	lsls	r7, r3, #31
 80069c8:	d508      	bpl.n	80069dc <_printf_i+0x144>
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	6861      	ldr	r1, [r4, #4]
 80069ce:	4299      	cmp	r1, r3
 80069d0:	bfde      	ittt	le
 80069d2:	2330      	movle	r3, #48	@ 0x30
 80069d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069dc:	1b92      	subs	r2, r2, r6
 80069de:	6122      	str	r2, [r4, #16]
 80069e0:	f8cd a000 	str.w	sl, [sp]
 80069e4:	464b      	mov	r3, r9
 80069e6:	aa03      	add	r2, sp, #12
 80069e8:	4621      	mov	r1, r4
 80069ea:	4640      	mov	r0, r8
 80069ec:	f7ff fee6 	bl	80067bc <_printf_common>
 80069f0:	3001      	adds	r0, #1
 80069f2:	d14a      	bne.n	8006a8a <_printf_i+0x1f2>
 80069f4:	f04f 30ff 	mov.w	r0, #4294967295
 80069f8:	b004      	add	sp, #16
 80069fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	f043 0320 	orr.w	r3, r3, #32
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	4833      	ldr	r0, [pc, #204]	@ (8006ad4 <_printf_i+0x23c>)
 8006a08:	2778      	movs	r7, #120	@ 0x78
 8006a0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	6831      	ldr	r1, [r6, #0]
 8006a12:	061f      	lsls	r7, r3, #24
 8006a14:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a18:	d402      	bmi.n	8006a20 <_printf_i+0x188>
 8006a1a:	065f      	lsls	r7, r3, #25
 8006a1c:	bf48      	it	mi
 8006a1e:	b2ad      	uxthmi	r5, r5
 8006a20:	6031      	str	r1, [r6, #0]
 8006a22:	07d9      	lsls	r1, r3, #31
 8006a24:	bf44      	itt	mi
 8006a26:	f043 0320 	orrmi.w	r3, r3, #32
 8006a2a:	6023      	strmi	r3, [r4, #0]
 8006a2c:	b11d      	cbz	r5, 8006a36 <_printf_i+0x19e>
 8006a2e:	2310      	movs	r3, #16
 8006a30:	e7ac      	b.n	800698c <_printf_i+0xf4>
 8006a32:	4827      	ldr	r0, [pc, #156]	@ (8006ad0 <_printf_i+0x238>)
 8006a34:	e7e9      	b.n	8006a0a <_printf_i+0x172>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f023 0320 	bic.w	r3, r3, #32
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	e7f6      	b.n	8006a2e <_printf_i+0x196>
 8006a40:	4616      	mov	r6, r2
 8006a42:	e7bd      	b.n	80069c0 <_printf_i+0x128>
 8006a44:	6833      	ldr	r3, [r6, #0]
 8006a46:	6825      	ldr	r5, [r4, #0]
 8006a48:	6961      	ldr	r1, [r4, #20]
 8006a4a:	1d18      	adds	r0, r3, #4
 8006a4c:	6030      	str	r0, [r6, #0]
 8006a4e:	062e      	lsls	r6, r5, #24
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	d501      	bpl.n	8006a58 <_printf_i+0x1c0>
 8006a54:	6019      	str	r1, [r3, #0]
 8006a56:	e002      	b.n	8006a5e <_printf_i+0x1c6>
 8006a58:	0668      	lsls	r0, r5, #25
 8006a5a:	d5fb      	bpl.n	8006a54 <_printf_i+0x1bc>
 8006a5c:	8019      	strh	r1, [r3, #0]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6123      	str	r3, [r4, #16]
 8006a62:	4616      	mov	r6, r2
 8006a64:	e7bc      	b.n	80069e0 <_printf_i+0x148>
 8006a66:	6833      	ldr	r3, [r6, #0]
 8006a68:	1d1a      	adds	r2, r3, #4
 8006a6a:	6032      	str	r2, [r6, #0]
 8006a6c:	681e      	ldr	r6, [r3, #0]
 8006a6e:	6862      	ldr	r2, [r4, #4]
 8006a70:	2100      	movs	r1, #0
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7f9 fbbc 	bl	80001f0 <memchr>
 8006a78:	b108      	cbz	r0, 8006a7e <_printf_i+0x1e6>
 8006a7a:	1b80      	subs	r0, r0, r6
 8006a7c:	6060      	str	r0, [r4, #4]
 8006a7e:	6863      	ldr	r3, [r4, #4]
 8006a80:	6123      	str	r3, [r4, #16]
 8006a82:	2300      	movs	r3, #0
 8006a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a88:	e7aa      	b.n	80069e0 <_printf_i+0x148>
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	4649      	mov	r1, r9
 8006a90:	4640      	mov	r0, r8
 8006a92:	47d0      	blx	sl
 8006a94:	3001      	adds	r0, #1
 8006a96:	d0ad      	beq.n	80069f4 <_printf_i+0x15c>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	079b      	lsls	r3, r3, #30
 8006a9c:	d413      	bmi.n	8006ac6 <_printf_i+0x22e>
 8006a9e:	68e0      	ldr	r0, [r4, #12]
 8006aa0:	9b03      	ldr	r3, [sp, #12]
 8006aa2:	4298      	cmp	r0, r3
 8006aa4:	bfb8      	it	lt
 8006aa6:	4618      	movlt	r0, r3
 8006aa8:	e7a6      	b.n	80069f8 <_printf_i+0x160>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4632      	mov	r2, r6
 8006aae:	4649      	mov	r1, r9
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	47d0      	blx	sl
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d09d      	beq.n	80069f4 <_printf_i+0x15c>
 8006ab8:	3501      	adds	r5, #1
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	9903      	ldr	r1, [sp, #12]
 8006abe:	1a5b      	subs	r3, r3, r1
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	dcf2      	bgt.n	8006aaa <_printf_i+0x212>
 8006ac4:	e7eb      	b.n	8006a9e <_printf_i+0x206>
 8006ac6:	2500      	movs	r5, #0
 8006ac8:	f104 0619 	add.w	r6, r4, #25
 8006acc:	e7f5      	b.n	8006aba <_printf_i+0x222>
 8006ace:	bf00      	nop
 8006ad0:	08006c65 	.word	0x08006c65
 8006ad4:	08006c76 	.word	0x08006c76

08006ad8 <memmove>:
 8006ad8:	4288      	cmp	r0, r1
 8006ada:	b510      	push	{r4, lr}
 8006adc:	eb01 0402 	add.w	r4, r1, r2
 8006ae0:	d902      	bls.n	8006ae8 <memmove+0x10>
 8006ae2:	4284      	cmp	r4, r0
 8006ae4:	4623      	mov	r3, r4
 8006ae6:	d807      	bhi.n	8006af8 <memmove+0x20>
 8006ae8:	1e43      	subs	r3, r0, #1
 8006aea:	42a1      	cmp	r1, r4
 8006aec:	d008      	beq.n	8006b00 <memmove+0x28>
 8006aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006af6:	e7f8      	b.n	8006aea <memmove+0x12>
 8006af8:	4402      	add	r2, r0
 8006afa:	4601      	mov	r1, r0
 8006afc:	428a      	cmp	r2, r1
 8006afe:	d100      	bne.n	8006b02 <memmove+0x2a>
 8006b00:	bd10      	pop	{r4, pc}
 8006b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b0a:	e7f7      	b.n	8006afc <memmove+0x24>

08006b0c <_sbrk_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4d06      	ldr	r5, [pc, #24]	@ (8006b28 <_sbrk_r+0x1c>)
 8006b10:	2300      	movs	r3, #0
 8006b12:	4604      	mov	r4, r0
 8006b14:	4608      	mov	r0, r1
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	f000 f83e 	bl	8006b98 <_sbrk>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d102      	bne.n	8006b26 <_sbrk_r+0x1a>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b103      	cbz	r3, 8006b26 <_sbrk_r+0x1a>
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	2000fc4c 	.word	0x2000fc4c

08006b2c <_realloc_r>:
 8006b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b30:	4680      	mov	r8, r0
 8006b32:	4615      	mov	r5, r2
 8006b34:	460c      	mov	r4, r1
 8006b36:	b921      	cbnz	r1, 8006b42 <_realloc_r+0x16>
 8006b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	f7ff bc59 	b.w	80063f4 <_malloc_r>
 8006b42:	b92a      	cbnz	r2, 8006b50 <_realloc_r+0x24>
 8006b44:	f7ff fbea 	bl	800631c <_free_r>
 8006b48:	2400      	movs	r4, #0
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b50:	f000 f81a 	bl	8006b88 <_malloc_usable_size_r>
 8006b54:	4285      	cmp	r5, r0
 8006b56:	4606      	mov	r6, r0
 8006b58:	d802      	bhi.n	8006b60 <_realloc_r+0x34>
 8006b5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b5e:	d8f4      	bhi.n	8006b4a <_realloc_r+0x1e>
 8006b60:	4629      	mov	r1, r5
 8006b62:	4640      	mov	r0, r8
 8006b64:	f7ff fc46 	bl	80063f4 <_malloc_r>
 8006b68:	4607      	mov	r7, r0
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d0ec      	beq.n	8006b48 <_realloc_r+0x1c>
 8006b6e:	42b5      	cmp	r5, r6
 8006b70:	462a      	mov	r2, r5
 8006b72:	4621      	mov	r1, r4
 8006b74:	bf28      	it	cs
 8006b76:	4632      	movcs	r2, r6
 8006b78:	f7ff fbc2 	bl	8006300 <memcpy>
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f7ff fbcc 	bl	800631c <_free_r>
 8006b84:	463c      	mov	r4, r7
 8006b86:	e7e0      	b.n	8006b4a <_realloc_r+0x1e>

08006b88 <_malloc_usable_size_r>:
 8006b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8c:	1f18      	subs	r0, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bfbc      	itt	lt
 8006b92:	580b      	ldrlt	r3, [r1, r0]
 8006b94:	18c0      	addlt	r0, r0, r3
 8006b96:	4770      	bx	lr

08006b98 <_sbrk>:
 8006b98:	4a04      	ldr	r2, [pc, #16]	@ (8006bac <_sbrk+0x14>)
 8006b9a:	6811      	ldr	r1, [r2, #0]
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	b909      	cbnz	r1, 8006ba4 <_sbrk+0xc>
 8006ba0:	4903      	ldr	r1, [pc, #12]	@ (8006bb0 <_sbrk+0x18>)
 8006ba2:	6011      	str	r1, [r2, #0]
 8006ba4:	6810      	ldr	r0, [r2, #0]
 8006ba6:	4403      	add	r3, r0
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	4770      	bx	lr
 8006bac:	2000fc5c 	.word	0x2000fc5c
 8006bb0:	2000fc60 	.word	0x2000fc60

08006bb4 <_init>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	bf00      	nop
 8006bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bba:	bc08      	pop	{r3}
 8006bbc:	469e      	mov	lr, r3
 8006bbe:	4770      	bx	lr

08006bc0 <_fini>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr

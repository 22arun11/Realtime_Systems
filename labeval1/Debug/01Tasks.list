
01Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004678  08004678  00005678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b0  080046b0  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080046b0  080046b0  000056b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b8  080046b8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b8  080046b8  000056b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046bc  080046bc  000056bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080046c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fa50  20000010  080046d0  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  2000fa60  080046d0  00006a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efe3  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e0  00000000  00000000  00015023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00017908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be7  00000000  00000000  00018880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017960  00000000  00000000  00019467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ee  00000000  00000000  00030dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000978df  00000000  00000000  000421b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004038  00000000  00000000  000d9ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ddb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004660 	.word	0x08004660

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004660 	.word	0x08004660

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */
    HAL_Init();
 80004d6:	f000 fa67 	bl	80009a8 <HAL_Init>
    SystemClock_Config();
 80004da:	f000 f817 	bl	800050c <SystemClock_Config>
    MX_GPIO_Init();
 80004de:	f000 f875 	bl	80005cc <MX_GPIO_Init>
    MX_ADC1_Init();
 80004e2:	f000 f8c5 	bl	8000670 <MX_ADC1_Init>

    /* Create the potentiometer task */
    xTaskCreate(potentiometer_task, "PotTask", TASK_STACK_SIZE, NULL, 1, NULL);
 80004e6:	2300      	movs	r3, #0
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	4904      	ldr	r1, [pc, #16]	@ (8000504 <main+0x34>)
 80004f4:	4804      	ldr	r0, [pc, #16]	@ (8000508 <main+0x38>)
 80004f6:	f002 fa65 	bl	80029c4 <xTaskCreate>

    /* Start scheduler */
    vTaskStartScheduler();
 80004fa:	f002 fc05 	bl	8002d08 <vTaskStartScheduler>

    while (1)
 80004fe:	bf00      	nop
 8000500:	e7fd      	b.n	80004fe <main+0x2e>
 8000502:	bf00      	nop
 8000504:	08004678 	.word	0x08004678
 8000508:	08000739 	.word	0x08000739

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	@ 0x50
 8000510:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	@ 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 f866 	bl	80045ec <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <SystemClock_Config+0xb8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000538:	4a22      	ldr	r2, [pc, #136]	@ (80005c4 <SystemClock_Config+0xb8>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000540:	4b20      	ldr	r3, [pc, #128]	@ (80005c4 <SystemClock_Config+0xb8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <SystemClock_Config+0xbc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000558:	4a1b      	ldr	r2, [pc, #108]	@ (80005c8 <SystemClock_Config+0xbc>)
 800055a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <SystemClock_Config+0xbc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f000 ffa3 	bl	80014cc <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x84>
    {
        Error_Handler();
 800058c:	f000 f900 	bl	8000790 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fa06 	bl	80019bc <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xae>
    {
        Error_Handler();
 80005b6:	f000 f8eb 	bl	8000790 <Error_Handler>
    }
}
 80005ba:	bf00      	nop
 80005bc:	3750      	adds	r7, #80	@ 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <MX_GPIO_Init+0x98>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000664 <MX_GPIO_Init+0x98>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <MX_GPIO_Init+0x98>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_GPIO_Init+0x98>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a17      	ldr	r2, [pc, #92]	@ (8000664 <MX_GPIO_Init+0x98>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_GPIO_Init+0x98>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

    /* Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000620:	4811      	ldr	r0, [pc, #68]	@ (8000668 <MX_GPIO_Init+0x9c>)
 8000622:	f000 ff39 	bl	8001498 <HAL_GPIO_WritePin>

    /* Configure GPIO pin : PC13 (On-board LED) */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	480a      	ldr	r0, [pc, #40]	@ (8000668 <MX_GPIO_Init+0x9c>)
 8000640:	f000 fda6 	bl	8001190 <HAL_GPIO_Init>

    /* Configure GPIO pin : PA0 (A0 - Potentiometer) */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000644:	2301      	movs	r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000648:	2303      	movs	r3, #3
 800064a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4619      	mov	r1, r3
 8000656:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_GPIO_Init+0xa0>)
 8000658:	f000 fd9a 	bl	8001190 <HAL_GPIO_Init>
}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40020800 	.word	0x40020800
 800066c:	40020000 	.word	0x40020000

08000670 <MX_ADC1_Init>:

/* USER CODE BEGIN 4 */

static void MX_ADC1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]

    /* Enable ADC1 clock */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <MX_ADC1_Init+0xb8>)
 800068a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068c:	4a26      	ldr	r2, [pc, #152]	@ (8000728 <MX_ADC1_Init+0xb8>)
 800068e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000692:	6453      	str	r3, [r2, #68]	@ 0x44
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <MX_ADC1_Init+0xb8>)
 8000696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

    /* Configure ADC1 peripheral */
    hadc1.Instance = ADC1;
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006a2:	4a23      	ldr	r2, [pc, #140]	@ (8000730 <MX_ADC1_Init+0xc0>)
 80006a4:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ac:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = DISABLE;  // Disable scan conversion mode
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	615a      	str	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80006c6:	4b19      	ldr	r3, [pc, #100]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hadc1.Init.NbrOfConversion = 1;
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	621a      	str	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006da:	4a16      	ldr	r2, [pc, #88]	@ (8000734 <MX_ADC1_Init+0xc4>)
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]

    /* Initialize ADC */
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ea:	4810      	ldr	r0, [pc, #64]	@ (800072c <MX_ADC1_Init+0xbc>)
 80006ec:	f000 f98a 	bl	8000a04 <HAL_ADC_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x8a>
    {
        Error_Handler();
 80006f6:	f000 f84b 	bl	8000790 <Error_Handler>
    }

    /* Configure ADC channel */
    sConfig.Channel = ADC_CHANNEL_0;  // Adjust the channel if needed
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;  // Use an integer value if constant is not available
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4619      	mov	r1, r3
 8000710:	4806      	ldr	r0, [pc, #24]	@ (800072c <MX_ADC1_Init+0xbc>)
 8000712:	f000 fa63 	bl	8000bdc <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0xb0>
    {
        Error_Handler();
 800071c:	f000 f838 	bl	8000790 <Error_Handler>
    }
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	2000002c 	.word	0x2000002c
 8000730:	40012000 	.word	0x40012000
 8000734:	0f000001 	.word	0x0f000001

08000738 <potentiometer_task>:

static void potentiometer_task(void* parameters)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    uint32_t adcValue;
    uint32_t ledThreshold = 2048; // Midpoint value for 12-bit ADC
 8000740:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000744:	60fb      	str	r3, [r7, #12]

    while (1)
    {
        // Start ADC Conversion
        HAL_ADC_Start(&hadc1);
 8000746:	4810      	ldr	r0, [pc, #64]	@ (8000788 <potentiometer_task+0x50>)
 8000748:	f000 f990 	bl	8000a6c <HAL_ADC_Start>
        // Poll for end of conversion
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800074c:	f04f 31ff 	mov.w	r1, #4294967295
 8000750:	480d      	ldr	r0, [pc, #52]	@ (8000788 <potentiometer_task+0x50>)
 8000752:	f000 f9f7 	bl	8000b44 <HAL_ADC_PollForConversion>
        // Get the ADC value
        adcValue = HAL_ADC_GetValue(&hadc1);
 8000756:	480c      	ldr	r0, [pc, #48]	@ (8000788 <potentiometer_task+0x50>)
 8000758:	f000 fa33 	bl	8000bc2 <HAL_ADC_GetValue>
 800075c:	60b8      	str	r0, [r7, #8]

        // Turn on LED if ADC value is above the threshold
        if (adcValue > ledThreshold)
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	429a      	cmp	r2, r3
 8000764:	d906      	bls.n	8000774 <potentiometer_task+0x3c>
        {
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn on LED
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800076c:	4807      	ldr	r0, [pc, #28]	@ (800078c <potentiometer_task+0x54>)
 800076e:	f000 fe93 	bl	8001498 <HAL_GPIO_WritePin>
 8000772:	e005      	b.n	8000780 <potentiometer_task+0x48>
        }
        // Turn off LED if ADC value is below or equal to the threshold
        else
        {
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // Turn off LED
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800077a:	4804      	ldr	r0, [pc, #16]	@ (800078c <potentiometer_task+0x54>)
 800077c:	f000 fe8c 	bl	8001498 <HAL_GPIO_WritePin>
        }

        // Delay for a while
        vTaskDelay(pdMS_TO_TICKS(100));
 8000780:	2064      	movs	r0, #100	@ 0x64
 8000782:	f002 fa8b 	bl	8002c9c <vTaskDelay>
        HAL_ADC_Start(&hadc1);
 8000786:	e7de      	b.n	8000746 <potentiometer_task+0xe>
 8000788:	2000002c 	.word	0x2000002c
 800078c:	40020800 	.word	0x40020800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
    __disable_irq();
    while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <Error_Handler+0x8>

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007aa:	4a0f      	ldr	r2, [pc, #60]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	@ 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	4b33      	ldr	r3, [pc, #204]	@ (80008d0 <HAL_InitTick+0xe4>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	4a32      	ldr	r2, [pc, #200]	@ (80008d0 <HAL_InitTick+0xe4>)
 8000806:	f043 0308 	orr.w	r3, r3, #8
 800080a:	6413      	str	r3, [r2, #64]	@ 0x40
 800080c:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <HAL_InitTick+0xe4>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000810:	f003 0308 	and.w	r3, r3, #8
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000818:	f107 0210 	add.w	r2, r7, #16
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fa96 	bl	8001d54 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800082c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800082e:	2b00      	cmp	r3, #0
 8000830:	d103      	bne.n	800083a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000832:	f001 fa7b 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8000836:	6378      	str	r0, [r7, #52]	@ 0x34
 8000838:	e004      	b.n	8000844 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800083a:	f001 fa77 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 800083e:	4603      	mov	r3, r0
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000846:	4a23      	ldr	r2, [pc, #140]	@ (80008d4 <HAL_InitTick+0xe8>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	0c9b      	lsrs	r3, r3, #18
 800084e:	3b01      	subs	r3, #1
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <HAL_InitTick+0xec>)
 8000854:	4a21      	ldr	r2, [pc, #132]	@ (80008dc <HAL_InitTick+0xf0>)
 8000856:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <HAL_InitTick+0xec>)
 800085a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800085e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000860:	4a1d      	ldr	r2, [pc, #116]	@ (80008d8 <HAL_InitTick+0xec>)
 8000862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000864:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <HAL_InitTick+0xec>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <HAL_InitTick+0xec>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <HAL_InitTick+0xec>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000878:	4817      	ldr	r0, [pc, #92]	@ (80008d8 <HAL_InitTick+0xec>)
 800087a:	f001 fa9d 	bl	8001db8 <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000884:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000888:	2b00      	cmp	r3, #0
 800088a:	d11b      	bne.n	80008c4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800088c:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <HAL_InitTick+0xec>)
 800088e:	f001 faed 	bl	8001e6c <HAL_TIM_Base_Start_IT>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000898:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800089c:	2b00      	cmp	r3, #0
 800089e:	d111      	bne.n	80008c4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80008a0:	2032      	movs	r0, #50	@ 0x32
 80008a2:	f000 fc67 	bl	8001174 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d808      	bhi.n	80008be <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	2032      	movs	r0, #50	@ 0x32
 80008b2:	f000 fc43 	bl	800113c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <HAL_InitTick+0xf4>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	e002      	b.n	80008c4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3738      	adds	r7, #56	@ 0x38
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	431bde83 	.word	0x431bde83
 80008d8:	20000070 	.word	0x20000070
 80008dc:	40000c00 	.word	0x40000c00
 80008e0:	20000004 	.word	0x20000004

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <NMI_Handler+0x4>

080008ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <MemManage_Handler+0x4>

080008fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <UsageFault_Handler+0x4>

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <TIM5_IRQHandler+0x10>)
 8000922:	f001 fb05 	bl	8001f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000070 	.word	0x20000070

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	@ (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800098c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000958:	f7ff ffea 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	@ (8000994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	@ (8000998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	@ (80009a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000982:	f003 fe3b 	bl	80045fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fda3 	bl	80004d0 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000998:	080046c0 	.word	0x080046c0
  ldr r2, =_sbss
 800099c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009a0:	2000fa60 	.word	0x2000fa60

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <HAL_Init+0x40>)
 80009b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_Init+0x40>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <HAL_Init+0x40>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 fba8 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	200f      	movs	r0, #15
 80009d8:	f7ff ff08 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fede 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023c00 	.word	0x40023c00

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	200000b8 	.word	0x200000b8

08000a04 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e01b      	b.n	8000a4e <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d102      	bne.n	8000a28 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f817 	bl	8000a56 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f9d7 	bl	8000de4 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d101      	bne.n	8000a86 <HAL_ADC_Start+0x1a>
 8000a82:	2302      	movs	r3, #2
 8000a84:	e053      	b.n	8000b2e <HAL_ADC_Start+0xc2>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b22      	cmp	r3, #34	@ 0x22
 8000a98:	d104      	bne.n	8000aa4 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2232      	movs	r2, #50	@ 0x32
 8000a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000aa2:	e003      	b.n	8000aac <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2212      	movs	r2, #18
 8000aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d010      	beq.n	8000adc <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	689a      	ldr	r2, [r3, #8]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f042 0201 	orr.w	r2, r2, #1
 8000ac8:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilazation */
    for(; i <= 540; i++)
 8000aca:	e003      	b.n	8000ad4 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8000acc:	bf00      	nop
    for(; i <= 540; i++)
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	81fb      	strh	r3, [r7, #14]
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	f5b3 7f07 	cmp.w	r3, #540	@ 0x21c
 8000ada:	d9f7      	bls.n	8000acc <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <HAL_ADC_Start+0xd0>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 031f 	and.w	r3, r3, #31
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10c      	bne.n	8000b02 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d119      	bne.n	8000b24 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	e010      	b.n	8000b24 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <HAL_ADC_Start+0xd4>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d10b      	bne.n	8000b24 <HAL_ADC_Start+0xb8>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d107      	bne.n	8000b24 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000b22:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40012300 	.word	0x40012300
 8000b40:	40012000 	.word	0x40012000

08000b44 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000b52:	f7ff ff4b 	bl	80009ec <HAL_GetTick>
 8000b56:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000b58:	e018      	b.n	8000b8c <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d014      	beq.n	8000b8c <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d007      	beq.n	8000b78 <HAL_ADC_PollForConversion+0x34>
 8000b68:	f7ff ff40 	bl	80009ec <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d209      	bcs.n	8000b8c <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e016      	b.n	8000bba <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d1df      	bne.n	8000b5a <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b25      	cmp	r3, #37	@ 0x25
 8000ba4:	d104      	bne.n	8000bb0 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2235      	movs	r2, #53	@ 0x35
 8000baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000bae:	e003      	b.n	8000bb8 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2215      	movs	r2, #21
 8000bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d101      	bne.n	8000bf4 <HAL_ADC_ConfigChannel+0x18>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e0ed      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x1f4>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b09      	cmp	r3, #9
 8000c02:	d925      	bls.n	8000c50 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~__HAL_ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68d9      	ldr	r1, [r3, #12]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	3b1e      	subs	r3, #30
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43da      	mvns	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	400a      	ands	r2, r1
 8000c28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= __HAL_ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68d9      	ldr	r1, [r3, #12]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4403      	add	r3, r0
 8000c42:	3b1e      	subs	r3, #30
 8000c44:	409a      	lsls	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	e022      	b.n	8000c96 <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~__HAL_ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6919      	ldr	r1, [r3, #16]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	2207      	movs	r2, #7
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	400a      	ands	r2, r1
 8000c72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= __HAL_ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6919      	ldr	r1, [r3, #16]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	4603      	mov	r3, r0
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4403      	add	r3, r0
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d824      	bhi.n	8000ce8 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~__HAL_ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	3b05      	subs	r3, #5
 8000cb0:	221f      	movs	r2, #31
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= __HAL_ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3b05      	subs	r3, #5
 8000cda:	fa00 f203 	lsl.w	r2, r0, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ce6:	e04c      	b.n	8000d82 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b0c      	cmp	r3, #12
 8000cee:	d824      	bhi.n	8000d3a <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~__HAL_ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b23      	subs	r3, #35	@ 0x23
 8000d02:	221f      	movs	r2, #31
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	400a      	ands	r2, r1
 8000d10:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= __HAL_ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	3b23      	subs	r3, #35	@ 0x23
 8000d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d38:	e023      	b.n	8000d82 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~__HAL_ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b41      	subs	r3, #65	@ 0x41
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	400a      	ands	r2, r1
 8000d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= __HAL_ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	3b41      	subs	r3, #65	@ 0x41
 8000d76:	fa00 f203 	lsl.w	r2, r0, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a15      	ldr	r2, [pc, #84]	@ (8000ddc <HAL_ADC_ConfigChannel+0x200>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d109      	bne.n	8000da0 <HAL_ADC_ConfigChannel+0x1c4>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b12      	cmp	r3, #18
 8000d92:	d105      	bne.n	8000da0 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_ADC_ConfigChannel+0x204>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4a11      	ldr	r2, [pc, #68]	@ (8000de0 <HAL_ADC_ConfigChannel+0x204>)
 8000d9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d9e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <HAL_ADC_ConfigChannel+0x200>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10d      	bne.n	8000dc6 <HAL_ADC_ConfigChannel+0x1ea>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b10      	cmp	r3, #16
 8000db0:	d003      	beq.n	8000dba <HAL_ADC_ConfigChannel+0x1de>
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b11      	cmp	r3, #17
 8000db8:	d105      	bne.n	8000dc6 <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_ADC_ConfigChannel+0x204>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_ADC_ConfigChannel+0x204>)
 8000dc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000dc4:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40012000 	.word	0x40012000
 8000de0:	40012300 	.word	0x40012300

08000de4 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000dec:	4b76      	ldr	r3, [pc, #472]	@ (8000fc8 <ADC_Init+0x1e4>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	4a75      	ldr	r2, [pc, #468]	@ (8000fc8 <ADC_Init+0x1e4>)
 8000df2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000df6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000df8:	4b73      	ldr	r3, [pc, #460]	@ (8000fc8 <ADC_Init+0x1e4>)
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	4971      	ldr	r1, [pc, #452]	@ (8000fc8 <ADC_Init+0x1e4>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  __HAL_ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6859      	ldr	r1, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	021a      	lsls	r2, r3, #8
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6859      	ldr	r1, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6899      	ldr	r1, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6899      	ldr	r1, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6899      	ldr	r1, [r3, #8]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0202 	bic.w	r2, r2, #2
 8000ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= __HAL_ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6899      	ldr	r1, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	005a      	lsls	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d02e      	beq.n	8000f3c <ADC_Init+0x158>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000eec:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000efc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  __HAL_ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8000f08:	613a      	str	r2, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	fa92 f2a2 	rbit	r2, r2
 8000f10:	60fa      	str	r2, [r7, #12]
  return result;
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	617a      	str	r2, [r7, #20]
  if (value == 0U)
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d101      	bne.n	8000f20 <ADC_Init+0x13c>
    return 32U;
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	e003      	b.n	8000f28 <ADC_Init+0x144>
  return __builtin_clz(value);
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	fab2 f282 	clz	r2, r2
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	fa03 f102 	lsl.w	r1, r3, r2
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	e007      	b.n	8000f4c <ADC_Init+0x168>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8000f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  __HAL_ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	051a      	lsls	r2, r3, #20
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= __HAL_ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6899      	ldr	r1, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	025a      	lsls	r2, r3, #9
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= __HAL_ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6899      	ldr	r1, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	029a      	lsls	r2, r3, #10
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	609a      	str	r2, [r3, #8]
}
 8000fba:	bf00      	nop
 8000fbc:	371c      	adds	r7, #28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40012300 	.word	0x40012300

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	@ (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	@ (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	@ 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4c 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ffb1 	bl	80010c0 <NVIC_EncodePriority>
 800115e:	4602      	mov	r2, r0
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <__NVIC_SetPriority>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff54 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e159      	b.n	8001460 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8148 	bne.w	800145a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a2 	beq.w	800145a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b57      	ldr	r3, [pc, #348]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a56      	ldr	r2, [pc, #344]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b54      	ldr	r3, [pc, #336]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a52      	ldr	r2, [pc, #328]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a49      	ldr	r2, [pc, #292]	@ (8001480 <HAL_GPIO_Init+0x2f0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x202>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a48      	ldr	r2, [pc, #288]	@ (8001484 <HAL_GPIO_Init+0x2f4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x1fe>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a47      	ldr	r2, [pc, #284]	@ (8001488 <HAL_GPIO_Init+0x2f8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x1fa>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a46      	ldr	r2, [pc, #280]	@ (800148c <HAL_GPIO_Init+0x2fc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x1f6>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a45      	ldr	r2, [pc, #276]	@ (8001490 <HAL_GPIO_Init+0x300>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x1f2>
 800137e:	2304      	movs	r3, #4
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x204>
 8001382:	2307      	movs	r3, #7
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x204>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x204>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x204>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x204>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a4:	4935      	ldr	r1, [pc, #212]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b38      	ldr	r3, [pc, #224]	@ (8001494 <HAL_GPIO_Init+0x304>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001494 <HAL_GPIO_Init+0x304>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001494 <HAL_GPIO_Init+0x304>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a24      	ldr	r2, [pc, #144]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142a:	4a1a      	ldr	r2, [pc, #104]	@ (8001494 <HAL_GPIO_Init+0x304>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001454:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f aea2 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40013c00 	.word	0x40013c00

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	619a      	str	r2, [r3, #24]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e267      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d075      	beq.n	80015d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ea:	4b88      	ldr	r3, [pc, #544]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00c      	beq.n	8001510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4b85      	ldr	r3, [pc, #532]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b82      	ldr	r3, [pc, #520]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800150a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800150e:	d10b      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b7e      	ldr	r3, [pc, #504]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d05b      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d157      	bne.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e242      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x74>
 8001532:	4b76      	ldr	r3, [pc, #472]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a75      	ldr	r2, [pc, #468]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x98>
 800154a:	4b70      	ldr	r3, [pc, #448]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6f      	ldr	r2, [pc, #444]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b6d      	ldr	r3, [pc, #436]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6c      	ldr	r2, [pc, #432]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001564:	4b69      	ldr	r3, [pc, #420]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a68      	ldr	r2, [pc, #416]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b66      	ldr	r3, [pc, #408]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a65      	ldr	r2, [pc, #404]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fa32 	bl	80009ec <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fa2e 	bl	80009ec <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	@ 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e207      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b5b      	ldr	r3, [pc, #364]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xc0>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fa1e 	bl	80009ec <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fa1a 	bl	80009ec <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	@ 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1f3      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b51      	ldr	r3, [pc, #324]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0xe8>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e2:	4b4a      	ldr	r3, [pc, #296]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b47      	ldr	r3, [pc, #284]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b44      	ldr	r3, [pc, #272]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b41      	ldr	r3, [pc, #260]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1c7      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b3b      	ldr	r3, [pc, #236]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4937      	ldr	r1, [pc, #220]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b34      	ldr	r3, [pc, #208]	@ (8001710 <HAL_RCC_OscConfig+0x244>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff f9d3 	bl	80009ec <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff f9cf 	bl	80009ec <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1a8      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b28      	ldr	r3, [pc, #160]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4925      	ldr	r1, [pc, #148]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <HAL_RCC_OscConfig+0x244>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff f9b2 	bl	80009ec <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff f9ae 	bl	80009ec <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e187      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d036      	beq.n	8001724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d016      	beq.n	80016ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_RCC_OscConfig+0x248>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff f992 	bl	80009ec <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff f98e 	bl	80009ec <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e167      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_RCC_OscConfig+0x240>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x200>
 80016ea:	e01b      	b.n	8001724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_OscConfig+0x248>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff f97b 	bl	80009ec <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e00e      	b.n	8001718 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff f977 	bl	80009ec <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d907      	bls.n	8001718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e150      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b88      	ldr	r3, [pc, #544]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ea      	bne.n	80016fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8097 	beq.w	8001860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b81      	ldr	r3, [pc, #516]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b7d      	ldr	r3, [pc, #500]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	4a7c      	ldr	r2, [pc, #496]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	@ 0x40
 8001752:	4b7a      	ldr	r3, [pc, #488]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b77      	ldr	r3, [pc, #476]	@ (8001940 <HAL_RCC_OscConfig+0x474>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b74      	ldr	r3, [pc, #464]	@ (8001940 <HAL_RCC_OscConfig+0x474>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a73      	ldr	r2, [pc, #460]	@ (8001940 <HAL_RCC_OscConfig+0x474>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff f937 	bl	80009ec <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff f933 	bl	80009ec <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e10c      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b6a      	ldr	r3, [pc, #424]	@ (8001940 <HAL_RCC_OscConfig+0x474>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x2ea>
 80017a8:	4b64      	ldr	r3, [pc, #400]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ac:	4a63      	ldr	r2, [pc, #396]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b4:	e01c      	b.n	80017f0 <HAL_RCC_OscConfig+0x324>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x30c>
 80017be:	4b5f      	ldr	r3, [pc, #380]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	4a5e      	ldr	r2, [pc, #376]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ca:	4b5c      	ldr	r3, [pc, #368]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ce:	4a5b      	ldr	r2, [pc, #364]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0x324>
 80017d8:	4b58      	ldr	r3, [pc, #352]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	4a57      	ldr	r2, [pc, #348]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e4:	4b55      	ldr	r3, [pc, #340]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e8:	4a54      	ldr	r2, [pc, #336]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff f8f8 	bl	80009ec <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff f8f4 	bl	80009ec <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0cb      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	4b49      	ldr	r3, [pc, #292]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0ee      	beq.n	8001800 <HAL_RCC_OscConfig+0x334>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7ff f8e2 	bl	80009ec <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff f8de 	bl	80009ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0b5      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001842:	4b3e      	ldr	r3, [pc, #248]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ee      	bne.n	800182c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b39      	ldr	r3, [pc, #228]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	4a38      	ldr	r2, [pc, #224]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80a1 	beq.w	80019ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800186a:	4b34      	ldr	r3, [pc, #208]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	d05c      	beq.n	8001930 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d141      	bne.n	8001902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <HAL_RCC_OscConfig+0x478>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff f8b2 	bl	80009ec <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f8ae 	bl	80009ec <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e087      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b27      	ldr	r3, [pc, #156]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	019b      	lsls	r3, r3, #6
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	491b      	ldr	r1, [pc, #108]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <HAL_RCC_OscConfig+0x478>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff f887 	bl	80009ec <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff f883 	bl	80009ec <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e05c      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x416>
 8001900:	e054      	b.n	80019ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_RCC_OscConfig+0x478>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff f870 	bl	80009ec <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f86c 	bl	80009ec <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e045      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_RCC_OscConfig+0x470>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x444>
 800192e:	e03d      	b.n	80019ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d107      	bne.n	8001948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e038      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000
 8001944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d028      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d121      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d11a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001978:	4013      	ands	r3, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800197e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001980:	4293      	cmp	r3, r2
 8001982:	d111      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	3b01      	subs	r3, #1
 8001992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0cc      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b68      	ldr	r3, [pc, #416]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d90c      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b65      	ldr	r3, [pc, #404]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b63      	ldr	r3, [pc, #396]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b59      	ldr	r3, [pc, #356]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a58      	ldr	r2, [pc, #352]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b50      	ldr	r3, [pc, #320]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	494d      	ldr	r1, [pc, #308]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d044      	beq.n	8001adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d119      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e07f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e067      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	4b37      	ldr	r3, [pc, #220]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0203 	bic.w	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4934      	ldr	r1, [pc, #208]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aac:	f7fe ff9e 	bl	80009ec <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7fe ff9a 	bl	80009ec <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 020c 	and.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1eb      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001adc:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d20c      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4916      	ldr	r1, [pc, #88]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490e      	ldr	r1, [pc, #56]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b42:	f000 f821 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	490a      	ldr	r1, [pc, #40]	@ (8001b7c <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a09      	ldr	r2, [pc, #36]	@ (8001b80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fe42 	bl	80007ec <HAL_InitTick>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08004698 	.word	0x08004698
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b8c:	b090      	sub	sp, #64	@ 0x40
 8001b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b94:	2300      	movs	r3, #0
 8001b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b98:	2300      	movs	r3, #0
 8001b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba0:	4b59      	ldr	r3, [pc, #356]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d00d      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	f200 80a1 	bhi.w	8001cf4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x34>
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bba:	e09b      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x184>)
 8001bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001bc0:	e09b      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc2:	4b53      	ldr	r3, [pc, #332]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bc6:	e098      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d028      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	4b4a      	ldr	r3, [pc, #296]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	2200      	movs	r2, #0
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4b47      	ldr	r3, [pc, #284]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf4:	fb03 f201 	mul.w	r2, r3, r1
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	fb00 f303 	mul.w	r3, r0, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a43      	ldr	r2, [pc, #268]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c02:	fba0 1202 	umull	r1, r2, r0, r2
 8001c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c08:	460a      	mov	r2, r1
 8001c0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c0e:	4413      	add	r3, r2
 8001c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c14:	2200      	movs	r2, #0
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	61fa      	str	r2, [r7, #28]
 8001c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c22:	f7fe fadd 	bl	80001e0 <__aeabi_uldivmod>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c2e:	e053      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c30:	4b35      	ldr	r3, [pc, #212]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	2200      	movs	r2, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	617a      	str	r2, [r7, #20]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c42:	f04f 0b00 	mov.w	fp, #0
 8001c46:	4652      	mov	r2, sl
 8001c48:	465b      	mov	r3, fp
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	0159      	lsls	r1, r3, #5
 8001c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c58:	0150      	lsls	r0, r2, #5
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	ebb2 080a 	subs.w	r8, r2, sl
 8001c62:	eb63 090b 	sbc.w	r9, r3, fp
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c7a:	ebb2 0408 	subs.w	r4, r2, r8
 8001c7e:	eb63 0509 	sbc.w	r5, r3, r9
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	00eb      	lsls	r3, r5, #3
 8001c8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c90:	00e2      	lsls	r2, r4, #3
 8001c92:	4614      	mov	r4, r2
 8001c94:	461d      	mov	r5, r3
 8001c96:	eb14 030a 	adds.w	r3, r4, sl
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	eb45 030b 	adc.w	r3, r5, fp
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cae:	4629      	mov	r1, r5
 8001cb0:	028b      	lsls	r3, r1, #10
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb8:	4621      	mov	r1, r4
 8001cba:	028a      	lsls	r2, r1, #10
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	60fa      	str	r2, [r7, #12]
 8001cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ccc:	f7fe fa88 	bl	80001e0 <__aeabi_uldivmod>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001ce8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cf2:	e002      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x184>)
 8001cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3740      	adds	r7, #64	@ 0x40
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	017d7840 	.word	0x017d7840

08001d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d30:	f7ff fff0 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0a9b      	lsrs	r3, r3, #10
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4903      	ldr	r1, [pc, #12]	@ (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	080046a8 	.word	0x080046a8

08001d54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	220f      	movs	r2, #15
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d64:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d70:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	08db      	lsrs	r3, r3, #3
 8001d8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d96:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <HAL_RCC_GetClockConfig+0x60>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0207 	and.w	r2, r3, #7
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e041      	b.n	8001e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f839 	bl	8001e56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f000 f9bc 	bl	8002174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d001      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e044      	b.n	8001f0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d018      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eae:	d013      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xb4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00e      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a19      	ldr	r2, [pc, #100]	@ (8001f24 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a17      	ldr	r2, [pc, #92]	@ (8001f28 <HAL_TIM_Base_Start_IT+0xbc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d004      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a16      	ldr	r2, [pc, #88]	@ (8001f2c <HAL_TIM_Base_Start_IT+0xc0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d010      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efa:	e007      	b.n	8001f0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40014000 	.word	0x40014000

08001f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d020      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0202 	mvn.w	r2, #2
 8001f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8dc 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8ce 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f8df 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d020      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0204 	mvn.w	r2, #4
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8b6 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8a8 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f8b9 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d020      	beq.n	800202c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0208 	mvn.w	r2, #8
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2204      	movs	r2, #4
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f890 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f882 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f893 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	d020      	beq.n	8002078 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01b      	beq.n	8002078 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0210 	mvn.w	r2, #16
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2208      	movs	r2, #8
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f86a 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f85c 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f86d 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00c      	beq.n	800209c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0201 	mvn.w	r2, #1
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f83a 	bl	8002110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8f0 	bl	80022a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00c      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f83e 	bl	8002160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00c      	beq.n	8002108 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0220 	mvn.w	r2, #32
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8c2 	bl	800228c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3a      	ldr	r2, [pc, #232]	@ (8002270 <TIM_Base_SetConfig+0xfc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00f      	beq.n	80021ac <TIM_Base_SetConfig+0x38>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002192:	d00b      	beq.n	80021ac <TIM_Base_SetConfig+0x38>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a37      	ldr	r2, [pc, #220]	@ (8002274 <TIM_Base_SetConfig+0x100>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d007      	beq.n	80021ac <TIM_Base_SetConfig+0x38>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a36      	ldr	r2, [pc, #216]	@ (8002278 <TIM_Base_SetConfig+0x104>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d003      	beq.n	80021ac <TIM_Base_SetConfig+0x38>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a35      	ldr	r2, [pc, #212]	@ (800227c <TIM_Base_SetConfig+0x108>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d108      	bne.n	80021be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002270 <TIM_Base_SetConfig+0xfc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01b      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021cc:	d017      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a28      	ldr	r2, [pc, #160]	@ (8002274 <TIM_Base_SetConfig+0x100>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a27      	ldr	r2, [pc, #156]	@ (8002278 <TIM_Base_SetConfig+0x104>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00f      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a26      	ldr	r2, [pc, #152]	@ (800227c <TIM_Base_SetConfig+0x108>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00b      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a25      	ldr	r2, [pc, #148]	@ (8002280 <TIM_Base_SetConfig+0x10c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a24      	ldr	r2, [pc, #144]	@ (8002284 <TIM_Base_SetConfig+0x110>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0x8a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a23      	ldr	r2, [pc, #140]	@ (8002288 <TIM_Base_SetConfig+0x114>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d108      	bne.n	8002210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <TIM_Base_SetConfig+0xfc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d103      	bne.n	8002244 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d105      	bne.n	8002262 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f023 0201 	bic.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
  }
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40010000 	.word	0x40010000
 8002274:	40000400 	.word	0x40000400
 8002278:	40000800 	.word	0x40000800
 800227c:	40000c00 	.word	0x40000c00
 8002280:	40014000 	.word	0x40014000
 8002284:	40014400 	.word	0x40014400
 8002288:	40014800 	.word	0x40014800

0800228c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f103 0208 	add.w	r2, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f103 0208 	add.w	r2, r3, #8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f103 0208 	add.w	r2, r3, #8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d103      	bne.n	800232e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e00c      	b.n	8002348 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3308      	adds	r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e002      	b.n	800233c <vListInsert+0x2e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	429a      	cmp	r2, r3
 8002346:	d2f6      	bcs.n	8002336 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6892      	ldr	r2, [r2, #8]
 8002396:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d103      	bne.n	80023b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023de:	2301      	movs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d05d      	beq.n	80024c6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d059      	beq.n	80024c6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241a:	2100      	movs	r1, #0
 800241c:	fba3 2302 	umull	r2, r3, r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d000      	beq.n	8002426 <xQueueGenericReset+0x52>
 8002424:	2101      	movs	r1, #1
 8002426:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002428:	2b00      	cmp	r3, #0
 800242a:	d14c      	bne.n	80024c6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 800242c:	f001 fe26 	bl	800407c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002438:	6939      	ldr	r1, [r7, #16]
 800243a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	441a      	add	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2200      	movs	r2, #0
 800244a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	3b01      	subs	r3, #1
 800245e:	6939      	ldr	r1, [r7, #16]
 8002460:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	441a      	add	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	22ff      	movs	r2, #255	@ 0xff
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	22ff      	movs	r2, #255	@ 0xff
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d114      	bne.n	80024ac <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01a      	beq.n	80024c0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	3310      	adds	r3, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f000 ff86 	bl	80033a0 <xTaskRemoveFromEventList>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d012      	beq.n	80024c0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800249a:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <xQueueGenericReset+0x120>)
 800249c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	e009      	b.n	80024c0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	3310      	adds	r3, #16
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff feff 	bl	80022b4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	3324      	adds	r3, #36	@ 0x24
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fefa 	bl	80022b4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024c0:	f001 fe0e 	bl	80040e0 <vPortExitCritical>
 80024c4:	e001      	b.n	80024ca <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <xQueueGenericReset+0x114>
        __asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	60bb      	str	r3, [r7, #8]
    }
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024e8:	697b      	ldr	r3, [r7, #20]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	e000ed04 	.word	0xe000ed04

080024f8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	4613      	mov	r3, r2
 8002504:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d02e      	beq.n	800256e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002510:	2100      	movs	r1, #0
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	fba3 2302 	umull	r2, r3, r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d000      	beq.n	8002520 <xQueueGenericCreate+0x28>
 800251e:	2101      	movs	r1, #1
 8002520:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d123      	bne.n	800256e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800252e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002532:	d81c      	bhi.n	800256e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	3350      	adds	r3, #80	@ 0x50
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fe82 	bl	800424c <pvPortMalloc>
 8002548:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01d      	beq.n	800258c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3350      	adds	r3, #80	@ 0x50
 8002558:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f815 	bl	8002596 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800256c:	e00e      	b.n	800258c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10b      	bne.n	800258c <xQueueGenericCreate+0x94>
        __asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	613b      	str	r3, [r7, #16]
    }
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800258c:	69fb      	ldr	r3, [r7, #28]
    }
 800258e:	4618      	mov	r0, r3
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e002      	b.n	80025b8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025c4:	2101      	movs	r1, #1
 80025c6:	69b8      	ldr	r0, [r7, #24]
 80025c8:	f7ff ff04 	bl	80023d4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	@ 0x30
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <xQueueReceive+0x32>
        __asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	623b      	str	r3, [r7, #32]
    }
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	e7fd      	b.n	800260a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <xQueueReceive+0x40>
 8002614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <xQueueReceive+0x44>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <xQueueReceive+0x46>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <xQueueReceive+0x62>
        __asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	61fb      	str	r3, [r7, #28]
    }
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	e7fd      	b.n	800263a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800263e:	f001 f8c3 	bl	80037c8 <xTaskGetSchedulerState>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <xQueueReceive+0x72>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <xQueueReceive+0x76>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <xQueueReceive+0x78>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <xQueueReceive+0x94>
        __asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	61bb      	str	r3, [r7, #24]
    }
 800266a:	bf00      	nop
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002670:	f001 fd04 	bl	800407c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01f      	beq.n	80026c0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002684:	f000 f88c 	bl	80027a0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00f      	beq.n	80026b8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269a:	3310      	adds	r3, #16
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fe7f 	bl	80033a0 <xTaskRemoveFromEventList>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026a8:	4b3c      	ldr	r3, [pc, #240]	@ (800279c <xQueueReceive+0x1c0>)
 80026aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026b8:	f001 fd12 	bl	80040e0 <vPortExitCritical>
                return pdPASS;
 80026bc:	2301      	movs	r3, #1
 80026be:	e069      	b.n	8002794 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026c6:	f001 fd0b 	bl	80040e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e062      	b.n	8002794 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d106      	bne.n	80026e2 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 ff39 	bl	8003550 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026de:	2301      	movs	r3, #1
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026e2:	f001 fcfd 	bl	80040e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026e6:	f000 fb61 	bl	8002dac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026ea:	f001 fcc7 	bl	800407c <vPortEnterCritical>
 80026ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d103      	bne.n	8002704 <xQueueReceive+0x128>
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800270a:	b25b      	sxtb	r3, r3
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d103      	bne.n	800271a <xQueueReceive+0x13e>
 8002712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800271a:	f001 fce1 	bl	80040e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800271e:	1d3a      	adds	r2, r7, #4
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f000 ff28 	bl	800357c <xTaskCheckForTimeOut>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d123      	bne.n	800277a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002734:	f000 f8ac 	bl	8002890 <prvIsQueueEmpty>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d017      	beq.n	800276e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	3324      	adds	r3, #36	@ 0x24
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fdbe 	bl	80032c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800274c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800274e:	f000 f84d 	bl	80027ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002752:	f000 fb39 	bl	8002dc8 <xTaskResumeAll>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d189      	bne.n	8002670 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800275c:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <xQueueReceive+0x1c0>)
 800275e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	e780      	b.n	8002670 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800276e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002770:	f000 f83c 	bl	80027ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002774:	f000 fb28 	bl	8002dc8 <xTaskResumeAll>
 8002778:	e77a      	b.n	8002670 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800277a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800277c:	f000 f836 	bl	80027ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002780:	f000 fb22 	bl	8002dc8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002786:	f000 f883 	bl	8002890 <prvIsQueueEmpty>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f43f af6f 	beq.w	8002670 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002792:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002794:	4618      	mov	r0, r3
 8002796:	3730      	adds	r7, #48	@ 0x30
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d018      	beq.n	80027e4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d303      	bcc.n	80027d4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	461a      	mov	r2, r3
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f001 ff30 	bl	8004644 <memcpy>
    }
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027f4:	f001 fc42 	bl	800407c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027fe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002800:	e011      	b.n	8002826 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3324      	adds	r3, #36	@ 0x24
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fdc6 	bl	80033a0 <xTaskRemoveFromEventList>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800281a:	f000 ff17 	bl	800364c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	3b01      	subs	r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	dce9      	bgt.n	8002802 <prvUnlockQueue+0x16>
 800282e:	e000      	b.n	8002832 <prvUnlockQueue+0x46>
                    break;
 8002830:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	22ff      	movs	r2, #255	@ 0xff
 8002836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800283a:	f001 fc51 	bl	80040e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800283e:	f001 fc1d 	bl	800407c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002848:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800284a:	e011      	b.n	8002870 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d012      	beq.n	800287a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3310      	adds	r3, #16
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fda1 	bl	80033a0 <xTaskRemoveFromEventList>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002864:	f000 fef2 	bl	800364c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002868:	7bbb      	ldrb	r3, [r7, #14]
 800286a:	3b01      	subs	r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002874:	2b00      	cmp	r3, #0
 8002876:	dce9      	bgt.n	800284c <prvUnlockQueue+0x60>
 8002878:	e000      	b.n	800287c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800287a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	22ff      	movs	r2, #255	@ 0xff
 8002880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002884:	f001 fc2c 	bl	80040e0 <vPortExitCritical>
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002898:	f001 fbf0 	bl	800407c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e001      	b.n	80028ae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028ae:	f001 fc17 	bl	80040e0 <vPortExitCritical>

    return xReturn;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10b      	bne.n	80028e8 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	60fb      	str	r3, [r7, #12]
    }
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d024      	beq.n	8002938 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e01e      	b.n	8002932 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028f4:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <vQueueAddToRegistry+0x9c>)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d105      	bne.n	8002910 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4a13      	ldr	r2, [pc, #76]	@ (8002958 <vQueueAddToRegistry+0x9c>)
 800290a:	4413      	add	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
                    break;
 800290e:	e013      	b.n	8002938 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <vQueueAddToRegistry+0x70>
 8002916:	4a10      	ldr	r2, [pc, #64]	@ (8002958 <vQueueAddToRegistry+0x9c>)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4a0c      	ldr	r2, [pc, #48]	@ (8002958 <vQueueAddToRegistry+0x9c>)
 8002928:	4413      	add	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3301      	adds	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b07      	cmp	r3, #7
 8002936:	d9dd      	bls.n	80028f4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	200000bc 	.word	0x200000bc

0800295c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800296c:	f001 fb86 	bl	800407c <vPortEnterCritical>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002976:	b25b      	sxtb	r3, r3
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d103      	bne.n	8002986 <vQueueWaitForMessageRestricted+0x2a>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800298c:	b25b      	sxtb	r3, r3
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d103      	bne.n	800299c <vQueueWaitForMessageRestricted+0x40>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800299c:	f001 fba0 	bl	80040e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3324      	adds	r3, #36	@ 0x24
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fcaf 	bl	8003314 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff18 	bl	80027ec <prvUnlockQueue>
    }
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	@ 0x30
 80029c8:	af04      	add	r7, sp, #16
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fc37 	bl	800424c <pvPortMalloc>
 80029de:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029e6:	2058      	movs	r0, #88	@ 0x58
 80029e8:	f001 fc30 	bl	800424c <pvPortMalloc>
 80029ec:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029f4:	2258      	movs	r2, #88	@ 0x58
 80029f6:	2100      	movs	r1, #0
 80029f8:	69f8      	ldr	r0, [r7, #28]
 80029fa:	f001 fdf7 	bl	80045ec <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a04:	e005      	b.n	8002a12 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f001 fcdc 	bl	80043c4 <vPortFree>
 8002a0c:	e001      	b.n	8002a12 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a18:	88fa      	ldrh	r2, [r7, #6]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9303      	str	r3, [sp, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	9302      	str	r3, [sp, #8]
 8002a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f80e 	bl	8002a50 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a34:	69f8      	ldr	r0, [r7, #28]
 8002a36:	f000 f89b 	bl	8002b70 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	e002      	b.n	8002a46 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a46:	69bb      	ldr	r3, [r7, #24]
    }
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	461a      	mov	r2, r3
 8002a68:	21a5      	movs	r1, #165	@ 0xa5
 8002a6a:	f001 fdbf 	bl	80045ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f023 0307 	bic.w	r3, r3, #7
 8002a86:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	617b      	str	r3, [r7, #20]
    }
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	e7fd      	b.n	8002aa6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01e      	beq.n	8002aee <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	e012      	b.n	8002adc <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	7819      	ldrb	r1, [r3, #0]
 8002abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3334      	adds	r3, #52	@ 0x34
 8002ac6:	460a      	mov	r2, r1
 8002ac8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	d9e9      	bls.n	8002ab6 <prvInitialiseNewTask+0x66>
 8002ae2:	e000      	b.n	8002ae6 <prvInitialiseNewTask+0x96>
            {
                break;
 8002ae4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d90b      	bls.n	8002b0c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	613b      	str	r3, [r7, #16]
    }
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d901      	bls.n	8002b16 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b12:	2304      	movs	r3, #4
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b20:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	3304      	adds	r3, #4
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fbe4 	bl	80022f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2e:	3318      	adds	r3, #24
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fbdf 	bl	80022f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b3a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3e:	f1c3 0205 	rsb	r2, r3, #5
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	69b8      	ldr	r0, [r7, #24]
 8002b52:	f001 f963 	bl	8003e1c <pxPortInitialiseStack>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b66:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b78:	f001 fa80 	bl	800407c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b7c:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <prvAddNewTaskToReadyList+0x110>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	4a3f      	ldr	r2, [pc, #252]	@ (8002c80 <prvAddNewTaskToReadyList+0x110>)
 8002b84:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b86:	4b3f      	ldr	r3, [pc, #252]	@ (8002c84 <prvAddNewTaskToReadyList+0x114>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c84 <prvAddNewTaskToReadyList+0x114>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b94:	4b3a      	ldr	r3, [pc, #232]	@ (8002c80 <prvAddNewTaskToReadyList+0x110>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d110      	bne.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b9c:	f000 fd7a 	bl	8003694 <prvInitialiseTaskLists>
 8002ba0:	e00d      	b.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ba2:	4b39      	ldr	r3, [pc, #228]	@ (8002c88 <prvAddNewTaskToReadyList+0x118>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002baa:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <prvAddNewTaskToReadyList+0x114>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d802      	bhi.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bb8:	4a32      	ldr	r2, [pc, #200]	@ (8002c84 <prvAddNewTaskToReadyList+0x114>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002bbe:	4b33      	ldr	r3, [pc, #204]	@ (8002c8c <prvAddNewTaskToReadyList+0x11c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a31      	ldr	r2, [pc, #196]	@ (8002c8c <prvAddNewTaskToReadyList+0x11c>)
 8002bc6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bc8:	4b30      	ldr	r3, [pc, #192]	@ (8002c8c <prvAddNewTaskToReadyList+0x11c>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c90 <prvAddNewTaskToReadyList+0x120>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	4a2c      	ldr	r2, [pc, #176]	@ (8002c90 <prvAddNewTaskToReadyList+0x120>)
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be6:	492b      	ldr	r1, [pc, #172]	@ (8002c94 <prvAddNewTaskToReadyList+0x124>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	3204      	adds	r2, #4
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	1d1a      	adds	r2, r3, #4
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <prvAddNewTaskToReadyList+0x124>)
 8002c26:	441a      	add	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	615a      	str	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c30:	4918      	ldr	r1, [pc, #96]	@ (8002c94 <prvAddNewTaskToReadyList+0x124>)
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	1c59      	adds	r1, r3, #1
 8002c40:	4814      	ldr	r0, [pc, #80]	@ (8002c94 <prvAddNewTaskToReadyList+0x124>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4403      	add	r3, r0
 8002c4c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c4e:	f001 fa47 	bl	80040e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <prvAddNewTaskToReadyList+0x118>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00e      	beq.n	8002c78 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <prvAddNewTaskToReadyList+0x114>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <prvAddNewTaskToReadyList+0x128>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200001d4 	.word	0x200001d4
 8002c84:	200000fc 	.word	0x200000fc
 8002c88:	200001e0 	.word	0x200001e0
 8002c8c:	200001f0 	.word	0x200001f0
 8002c90:	200001dc 	.word	0x200001dc
 8002c94:	20000100 	.word	0x20000100
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002cae:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <vTaskDelay+0x64>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <vTaskDelay+0x32>
        __asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60bb      	str	r3, [r7, #8]
    }
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002cce:	f000 f86d 	bl	8002dac <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fd95 	bl	8003804 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002cda:	f000 f875 	bl	8002dc8 <xTaskResumeAll>
 8002cde:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8002ce6:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <vTaskDelay+0x68>)
 8002ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200001fc 	.word	0x200001fc
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002d0e:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <vTaskStartScheduler+0x88>)
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2300      	movs	r3, #0
 8002d18:	2282      	movs	r2, #130	@ 0x82
 8002d1a:	491e      	ldr	r1, [pc, #120]	@ (8002d94 <vTaskStartScheduler+0x8c>)
 8002d1c:	481e      	ldr	r0, [pc, #120]	@ (8002d98 <vTaskStartScheduler+0x90>)
 8002d1e:	f7ff fe51 	bl	80029c4 <xTaskCreate>
 8002d22:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d2a:	f000 fdeb 	bl	8003904 <xTimerCreateTimerTask>
 8002d2e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d116      	bne.n	8002d64 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	60bb      	str	r3, [r7, #8]
    }
 8002d48:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d4a:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <vTaskStartScheduler+0x94>)
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d52:	4b13      	ldr	r3, [pc, #76]	@ (8002da0 <vTaskStartScheduler+0x98>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d58:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <vTaskStartScheduler+0x9c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d5e:	f001 f8e9 	bl	8003f34 <xPortStartScheduler>
 8002d62:	e00f      	b.n	8002d84 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d10b      	bne.n	8002d84 <vTaskStartScheduler+0x7c>
        __asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	607b      	str	r3, [r7, #4]
    }
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d84:	4b08      	ldr	r3, [pc, #32]	@ (8002da8 <vTaskStartScheduler+0xa0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200001f8 	.word	0x200001f8
 8002d94:	08004680 	.word	0x08004680
 8002d98:	08003665 	.word	0x08003665
 8002d9c:	200001f4 	.word	0x200001f4
 8002da0:	200001e0 	.word	0x200001e0
 8002da4:	200001d8 	.word	0x200001d8
 8002da8:	20000008 	.word	0x20000008

08002dac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <vTaskSuspendAll+0x18>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	4a03      	ldr	r2, [pc, #12]	@ (8002dc4 <vTaskSuspendAll+0x18>)
 8002db8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	200001fc 	.word	0x200001fc

08002dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002dd6:	4b71      	ldr	r3, [pc, #452]	@ (8002f9c <xTaskResumeAll+0x1d4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10b      	bne.n	8002df6 <xTaskResumeAll+0x2e>
        __asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	607b      	str	r3, [r7, #4]
    }
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	e7fd      	b.n	8002df2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002df6:	f001 f941 	bl	800407c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002dfa:	4b68      	ldr	r3, [pc, #416]	@ (8002f9c <xTaskResumeAll+0x1d4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	4a66      	ldr	r2, [pc, #408]	@ (8002f9c <xTaskResumeAll+0x1d4>)
 8002e02:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e04:	4b65      	ldr	r3, [pc, #404]	@ (8002f9c <xTaskResumeAll+0x1d4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 80c0 	bne.w	8002f8e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e0e:	4b64      	ldr	r3, [pc, #400]	@ (8002fa0 <xTaskResumeAll+0x1d8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80bb 	beq.w	8002f8e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e18:	e08a      	b.n	8002f30 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e1a:	4b62      	ldr	r3, [pc, #392]	@ (8002fa4 <xTaskResumeAll+0x1dc>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	6a12      	ldr	r2, [r2, #32]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	69d2      	ldr	r2, [r2, #28]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3318      	adds	r3, #24
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d103      	bne.n	8002e50 <xTaskResumeAll+0x88>
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2200      	movs	r2, #0
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	1e5a      	subs	r2, r3, #1
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	6892      	ldr	r2, [r2, #8]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3304      	adds	r3, #4
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d103      	bne.n	8002e8e <xTaskResumeAll+0xc6>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	4b40      	ldr	r3, [pc, #256]	@ (8002fa8 <xTaskResumeAll+0x1e0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	4a3e      	ldr	r2, [pc, #248]	@ (8002fa8 <xTaskResumeAll+0x1e0>)
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb4:	493d      	ldr	r1, [pc, #244]	@ (8002fac <xTaskResumeAll+0x1e4>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	3204      	adds	r2, #4
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	1d1a      	adds	r2, r3, #4
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8002fac <xTaskResumeAll+0x1e4>)
 8002ef4:	441a      	add	r2, r3
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	615a      	str	r2, [r3, #20]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efe:	492b      	ldr	r1, [pc, #172]	@ (8002fac <xTaskResumeAll+0x1e4>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	1c59      	adds	r1, r3, #1
 8002f0e:	4827      	ldr	r0, [pc, #156]	@ (8002fac <xTaskResumeAll+0x1e4>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4403      	add	r3, r0
 8002f1a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f20:	4b23      	ldr	r3, [pc, #140]	@ (8002fb0 <xTaskResumeAll+0x1e8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8002f2a:	4b22      	ldr	r3, [pc, #136]	@ (8002fb4 <xTaskResumeAll+0x1ec>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f30:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa4 <xTaskResumeAll+0x1dc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f47f af70 	bne.w	8002e1a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f40:	f000 fc26 	bl	8003790 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f44:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb8 <xTaskResumeAll+0x1f0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d010      	beq.n	8002f72 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f50:	f000 f846 	bl	8002fe0 <xTaskIncrementTick>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8002f5a:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <xTaskResumeAll+0x1ec>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f1      	bne.n	8002f50 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002f6c:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <xTaskResumeAll+0x1f0>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f72:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <xTaskResumeAll+0x1ec>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fbc <xTaskResumeAll+0x1f4>)
 8002f80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f8e:	f001 f8a7 	bl	80040e0 <vPortExitCritical>

    return xAlreadyYielded;
 8002f92:	69bb      	ldr	r3, [r7, #24]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200001fc 	.word	0x200001fc
 8002fa0:	200001d4 	.word	0x200001d4
 8002fa4:	20000194 	.word	0x20000194
 8002fa8:	200001dc 	.word	0x200001dc
 8002fac:	20000100 	.word	0x20000100
 8002fb0:	200000fc 	.word	0x200000fc
 8002fb4:	200001e8 	.word	0x200001e8
 8002fb8:	200001e4 	.word	0x200001e4
 8002fbc:	e000ed04 	.word	0xe000ed04

08002fc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002fc6:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <xTaskGetTickCount+0x1c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002fcc:	687b      	ldr	r3, [r7, #4]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	200001d8 	.word	0x200001d8

08002fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	@ 0x28
 8002fe4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fea:	4b7e      	ldr	r3, [pc, #504]	@ (80031e4 <xTaskIncrementTick+0x204>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 80ed 	bne.w	80031ce <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ff4:	4b7c      	ldr	r3, [pc, #496]	@ (80031e8 <xTaskIncrementTick+0x208>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ffc:	4a7a      	ldr	r2, [pc, #488]	@ (80031e8 <xTaskIncrementTick+0x208>)
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d121      	bne.n	800304c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003008:	4b78      	ldr	r3, [pc, #480]	@ (80031ec <xTaskIncrementTick+0x20c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <xTaskIncrementTick+0x4a>
        __asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	607b      	str	r3, [r7, #4]
    }
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	e7fd      	b.n	8003026 <xTaskIncrementTick+0x46>
 800302a:	4b70      	ldr	r3, [pc, #448]	@ (80031ec <xTaskIncrementTick+0x20c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	4b6f      	ldr	r3, [pc, #444]	@ (80031f0 <xTaskIncrementTick+0x210>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a6d      	ldr	r2, [pc, #436]	@ (80031ec <xTaskIncrementTick+0x20c>)
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4a6d      	ldr	r2, [pc, #436]	@ (80031f0 <xTaskIncrementTick+0x210>)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b6d      	ldr	r3, [pc, #436]	@ (80031f4 <xTaskIncrementTick+0x214>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	4a6b      	ldr	r2, [pc, #428]	@ (80031f4 <xTaskIncrementTick+0x214>)
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	f000 fba2 	bl	8003790 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800304c:	4b6a      	ldr	r3, [pc, #424]	@ (80031f8 <xTaskIncrementTick+0x218>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	429a      	cmp	r2, r3
 8003054:	f0c0 80a6 	bcc.w	80031a4 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003058:	4b64      	ldr	r3, [pc, #400]	@ (80031ec <xTaskIncrementTick+0x20c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003062:	4b65      	ldr	r3, [pc, #404]	@ (80031f8 <xTaskIncrementTick+0x218>)
 8003064:	f04f 32ff 	mov.w	r2, #4294967295
 8003068:	601a      	str	r2, [r3, #0]
                    break;
 800306a:	e09b      	b.n	80031a4 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800306c:	4b5f      	ldr	r3, [pc, #380]	@ (80031ec <xTaskIncrementTick+0x20c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800307c:	6a3a      	ldr	r2, [r7, #32]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	d203      	bcs.n	800308c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003084:	4a5c      	ldr	r2, [pc, #368]	@ (80031f8 <xTaskIncrementTick+0x218>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800308a:	e08b      	b.n	80031a4 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	68d2      	ldr	r2, [r2, #12]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	6892      	ldr	r2, [r2, #8]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	3304      	adds	r3, #4
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d103      	bne.n	80030ba <xTaskIncrementTick+0xda>
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2200      	movs	r2, #0
 80030be:	615a      	str	r2, [r3, #20]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1e5a      	subs	r2, r3, #1
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01e      	beq.n	8003110 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	6a12      	ldr	r2, [r2, #32]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	69d2      	ldr	r2, [r2, #28]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	3318      	adds	r3, #24
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d103      	bne.n	8003100 <xTaskIncrementTick+0x120>
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	6a1a      	ldr	r2, [r3, #32]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	1e5a      	subs	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	2201      	movs	r2, #1
 8003116:	409a      	lsls	r2, r3
 8003118:	4b38      	ldr	r3, [pc, #224]	@ (80031fc <xTaskIncrementTick+0x21c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	4a37      	ldr	r2, [pc, #220]	@ (80031fc <xTaskIncrementTick+0x21c>)
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003126:	4936      	ldr	r1, [pc, #216]	@ (8003200 <xTaskIncrementTick+0x220>)
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3304      	adds	r3, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	3204      	adds	r2, #4
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	1d1a      	adds	r2, r3, #4
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4a26      	ldr	r2, [pc, #152]	@ (8003200 <xTaskIncrementTick+0x220>)
 8003166:	441a      	add	r2, r3
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	615a      	str	r2, [r3, #20]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003170:	4923      	ldr	r1, [pc, #140]	@ (8003200 <xTaskIncrementTick+0x220>)
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	481f      	ldr	r0, [pc, #124]	@ (8003200 <xTaskIncrementTick+0x220>)
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4403      	add	r3, r0
 800318c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003192:	4b1c      	ldr	r3, [pc, #112]	@ (8003204 <xTaskIncrementTick+0x224>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	429a      	cmp	r2, r3
 800319a:	f67f af5d 	bls.w	8003058 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800319e:	2301      	movs	r3, #1
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a2:	e759      	b.n	8003058 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031a4:	4b17      	ldr	r3, [pc, #92]	@ (8003204 <xTaskIncrementTick+0x224>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031aa:	4915      	ldr	r1, [pc, #84]	@ (8003200 <xTaskIncrementTick+0x220>)
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d901      	bls.n	80031c0 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80031bc:	2301      	movs	r3, #1
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80031c0:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <xTaskIncrementTick+0x228>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80031cc:	e004      	b.n	80031d8 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031ce:	4b0f      	ldr	r3, [pc, #60]	@ (800320c <xTaskIncrementTick+0x22c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	4a0d      	ldr	r2, [pc, #52]	@ (800320c <xTaskIncrementTick+0x22c>)
 80031d6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3728      	adds	r7, #40	@ 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200001fc 	.word	0x200001fc
 80031e8:	200001d8 	.word	0x200001d8
 80031ec:	2000018c 	.word	0x2000018c
 80031f0:	20000190 	.word	0x20000190
 80031f4:	200001ec 	.word	0x200001ec
 80031f8:	200001f4 	.word	0x200001f4
 80031fc:	200001dc 	.word	0x200001dc
 8003200:	20000100 	.word	0x20000100
 8003204:	200000fc 	.word	0x200000fc
 8003208:	200001e8 	.word	0x200001e8
 800320c:	200001e4 	.word	0x200001e4

08003210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003216:	4b27      	ldr	r3, [pc, #156]	@ (80032b4 <vTaskSwitchContext+0xa4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800321e:	4b26      	ldr	r3, [pc, #152]	@ (80032b8 <vTaskSwitchContext+0xa8>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003224:	e040      	b.n	80032a8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8003226:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <vTaskSwitchContext+0xa8>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322c:	4b23      	ldr	r3, [pc, #140]	@ (80032bc <vTaskSwitchContext+0xac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800323a:	7afb      	ldrb	r3, [r7, #11]
 800323c:	f1c3 031f 	rsb	r3, r3, #31
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	491f      	ldr	r1, [pc, #124]	@ (80032c0 <vTaskSwitchContext+0xb0>)
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <vTaskSwitchContext+0x5e>
        __asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	607b      	str	r3, [r7, #4]
    }
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	e7fd      	b.n	800326a <vTaskSwitchContext+0x5a>
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4a11      	ldr	r2, [pc, #68]	@ (80032c0 <vTaskSwitchContext+0xb0>)
 800327a:	4413      	add	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	3308      	adds	r3, #8
 8003290:	429a      	cmp	r2, r3
 8003292:	d104      	bne.n	800329e <vTaskSwitchContext+0x8e>
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a07      	ldr	r2, [pc, #28]	@ (80032c4 <vTaskSwitchContext+0xb4>)
 80032a6:	6013      	str	r3, [r2, #0]
}
 80032a8:	bf00      	nop
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	200001fc 	.word	0x200001fc
 80032b8:	200001e8 	.word	0x200001e8
 80032bc:	200001dc 	.word	0x200001dc
 80032c0:	20000100 	.word	0x20000100
 80032c4:	200000fc 	.word	0x200000fc

080032c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	60fb      	str	r3, [r7, #12]
    }
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032f0:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <vTaskPlaceOnEventList+0x48>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3318      	adds	r3, #24
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff f808 	bl	800230e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032fe:	2101      	movs	r1, #1
 8003300:	6838      	ldr	r0, [r7, #0]
 8003302:	f000 fa7f 	bl	8003804 <prvAddCurrentTaskToDelayedList>
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200000fc 	.word	0x200000fc

08003314 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10b      	bne.n	800333e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	613b      	str	r3, [r7, #16]
    }
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	e7fd      	b.n	800333a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	4b15      	ldr	r3, [pc, #84]	@ (800339c <vTaskPlaceOnEventListRestricted+0x88>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	61da      	str	r2, [r3, #28]
 800334c:	4b13      	ldr	r3, [pc, #76]	@ (800339c <vTaskPlaceOnEventListRestricted+0x88>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	6892      	ldr	r2, [r2, #8]
 8003354:	621a      	str	r2, [r3, #32]
 8003356:	4b11      	ldr	r3, [pc, #68]	@ (800339c <vTaskPlaceOnEventListRestricted+0x88>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	3218      	adds	r2, #24
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <vTaskPlaceOnEventListRestricted+0x88>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f103 0218 	add.w	r2, r3, #24
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <vTaskPlaceOnEventListRestricted+0x88>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	629a      	str	r2, [r3, #40]	@ 0x28
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	68b8      	ldr	r0, [r7, #8]
 8003390:	f000 fa38 	bl	8003804 <prvAddCurrentTaskToDelayedList>
    }
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200000fc 	.word	0x200000fc

080033a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b08b      	sub	sp, #44	@ 0x2c
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	60fb      	str	r3, [r7, #12]
    }
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	e7fd      	b.n	80033ca <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	6a3a      	ldr	r2, [r7, #32]
 80033da:	6a12      	ldr	r2, [r2, #32]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	6a3a      	ldr	r2, [r7, #32]
 80033e4:	69d2      	ldr	r2, [r2, #28]
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	3318      	adds	r3, #24
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d103      	bne.n	80033fc <xTaskRemoveFromEventList+0x5c>
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	2200      	movs	r2, #0
 8003400:	629a      	str	r2, [r3, #40]	@ 0x28
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1e5a      	subs	r2, r3, #1
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800340c:	4b4a      	ldr	r3, [pc, #296]	@ (8003538 <xTaskRemoveFromEventList+0x198>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d15e      	bne.n	80034d2 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	6a3a      	ldr	r2, [r7, #32]
 8003420:	68d2      	ldr	r2, [r2, #12]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	6892      	ldr	r2, [r2, #8]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	3304      	adds	r3, #4
 8003436:	429a      	cmp	r2, r3
 8003438:	d103      	bne.n	8003442 <xTaskRemoveFromEventList+0xa2>
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	2200      	movs	r2, #0
 8003446:	615a      	str	r2, [r3, #20]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	2201      	movs	r2, #1
 8003458:	409a      	lsls	r2, r3
 800345a:	4b38      	ldr	r3, [pc, #224]	@ (800353c <xTaskRemoveFromEventList+0x19c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4313      	orrs	r3, r2
 8003460:	4a36      	ldr	r2, [pc, #216]	@ (800353c <xTaskRemoveFromEventList+0x19c>)
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003468:	4935      	ldr	r1, [pc, #212]	@ (8003540 <xTaskRemoveFromEventList+0x1a0>)
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3304      	adds	r3, #4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	6a3a      	ldr	r2, [r7, #32]
 800348e:	3204      	adds	r2, #4
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	1d1a      	adds	r2, r3, #4
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4a26      	ldr	r2, [pc, #152]	@ (8003540 <xTaskRemoveFromEventList+0x1a0>)
 80034a8:	441a      	add	r2, r3
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	615a      	str	r2, [r3, #20]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b2:	4923      	ldr	r1, [pc, #140]	@ (8003540 <xTaskRemoveFromEventList+0x1a0>)
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1c59      	adds	r1, r3, #1
 80034c2:	481f      	ldr	r0, [pc, #124]	@ (8003540 <xTaskRemoveFromEventList+0x1a0>)
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4403      	add	r3, r0
 80034ce:	6019      	str	r1, [r3, #0]
 80034d0:	e01b      	b.n	800350a <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003544 <xTaskRemoveFromEventList+0x1a4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	61da      	str	r2, [r3, #28]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	621a      	str	r2, [r3, #32]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	6a3a      	ldr	r2, [r7, #32]
 80034ec:	3218      	adds	r2, #24
 80034ee:	605a      	str	r2, [r3, #4]
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	f103 0218 	add.w	r2, r3, #24
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	4a11      	ldr	r2, [pc, #68]	@ (8003544 <xTaskRemoveFromEventList+0x1a4>)
 80034fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003500:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <xTaskRemoveFromEventList+0x1a4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	4a0f      	ldr	r2, [pc, #60]	@ (8003544 <xTaskRemoveFromEventList+0x1a4>)
 8003508:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350e:	4b0e      	ldr	r3, [pc, #56]	@ (8003548 <xTaskRemoveFromEventList+0x1a8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	d905      	bls.n	8003524 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <xTaskRemoveFromEventList+0x1ac>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e001      	b.n	8003528 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800352a:	4618      	mov	r0, r3
 800352c:	372c      	adds	r7, #44	@ 0x2c
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	200001fc 	.word	0x200001fc
 800353c:	200001dc 	.word	0x200001dc
 8003540:	20000100 	.word	0x20000100
 8003544:	20000194 	.word	0x20000194
 8003548:	200000fc 	.word	0x200000fc
 800354c:	200001e8 	.word	0x200001e8

08003550 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <vTaskInternalSetTimeOutState+0x24>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <vTaskInternalSetTimeOutState+0x28>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	605a      	str	r2, [r3, #4]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	200001ec 	.word	0x200001ec
 8003578:	200001d8 	.word	0x200001d8

0800357c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	613b      	str	r3, [r7, #16]
    }
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	60fb      	str	r3, [r7, #12]
    }
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	e7fd      	b.n	80035be <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80035c2:	f000 fd5b 	bl	800407c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003644 <xTaskCheckForTimeOut+0xc8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d102      	bne.n	80035e6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e026      	b.n	8003634 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b17      	ldr	r3, [pc, #92]	@ (8003648 <xTaskCheckForTimeOut+0xcc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d00a      	beq.n	8003608 <xTaskCheckForTimeOut+0x8c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d305      	bcc.n	8003608 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035fc:	2301      	movs	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e015      	b.n	8003634 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	429a      	cmp	r2, r3
 8003610:	d20b      	bcs.n	800362a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1ad2      	subs	r2, r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ff96 	bl	8003550 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	e004      	b.n	8003634 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003634:	f000 fd54 	bl	80040e0 <vPortExitCritical>

    return xReturn;
 8003638:	69fb      	ldr	r3, [r7, #28]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200001d8 	.word	0x200001d8
 8003648:	200001ec 	.word	0x200001ec

0800364c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003650:	4b03      	ldr	r3, [pc, #12]	@ (8003660 <vTaskMissedYield+0x14>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	200001e8 	.word	0x200001e8

08003664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800366c:	f000 f852 	bl	8003714 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003670:	4b06      	ldr	r3, [pc, #24]	@ (800368c <prvIdleTask+0x28>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d9f9      	bls.n	800366c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <prvIdleTask+0x2c>)
 800367a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003688:	e7f0      	b.n	800366c <prvIdleTask+0x8>
 800368a:	bf00      	nop
 800368c:	20000100 	.word	0x20000100
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800369a:	2300      	movs	r3, #0
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	e00c      	b.n	80036ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4a12      	ldr	r2, [pc, #72]	@ (80036f4 <prvInitialiseTaskLists+0x60>)
 80036ac:	4413      	add	r3, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fe00 	bl	80022b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3301      	adds	r3, #1
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d9ef      	bls.n	80036a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036c0:	480d      	ldr	r0, [pc, #52]	@ (80036f8 <prvInitialiseTaskLists+0x64>)
 80036c2:	f7fe fdf7 	bl	80022b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036c6:	480d      	ldr	r0, [pc, #52]	@ (80036fc <prvInitialiseTaskLists+0x68>)
 80036c8:	f7fe fdf4 	bl	80022b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036cc:	480c      	ldr	r0, [pc, #48]	@ (8003700 <prvInitialiseTaskLists+0x6c>)
 80036ce:	f7fe fdf1 	bl	80022b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80036d2:	480c      	ldr	r0, [pc, #48]	@ (8003704 <prvInitialiseTaskLists+0x70>)
 80036d4:	f7fe fdee 	bl	80022b4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80036d8:	480b      	ldr	r0, [pc, #44]	@ (8003708 <prvInitialiseTaskLists+0x74>)
 80036da:	f7fe fdeb 	bl	80022b4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <prvInitialiseTaskLists+0x78>)
 80036e0:	4a05      	ldr	r2, [pc, #20]	@ (80036f8 <prvInitialiseTaskLists+0x64>)
 80036e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <prvInitialiseTaskLists+0x7c>)
 80036e6:	4a05      	ldr	r2, [pc, #20]	@ (80036fc <prvInitialiseTaskLists+0x68>)
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000100 	.word	0x20000100
 80036f8:	20000164 	.word	0x20000164
 80036fc:	20000178 	.word	0x20000178
 8003700:	20000194 	.word	0x20000194
 8003704:	200001a8 	.word	0x200001a8
 8003708:	200001c0 	.word	0x200001c0
 800370c:	2000018c 	.word	0x2000018c
 8003710:	20000190 	.word	0x20000190

08003714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800371a:	e019      	b.n	8003750 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800371c:	f000 fcae 	bl	800407c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003720:	4b10      	ldr	r3, [pc, #64]	@ (8003764 <prvCheckTasksWaitingTermination+0x50>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe fe27 	bl	8002380 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <prvCheckTasksWaitingTermination+0x54>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3b01      	subs	r3, #1
 8003738:	4a0b      	ldr	r2, [pc, #44]	@ (8003768 <prvCheckTasksWaitingTermination+0x54>)
 800373a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800373c:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <prvCheckTasksWaitingTermination+0x58>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3b01      	subs	r3, #1
 8003742:	4a0a      	ldr	r2, [pc, #40]	@ (800376c <prvCheckTasksWaitingTermination+0x58>)
 8003744:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003746:	f000 fccb 	bl	80040e0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f810 	bl	8003770 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003750:	4b06      	ldr	r3, [pc, #24]	@ (800376c <prvCheckTasksWaitingTermination+0x58>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e1      	bne.n	800371c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200001a8 	.word	0x200001a8
 8003768:	200001d4 	.word	0x200001d4
 800376c:	200001bc 	.word	0x200001bc

08003770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fe21 	bl	80043c4 <vPortFree>
            vPortFree( pxTCB );
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fe1e 	bl	80043c4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <prvResetNextTaskUnblockTime+0x30>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800379e:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <prvResetNextTaskUnblockTime+0x34>)
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037a6:	e005      	b.n	80037b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <prvResetNextTaskUnblockTime+0x30>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a04      	ldr	r2, [pc, #16]	@ (80037c4 <prvResetNextTaskUnblockTime+0x34>)
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	2000018c 	.word	0x2000018c
 80037c4:	200001f4 	.word	0x200001f4

080037c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037ce:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <xTaskGetSchedulerState+0x34>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037d6:	2301      	movs	r3, #1
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	e008      	b.n	80037ee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <xTaskGetSchedulerState+0x38>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037e4:	2302      	movs	r3, #2
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	e001      	b.n	80037ee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037ee:	687b      	ldr	r3, [r7, #4]
    }
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	200001e0 	.word	0x200001e0
 8003800:	200001fc 	.word	0x200001fc

08003804 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800380e:	4b36      	ldr	r3, [pc, #216]	@ (80038e8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003814:	4b35      	ldr	r3, [pc, #212]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3304      	adds	r3, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fdb0 	bl	8002380 <uxListRemove>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003826:	4b31      	ldr	r3, [pc, #196]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	2201      	movs	r2, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43da      	mvns	r2, r3
 8003834:	4b2e      	ldr	r3, [pc, #184]	@ (80038f0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4013      	ands	r3, r2
 800383a:	4a2d      	ldr	r2, [pc, #180]	@ (80038f0 <prvAddCurrentTaskToDelayedList+0xec>)
 800383c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d124      	bne.n	8003890 <prvAddCurrentTaskToDelayedList+0x8c>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d021      	beq.n	8003890 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800384c:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	4b26      	ldr	r3, [pc, #152]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	4b24      	ldr	r3, [pc, #144]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	6892      	ldr	r2, [r2, #8]
 8003862:	60da      	str	r2, [r3, #12]
 8003864:	4b21      	ldr	r3, [pc, #132]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	3204      	adds	r2, #4
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	4b1e      	ldr	r3, [pc, #120]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1d1a      	adds	r2, r3, #4
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	4b1c      	ldr	r3, [pc, #112]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1d      	ldr	r2, [pc, #116]	@ (80038f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003880:	615a      	str	r2, [r3, #20]
 8003882:	4b1c      	ldr	r3, [pc, #112]	@ (80038f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a1a      	ldr	r2, [pc, #104]	@ (80038f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800388e:	e026      	b.n	80038de <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003898:	4b14      	ldr	r3, [pc, #80]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d209      	bcs.n	80038bc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a8:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f7fe fd2a 	bl	800230e <vListInsert>
}
 80038ba:	e010      	b.n	80038de <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038bc:	4b0f      	ldr	r3, [pc, #60]	@ (80038fc <prvAddCurrentTaskToDelayedList+0xf8>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7fe fd20 	bl	800230e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80038ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <prvAddCurrentTaskToDelayedList+0xfc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d202      	bcs.n	80038de <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80038d8:	4a09      	ldr	r2, [pc, #36]	@ (8003900 <prvAddCurrentTaskToDelayedList+0xfc>)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6013      	str	r3, [r2, #0]
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200001d8 	.word	0x200001d8
 80038ec:	200000fc 	.word	0x200000fc
 80038f0:	200001dc 	.word	0x200001dc
 80038f4:	200001c0 	.word	0x200001c0
 80038f8:	20000190 	.word	0x20000190
 80038fc:	2000018c 	.word	0x2000018c
 8003900:	200001f4 	.word	0x200001f4

08003904 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800390e:	f000 fa4f 	bl	8003db0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003912:	4b12      	ldr	r3, [pc, #72]	@ (800395c <xTimerCreateTimerTask+0x58>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800391a:	4b11      	ldr	r3, [pc, #68]	@ (8003960 <xTimerCreateTimerTask+0x5c>)
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	2302      	movs	r3, #2
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003928:	490e      	ldr	r1, [pc, #56]	@ (8003964 <xTimerCreateTimerTask+0x60>)
 800392a:	480f      	ldr	r0, [pc, #60]	@ (8003968 <xTimerCreateTimerTask+0x64>)
 800392c:	f7ff f84a 	bl	80029c4 <xTaskCreate>
 8003930:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	603b      	str	r3, [r7, #0]
    }
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003950:	687b      	ldr	r3, [r7, #4]
    }
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000230 	.word	0x20000230
 8003960:	20000234 	.word	0x20000234
 8003964:	08004688 	.word	0x08004688
 8003968:	08003a11 	.word	0x08003a11

0800396c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003978:	e008      	b.n	800398c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4413      	add	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	18d1      	adds	r1, r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f8df 	bl	8003b5c <prvInsertTimerInActiveList>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ea      	bne.n	800397a <prvReloadTimer+0xe>
        }
    }
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ba:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <prvProcessExpiredTimer+0x5c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fcd9 	bl	8002380 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f7ff ffc3 	bl	800396c <prvReloadTimer>
 80039e6:	e008      	b.n	80039fa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	4798      	blx	r3
    }
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000228 	.word	0x20000228

08003a10 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a18:	f107 0308 	add.w	r3, r7, #8
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f859 	bl	8003ad4 <prvGetNextExpireTime>
 8003a22:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4619      	mov	r1, r3
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f805 	bl	8003a38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003a2e:	f000 f8d7 	bl	8003be0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a32:	bf00      	nop
 8003a34:	e7f0      	b.n	8003a18 <prvTimerTask+0x8>
	...

08003a38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003a42:	f7ff f9b3 	bl	8002dac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f866 	bl	8003b1c <prvSampleTimeNow>
 8003a50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d130      	bne.n	8003aba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <prvProcessTimerOrBlockTask+0x3c>
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d806      	bhi.n	8003a74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a66:	f7ff f9af 	bl	8002dc8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a6a:	68f9      	ldr	r1, [r7, #12]
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff9f 	bl	80039b0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a72:	e024      	b.n	8003abe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a7a:	4b13      	ldr	r3, [pc, #76]	@ (8003ac8 <prvProcessTimerOrBlockTask+0x90>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <prvProcessTimerOrBlockTask+0x50>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <prvProcessTimerOrBlockTask+0x52>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <prvProcessTimerOrBlockTask+0x94>)
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f7fe ff5f 	bl	800295c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a9e:	f7ff f993 	bl	8002dc8 <xTaskResumeAll>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <prvProcessTimerOrBlockTask+0x98>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
    }
 8003ab8:	e001      	b.n	8003abe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003aba:	f7ff f985 	bl	8002dc8 <xTaskResumeAll>
    }
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2000022c 	.word	0x2000022c
 8003acc:	20000230 	.word	0x20000230
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003adc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <prvGetNextExpireTime+0x44>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <prvGetNextExpireTime+0x16>
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	e000      	b.n	8003aec <prvGetNextExpireTime+0x18>
 8003aea:	2200      	movs	r2, #0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d105      	bne.n	8003b04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003af8:	4b07      	ldr	r3, [pc, #28]	@ (8003b18 <prvGetNextExpireTime+0x44>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e001      	b.n	8003b08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003b08:	68fb      	ldr	r3, [r7, #12]
    }
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000228 	.word	0x20000228

08003b1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003b24:	f7ff fa4c 	bl	8002fc0 <xTaskGetTickCount>
 8003b28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <prvSampleTimeNow+0x3c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d205      	bcs.n	8003b40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003b34:	f000 f916 	bl	8003d64 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e002      	b.n	8003b46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003b46:	4a04      	ldr	r2, [pc, #16]	@ (8003b58 <prvSampleTimeNow+0x3c>)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
    }
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000238 	.word	0x20000238

08003b5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d812      	bhi.n	8003ba8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d302      	bcc.n	8003b96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b90:	2301      	movs	r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e01b      	b.n	8003bce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <prvInsertTimerInActiveList+0x7c>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f7fe fbb4 	bl	800230e <vListInsert>
 8003ba6:	e012      	b.n	8003bce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d206      	bcs.n	8003bbe <prvInsertTimerInActiveList+0x62>
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d302      	bcc.n	8003bbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e007      	b.n	8003bce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bbe:	4b07      	ldr	r3, [pc, #28]	@ (8003bdc <prvInsertTimerInActiveList+0x80>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f7fe fba0 	bl	800230e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003bce:	697b      	ldr	r3, [r7, #20]
    }
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	2000022c 	.word	0x2000022c
 8003bdc:	20000228 	.word	0x20000228

08003be0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003be6:	e0a9      	b.n	8003d3c <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f2c0 80a6 	blt.w	8003d3c <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d004      	beq.n	8003c06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fbbd 	bl	8002380 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff87 	bl	8003b1c <prvSampleTimeNow>
 8003c0e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	f200 808e 	bhi.w	8003d36 <prvProcessReceivedCommands+0x156>
 8003c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <prvProcessReceivedCommands+0x40>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c45 	.word	0x08003c45
 8003c28:	08003cad 	.word	0x08003cad
 8003c2c:	08003cc1 	.word	0x08003cc1
 8003c30:	08003d0d 	.word	0x08003d0d
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c45 	.word	0x08003c45
 8003c3c:	08003cad 	.word	0x08003cad
 8003c40:	08003cc1 	.word	0x08003cc1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	18d1      	adds	r1, r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	69f8      	ldr	r0, [r7, #28]
 8003c64:	f7ff ff7a 	bl	8003b5c <prvInsertTimerInActiveList>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d065      	beq.n	8003d3a <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d009      	beq.n	8003c90 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	4413      	add	r3, r2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4619      	mov	r1, r3
 8003c88:	69f8      	ldr	r0, [r7, #28]
 8003c8a:	f7ff fe6f 	bl	800396c <prvReloadTimer>
 8003c8e:	e008      	b.n	8003ca2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	69f8      	ldr	r0, [r7, #28]
 8003ca8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003caa:	e046      	b.n	8003d3a <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003cbe:	e03d      	b.n	8003d3c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	617b      	str	r3, [r7, #20]
    }
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	18d1      	adds	r1, r2, r3
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	69f8      	ldr	r0, [r7, #28]
 8003d06:	f7ff ff29 	bl	8003b5c <prvInsertTimerInActiveList>
                        break;
 8003d0a:	e017      	b.n	8003d3c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003d1a:	69f8      	ldr	r0, [r7, #28]
 8003d1c:	f000 fb52 	bl	80043c4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003d20:	e00c      	b.n	8003d3c <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003d34:	e002      	b.n	8003d3c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <prvProcessReceivedCommands+0x15c>
                        break;
 8003d3a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d3c:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <prvProcessReceivedCommands+0x180>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f107 0108 	add.w	r1, r7, #8
 8003d44:	2200      	movs	r2, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fc48 	bl	80025dc <xQueueReceive>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f47f af4a 	bne.w	8003be8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000230 	.word	0x20000230

08003d64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d6a:	e009      	b.n	8003d80 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003da8 <prvSwitchTimerLists+0x44>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003d76:	f04f 31ff 	mov.w	r1, #4294967295
 8003d7a:	6838      	ldr	r0, [r7, #0]
 8003d7c:	f7ff fe18 	bl	80039b0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d80:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <prvSwitchTimerLists+0x44>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003d8a:	4b07      	ldr	r3, [pc, #28]	@ (8003da8 <prvSwitchTimerLists+0x44>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <prvSwitchTimerLists+0x48>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <prvSwitchTimerLists+0x44>)
 8003d96:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d98:	4a04      	ldr	r2, [pc, #16]	@ (8003dac <prvSwitchTimerLists+0x48>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6013      	str	r3, [r2, #0]
    }
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000228 	.word	0x20000228
 8003dac:	2000022c 	.word	0x2000022c

08003db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003db4:	f000 f962 	bl	800407c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <prvCheckForValidListAndQueue+0x54>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11d      	bne.n	8003dfc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003dc0:	4811      	ldr	r0, [pc, #68]	@ (8003e08 <prvCheckForValidListAndQueue+0x58>)
 8003dc2:	f7fe fa77 	bl	80022b4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003dc6:	4811      	ldr	r0, [pc, #68]	@ (8003e0c <prvCheckForValidListAndQueue+0x5c>)
 8003dc8:	f7fe fa74 	bl	80022b4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003dcc:	4b10      	ldr	r3, [pc, #64]	@ (8003e10 <prvCheckForValidListAndQueue+0x60>)
 8003dce:	4a0e      	ldr	r2, [pc, #56]	@ (8003e08 <prvCheckForValidListAndQueue+0x58>)
 8003dd0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <prvCheckForValidListAndQueue+0x64>)
 8003dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e0c <prvCheckForValidListAndQueue+0x5c>)
 8003dd6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003dd8:	2200      	movs	r2, #0
 8003dda:	210c      	movs	r1, #12
 8003ddc:	200a      	movs	r0, #10
 8003dde:	f7fe fb8b 	bl	80024f8 <xQueueGenericCreate>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4a07      	ldr	r2, [pc, #28]	@ (8003e04 <prvCheckForValidListAndQueue+0x54>)
 8003de6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <prvCheckForValidListAndQueue+0x54>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003df0:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <prvCheckForValidListAndQueue+0x54>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4908      	ldr	r1, [pc, #32]	@ (8003e18 <prvCheckForValidListAndQueue+0x68>)
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fd60 	bl	80028bc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003dfc:	f000 f970 	bl	80040e0 <vPortExitCritical>
    }
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000230 	.word	0x20000230
 8003e08:	20000200 	.word	0x20000200
 8003e0c:	20000214 	.word	0x20000214
 8003e10:	20000228 	.word	0x20000228
 8003e14:	2000022c 	.word	0x2000022c
 8003e18:	08004690 	.word	0x08004690

08003e1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3b04      	subs	r3, #4
 8003e2c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3b04      	subs	r3, #4
 8003e3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3b04      	subs	r3, #4
 8003e4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e80 <pxPortInitialiseStack+0x64>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3b14      	subs	r3, #20
 8003e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3b04      	subs	r3, #4
 8003e62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f06f 0202 	mvn.w	r2, #2
 8003e6a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3b20      	subs	r3, #32
 8003e70:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	08003e85 	.word	0x08003e85

08003e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003e8e:	4b13      	ldr	r3, [pc, #76]	@ (8003edc <prvTaskExitError+0x58>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d00b      	beq.n	8003eb0 <prvTaskExitError+0x2c>
        __asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	60fb      	str	r3, [r7, #12]
    }
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <prvTaskExitError+0x28>
        __asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	60bb      	str	r3, [r7, #8]
    }
 8003ec2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003ec4:	bf00      	nop
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0fc      	beq.n	8003ec6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	2000000c 	.word	0x2000000c

08003ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ee0:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <pxCurrentTCBConst2>)
 8003ee2:	6819      	ldr	r1, [r3, #0]
 8003ee4:	6808      	ldr	r0, [r1, #0]
 8003ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eea:	f380 8809 	msr	PSP, r0
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f380 8811 	msr	BASEPRI, r0
 8003efa:	4770      	bx	lr
 8003efc:	f3af 8000 	nop.w

08003f00 <pxCurrentTCBConst2>:
 8003f00:	200000fc 	.word	0x200000fc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f08:	4808      	ldr	r0, [pc, #32]	@ (8003f2c <prvPortStartFirstTask+0x24>)
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	6800      	ldr	r0, [r0, #0]
 8003f0e:	f380 8808 	msr	MSP, r0
 8003f12:	f04f 0000 	mov.w	r0, #0
 8003f16:	f380 8814 	msr	CONTROL, r0
 8003f1a:	b662      	cpsie	i
 8003f1c:	b661      	cpsie	f
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	df00      	svc	0
 8003f28:	bf00      	nop
 8003f2a:	0000      	.short	0x0000
 8003f2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop

08003f34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f3a:	4b47      	ldr	r3, [pc, #284]	@ (8004058 <xPortStartScheduler+0x124>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a47      	ldr	r2, [pc, #284]	@ (800405c <xPortStartScheduler+0x128>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d10b      	bne.n	8003f5c <xPortStartScheduler+0x28>
        __asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	613b      	str	r3, [r7, #16]
    }
 8003f56:	bf00      	nop
 8003f58:	bf00      	nop
 8003f5a:	e7fd      	b.n	8003f58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004058 <xPortStartScheduler+0x124>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3f      	ldr	r2, [pc, #252]	@ (8004060 <xPortStartScheduler+0x12c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d10b      	bne.n	8003f7e <xPortStartScheduler+0x4a>
        __asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60fb      	str	r3, [r7, #12]
    }
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	e7fd      	b.n	8003f7a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f7e:	4b39      	ldr	r3, [pc, #228]	@ (8004064 <xPortStartScheduler+0x130>)
 8003f80:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	22ff      	movs	r2, #255	@ 0xff
 8003f8e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4b31      	ldr	r3, [pc, #196]	@ (8004068 <xPortStartScheduler+0x134>)
 8003fa4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fa6:	4b31      	ldr	r3, [pc, #196]	@ (800406c <xPortStartScheduler+0x138>)
 8003fa8:	2207      	movs	r2, #7
 8003faa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fac:	e009      	b.n	8003fc2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003fae:	4b2f      	ldr	r3, [pc, #188]	@ (800406c <xPortStartScheduler+0x138>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800406c <xPortStartScheduler+0x138>)
 8003fb6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fca:	2b80      	cmp	r3, #128	@ 0x80
 8003fcc:	d0ef      	beq.n	8003fae <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fce:	4b27      	ldr	r3, [pc, #156]	@ (800406c <xPortStartScheduler+0x138>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1c3 0307 	rsb	r3, r3, #7
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d00b      	beq.n	8003ff2 <xPortStartScheduler+0xbe>
        __asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	60bb      	str	r3, [r7, #8]
    }
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	e7fd      	b.n	8003fee <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <xPortStartScheduler+0x138>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <xPortStartScheduler+0x138>)
 8003ffa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <xPortStartScheduler+0x138>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004004:	4a19      	ldr	r2, [pc, #100]	@ (800406c <xPortStartScheduler+0x138>)
 8004006:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	b2da      	uxtb	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004010:	4b17      	ldr	r3, [pc, #92]	@ (8004070 <xPortStartScheduler+0x13c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <xPortStartScheduler+0x13c>)
 8004016:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800401a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800401c:	4b14      	ldr	r3, [pc, #80]	@ (8004070 <xPortStartScheduler+0x13c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a13      	ldr	r2, [pc, #76]	@ (8004070 <xPortStartScheduler+0x13c>)
 8004022:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004026:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004028:	f000 f8e0 	bl	80041ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800402c:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <xPortStartScheduler+0x140>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004032:	f000 f8ff 	bl	8004234 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004036:	4b10      	ldr	r3, [pc, #64]	@ (8004078 <xPortStartScheduler+0x144>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a0f      	ldr	r2, [pc, #60]	@ (8004078 <xPortStartScheduler+0x144>)
 800403c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004042:	f7ff ff61 	bl	8003f08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004046:	f7ff f8e3 	bl	8003210 <vTaskSwitchContext>
    prvTaskExitError();
 800404a:	f7ff ff1b 	bl	8003e84 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	e000ed00 	.word	0xe000ed00
 800405c:	410fc271 	.word	0x410fc271
 8004060:	410fc270 	.word	0x410fc270
 8004064:	e000e400 	.word	0xe000e400
 8004068:	2000023c 	.word	0x2000023c
 800406c:	20000240 	.word	0x20000240
 8004070:	e000ed20 	.word	0xe000ed20
 8004074:	2000000c 	.word	0x2000000c
 8004078:	e000ef34 	.word	0xe000ef34

0800407c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
        __asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	607b      	str	r3, [r7, #4]
    }
 8004094:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004096:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <vPortEnterCritical+0x5c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3301      	adds	r3, #1
 800409c:	4a0e      	ldr	r2, [pc, #56]	@ (80040d8 <vPortEnterCritical+0x5c>)
 800409e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040a0:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <vPortEnterCritical+0x5c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d110      	bne.n	80040ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040a8:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <vPortEnterCritical+0x60>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <vPortEnterCritical+0x4e>
        __asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	603b      	str	r3, [r7, #0]
    }
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	e7fd      	b.n	80040c6 <vPortEnterCritical+0x4a>
    }
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	2000000c 	.word	0x2000000c
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040e6:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <vPortExitCritical+0x50>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <vPortExitCritical+0x26>
        __asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
    }
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	e7fd      	b.n	8004102 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004106:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <vPortExitCritical+0x50>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3b01      	subs	r3, #1
 800410c:	4a08      	ldr	r2, [pc, #32]	@ (8004130 <vPortExitCritical+0x50>)
 800410e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004110:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <vPortExitCritical+0x50>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <vPortExitCritical+0x44>
 8004118:	2300      	movs	r3, #0
 800411a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004122:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	2000000c 	.word	0x2000000c
	...

08004140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004140:	f3ef 8009 	mrs	r0, PSP
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	4b15      	ldr	r3, [pc, #84]	@ (80041a0 <pxCurrentTCBConst>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	f01e 0f10 	tst.w	lr, #16
 8004150:	bf08      	it	eq
 8004152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415a:	6010      	str	r0, [r2, #0]
 800415c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004160:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004164:	f380 8811 	msr	BASEPRI, r0
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f7ff f84e 	bl	8003210 <vTaskSwitchContext>
 8004174:	f04f 0000 	mov.w	r0, #0
 8004178:	f380 8811 	msr	BASEPRI, r0
 800417c:	bc09      	pop	{r0, r3}
 800417e:	6819      	ldr	r1, [r3, #0]
 8004180:	6808      	ldr	r0, [r1, #0]
 8004182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004186:	f01e 0f10 	tst.w	lr, #16
 800418a:	bf08      	it	eq
 800418c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004190:	f380 8809 	msr	PSP, r0
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	f3af 8000 	nop.w

080041a0 <pxCurrentTCBConst>:
 80041a0:	200000fc 	.word	0x200000fc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop

080041a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
        __asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	607b      	str	r3, [r7, #4]
    }
 80041c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041c2:	f7fe ff0d 	bl	8002fe0 <xTaskIncrementTick>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041cc:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <SysTick_Handler+0x40>)
 80041ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	2300      	movs	r3, #0
 80041d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f383 8811 	msr	BASEPRI, r3
    }
 80041de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <vPortSetupTimerInterrupt+0x34>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <vPortSetupTimerInterrupt+0x38>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004228 <vPortSetupTimerInterrupt+0x3c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <vPortSetupTimerInterrupt+0x40>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <vPortSetupTimerInterrupt+0x44>)
 800420a:	3b01      	subs	r3, #1
 800420c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800420e:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <vPortSetupTimerInterrupt+0x34>)
 8004210:	2207      	movs	r2, #7
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000e010 	.word	0xe000e010
 8004224:	e000e018 	.word	0xe000e018
 8004228:	20000000 	.word	0x20000000
 800422c:	10624dd3 	.word	0x10624dd3
 8004230:	e000e014 	.word	0xe000e014

08004234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004234:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004244 <vPortEnableVFP+0x10>
 8004238:	6801      	ldr	r1, [r0, #0]
 800423a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800423e:	6001      	str	r1, [r0, #0]
 8004240:	4770      	bx	lr
 8004242:	0000      	.short	0x0000
 8004244:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop

0800424c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	@ 0x28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004258:	f7fe fda8 	bl	8002dac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800425c:	4b54      	ldr	r3, [pc, #336]	@ (80043b0 <pvPortMalloc+0x164>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004264:	f000 f90c 	bl	8004480 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d012      	beq.n	8004294 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800426e:	2208      	movs	r2, #8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	3308      	adds	r3, #8
 800427a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	43db      	mvns	r3, r3
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d804      	bhi.n	8004290 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	4413      	add	r3, r2
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	e001      	b.n	8004294 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	db71      	blt.n	800437e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d06e      	beq.n	800437e <pvPortMalloc+0x132>
 80042a0:	4b44      	ldr	r3, [pc, #272]	@ (80043b4 <pvPortMalloc+0x168>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d869      	bhi.n	800437e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80042aa:	4b43      	ldr	r3, [pc, #268]	@ (80043b8 <pvPortMalloc+0x16c>)
 80042ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80042ae:	4b42      	ldr	r3, [pc, #264]	@ (80043b8 <pvPortMalloc+0x16c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042b4:	e004      	b.n	80042c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d903      	bls.n	80042d2 <pvPortMalloc+0x86>
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f1      	bne.n	80042b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80042d2:	4b37      	ldr	r3, [pc, #220]	@ (80043b0 <pvPortMalloc+0x164>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d8:	429a      	cmp	r2, r3
 80042da:	d050      	beq.n	800437e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2208      	movs	r2, #8
 80042e2:	4413      	add	r3, r2
 80042e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	1ad2      	subs	r2, r2, r3
 80042f6:	2308      	movs	r3, #8
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d920      	bls.n	8004340 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <pvPortMalloc+0xdc>
        __asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	613b      	str	r3, [r7, #16]
    }
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	1ad2      	subs	r2, r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f000 f8fc 	bl	8004538 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004340:	4b1c      	ldr	r3, [pc, #112]	@ (80043b4 <pvPortMalloc+0x168>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <pvPortMalloc+0x168>)
 800434c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800434e:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <pvPortMalloc+0x168>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b1a      	ldr	r3, [pc, #104]	@ (80043bc <pvPortMalloc+0x170>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d203      	bcs.n	8004362 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800435a:	4b16      	ldr	r3, [pc, #88]	@ (80043b4 <pvPortMalloc+0x168>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a17      	ldr	r2, [pc, #92]	@ (80043bc <pvPortMalloc+0x170>)
 8004360:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004374:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <pvPortMalloc+0x174>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	4a11      	ldr	r2, [pc, #68]	@ (80043c0 <pvPortMalloc+0x174>)
 800437c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800437e:	f7fe fd23 	bl	8002dc8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <pvPortMalloc+0x158>
        __asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
    }
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <pvPortMalloc+0x154>
    return pvReturn;
 80043a4:	69fb      	ldr	r3, [r7, #28]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3728      	adds	r7, #40	@ 0x28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	2000fa4c 	.word	0x2000fa4c
 80043b4:	2000fa50 	.word	0x2000fa50
 80043b8:	2000fa44 	.word	0x2000fa44
 80043bc:	2000fa54 	.word	0x2000fa54
 80043c0:	2000fa58 	.word	0x2000fa58

080043c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d04b      	beq.n	800446e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80043d6:	2308      	movs	r3, #8
 80043d8:	425b      	negs	r3, r3
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4413      	add	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	db0b      	blt.n	8004404 <vPortFree+0x40>
        __asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	60fb      	str	r3, [r7, #12]
    }
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00b      	beq.n	8004424 <vPortFree+0x60>
        __asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	60bb      	str	r3, [r7, #8]
    }
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	e7fd      	b.n	8004420 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	0fdb      	lsrs	r3, r3, #31
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01c      	beq.n	800446e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d118      	bne.n	800446e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004448:	f7fe fcb0 	bl	8002dac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <vPortFree+0xb4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4413      	add	r3, r2
 8004456:	4a08      	ldr	r2, [pc, #32]	@ (8004478 <vPortFree+0xb4>)
 8004458:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800445a:	6938      	ldr	r0, [r7, #16]
 800445c:	f000 f86c 	bl	8004538 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004460:	4b06      	ldr	r3, [pc, #24]	@ (800447c <vPortFree+0xb8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	4a05      	ldr	r2, [pc, #20]	@ (800447c <vPortFree+0xb8>)
 8004468:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800446a:	f7fe fcad 	bl	8002dc8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800446e:	bf00      	nop
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	2000fa50 	.word	0x2000fa50
 800447c:	2000fa5c 	.word	0x2000fa5c

08004480 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004486:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800448a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800448c:	4b25      	ldr	r3, [pc, #148]	@ (8004524 <prvHeapInit+0xa4>)
 800448e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3307      	adds	r3, #7
 800449e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0307 	bic.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004524 <prvHeapInit+0xa4>)
 80044b0:	4413      	add	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004528 <prvHeapInit+0xa8>)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80044be:	4b1a      	ldr	r3, [pc, #104]	@ (8004528 <prvHeapInit+0xa8>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	4413      	add	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80044cc:	2208      	movs	r2, #8
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0307 	bic.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a13      	ldr	r2, [pc, #76]	@ (800452c <prvHeapInit+0xac>)
 80044e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80044e2:	4b12      	ldr	r3, [pc, #72]	@ (800452c <prvHeapInit+0xac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2200      	movs	r2, #0
 80044e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80044ea:	4b10      	ldr	r3, [pc, #64]	@ (800452c <prvHeapInit+0xac>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	1ad2      	subs	r2, r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004500:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <prvHeapInit+0xac>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4a08      	ldr	r2, [pc, #32]	@ (8004530 <prvHeapInit+0xb0>)
 800450e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a07      	ldr	r2, [pc, #28]	@ (8004534 <prvHeapInit+0xb4>)
 8004516:	6013      	str	r3, [r2, #0]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	20000244 	.word	0x20000244
 8004528:	2000fa44 	.word	0x2000fa44
 800452c:	2000fa4c 	.word	0x2000fa4c
 8004530:	2000fa54 	.word	0x2000fa54
 8004534:	2000fa50 	.word	0x2000fa50

08004538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004540:	4b28      	ldr	r3, [pc, #160]	@ (80045e4 <prvInsertBlockIntoFreeList+0xac>)
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e002      	b.n	800454c <prvInsertBlockIntoFreeList+0x14>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d8f7      	bhi.n	8004546 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4413      	add	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d108      	bne.n	800457a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	441a      	add	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	441a      	add	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d118      	bne.n	80045c0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b15      	ldr	r3, [pc, #84]	@ (80045e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d00d      	beq.n	80045b6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	441a      	add	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e008      	b.n	80045c8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045b6:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <prvInsertBlockIntoFreeList+0xb0>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e003      	b.n	80045c8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d002      	beq.n	80045d6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	2000fa44 	.word	0x2000fa44
 80045e8:	2000fa4c 	.word	0x2000fa4c

080045ec <memset>:
 80045ec:	4402      	add	r2, r0
 80045ee:	4603      	mov	r3, r0
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	f803 1b01 	strb.w	r1, [r3], #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <__libc_init_array>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004634 <__libc_init_array+0x38>)
 8004600:	4c0d      	ldr	r4, [pc, #52]	@ (8004638 <__libc_init_array+0x3c>)
 8004602:	1b64      	subs	r4, r4, r5
 8004604:	10a4      	asrs	r4, r4, #2
 8004606:	2600      	movs	r6, #0
 8004608:	42a6      	cmp	r6, r4
 800460a:	d109      	bne.n	8004620 <__libc_init_array+0x24>
 800460c:	4d0b      	ldr	r5, [pc, #44]	@ (800463c <__libc_init_array+0x40>)
 800460e:	4c0c      	ldr	r4, [pc, #48]	@ (8004640 <__libc_init_array+0x44>)
 8004610:	f000 f826 	bl	8004660 <_init>
 8004614:	1b64      	subs	r4, r4, r5
 8004616:	10a4      	asrs	r4, r4, #2
 8004618:	2600      	movs	r6, #0
 800461a:	42a6      	cmp	r6, r4
 800461c:	d105      	bne.n	800462a <__libc_init_array+0x2e>
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	f855 3b04 	ldr.w	r3, [r5], #4
 8004624:	4798      	blx	r3
 8004626:	3601      	adds	r6, #1
 8004628:	e7ee      	b.n	8004608 <__libc_init_array+0xc>
 800462a:	f855 3b04 	ldr.w	r3, [r5], #4
 800462e:	4798      	blx	r3
 8004630:	3601      	adds	r6, #1
 8004632:	e7f2      	b.n	800461a <__libc_init_array+0x1e>
 8004634:	080046b8 	.word	0x080046b8
 8004638:	080046b8 	.word	0x080046b8
 800463c:	080046b8 	.word	0x080046b8
 8004640:	080046bc 	.word	0x080046bc

08004644 <memcpy>:
 8004644:	440a      	add	r2, r1
 8004646:	4291      	cmp	r1, r2
 8004648:	f100 33ff 	add.w	r3, r0, #4294967295
 800464c:	d100      	bne.n	8004650 <memcpy+0xc>
 800464e:	4770      	bx	lr
 8004650:	b510      	push	{r4, lr}
 8004652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800465a:	4291      	cmp	r1, r2
 800465c:	d1f9      	bne.n	8004652 <memcpy+0xe>
 800465e:	bd10      	pop	{r4, pc}

08004660 <_init>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	bf00      	nop
 8004664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004666:	bc08      	pop	{r3}
 8004668:	469e      	mov	lr, r3
 800466a:	4770      	bx	lr

0800466c <_fini>:
 800466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466e:	bf00      	nop
 8004670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004672:	bc08      	pop	{r3}
 8004674:	469e      	mov	lr, r3
 8004676:	4770      	bx	lr
